
FinalDraft1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         000000c2  00800100  000027cc  00002860  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000027cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000001ee  008001c2  008001c2  00002922  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00002922  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002954  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000188  00000000  00000000  00002998  2**3
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00001718  00000000  00000000  00002b20  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000009f4  00000000  00000000  00004238  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00001782  00000000  00000000  00004c2c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000430  00000000  00000000  000063b0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000007aa  00000000  00000000  000067e0  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    00000870  00000000  00000000  00006f8a  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 000000f8  00000000  00000000  000077fa  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
       2:	00 00       	nop
       4:	62 c0       	rjmp	.+196    	; 0xca <__bad_interrupt>
       6:	00 00       	nop
       8:	60 c0       	rjmp	.+192    	; 0xca <__bad_interrupt>
       a:	00 00       	nop
       c:	5e c0       	rjmp	.+188    	; 0xca <__bad_interrupt>
       e:	00 00       	nop
      10:	5c c0       	rjmp	.+184    	; 0xca <__bad_interrupt>
      12:	00 00       	nop
      14:	5a c0       	rjmp	.+180    	; 0xca <__bad_interrupt>
      16:	00 00       	nop
      18:	58 c0       	rjmp	.+176    	; 0xca <__bad_interrupt>
      1a:	00 00       	nop
      1c:	56 c0       	rjmp	.+172    	; 0xca <__bad_interrupt>
      1e:	00 00       	nop
      20:	54 c0       	rjmp	.+168    	; 0xca <__bad_interrupt>
      22:	00 00       	nop
      24:	52 c0       	rjmp	.+164    	; 0xca <__bad_interrupt>
      26:	00 00       	nop
      28:	50 c0       	rjmp	.+160    	; 0xca <__bad_interrupt>
      2a:	00 00       	nop
      2c:	4e c0       	rjmp	.+156    	; 0xca <__bad_interrupt>
      2e:	00 00       	nop
      30:	4c c0       	rjmp	.+152    	; 0xca <__bad_interrupt>
      32:	00 00       	nop
      34:	bb c0       	rjmp	.+374    	; 0x1ac <__vector_13>
      36:	00 00       	nop
      38:	48 c0       	rjmp	.+144    	; 0xca <__bad_interrupt>
      3a:	00 00       	nop
      3c:	46 c0       	rjmp	.+140    	; 0xca <__bad_interrupt>
      3e:	00 00       	nop
      40:	44 c0       	rjmp	.+136    	; 0xca <__bad_interrupt>
      42:	00 00       	nop
      44:	42 c0       	rjmp	.+132    	; 0xca <__bad_interrupt>
      46:	00 00       	nop
      48:	40 c0       	rjmp	.+128    	; 0xca <__bad_interrupt>
      4a:	00 00       	nop
      4c:	3e c0       	rjmp	.+124    	; 0xca <__bad_interrupt>
      4e:	00 00       	nop
      50:	3c c0       	rjmp	.+120    	; 0xca <__bad_interrupt>
      52:	00 00       	nop
      54:	3a c0       	rjmp	.+116    	; 0xca <__bad_interrupt>
      56:	00 00       	nop
      58:	38 c0       	rjmp	.+112    	; 0xca <__bad_interrupt>
      5a:	00 00       	nop
      5c:	36 c0       	rjmp	.+108    	; 0xca <__bad_interrupt>
      5e:	00 00       	nop
      60:	34 c0       	rjmp	.+104    	; 0xca <__bad_interrupt>
      62:	00 00       	nop
      64:	32 c0       	rjmp	.+100    	; 0xca <__bad_interrupt>
      66:	00 00       	nop
      68:	30 c0       	rjmp	.+96     	; 0xca <__bad_interrupt>
      6a:	00 00       	nop
      6c:	2e c0       	rjmp	.+92     	; 0xca <__bad_interrupt>
      6e:	00 00       	nop
      70:	2c c0       	rjmp	.+88     	; 0xca <__bad_interrupt>
      72:	00 00       	nop
      74:	2a c0       	rjmp	.+84     	; 0xca <__bad_interrupt>
      76:	00 00       	nop
      78:	28 c0       	rjmp	.+80     	; 0xca <__bad_interrupt>
      7a:	00 00       	nop
      7c:	26 c0       	rjmp	.+76     	; 0xca <__bad_interrupt>
      7e:	00 00       	nop
      80:	24 c0       	rjmp	.+72     	; 0xca <__bad_interrupt>
      82:	00 00       	nop
      84:	22 c0       	rjmp	.+68     	; 0xca <__bad_interrupt>
      86:	00 00       	nop
      88:	20 c0       	rjmp	.+64     	; 0xca <__bad_interrupt>
	...

0000008c <__ctors_end>:
      8c:	11 24       	eor	r1, r1
      8e:	1f be       	out	0x3f, r1	; 63
      90:	cf ef       	ldi	r28, 0xFF	; 255
      92:	d0 e4       	ldi	r29, 0x40	; 64
      94:	de bf       	out	0x3e, r29	; 62
      96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
      98:	11 e0       	ldi	r17, 0x01	; 1
      9a:	a0 e0       	ldi	r26, 0x00	; 0
      9c:	b1 e0       	ldi	r27, 0x01	; 1
      9e:	ec ec       	ldi	r30, 0xCC	; 204
      a0:	f7 e2       	ldi	r31, 0x27	; 39
      a2:	00 e0       	ldi	r16, 0x00	; 0
      a4:	0b bf       	out	0x3b, r16	; 59
      a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
      a8:	07 90       	elpm	r0, Z+
      aa:	0d 92       	st	X+, r0
      ac:	a2 3c       	cpi	r26, 0xC2	; 194
      ae:	b1 07       	cpc	r27, r17
      b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
      b2:	23 e0       	ldi	r18, 0x03	; 3
      b4:	a2 ec       	ldi	r26, 0xC2	; 194
      b6:	b1 e0       	ldi	r27, 0x01	; 1
      b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
      ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
      bc:	a0 3b       	cpi	r26, 0xB0	; 176
      be:	b2 07       	cpc	r27, r18
      c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
      c2:	0e 94 e5 11 	call	0x23ca	; 0x23ca <main>
      c6:	0c 94 e4 13 	jmp	0x27c8	; 0x27c8 <_exit>

000000ca <__bad_interrupt>:
      ca:	9a cf       	rjmp	.-204    	; 0x0 <__vectors>

000000cc <TimerSet>:
	SREG |= 0x80;	// 0x80: 1000000
}

void TimerOff() {
	TCCR1B 	= 0x00; // bit3bit2bit1bit0=0000: timer off
}
      cc:	cf 93       	push	r28
      ce:	df 93       	push	r29
      d0:	00 d0       	rcall	.+0      	; 0xd2 <TimerSet+0x6>
      d2:	00 d0       	rcall	.+0      	; 0xd4 <TimerSet+0x8>
      d4:	cd b7       	in	r28, 0x3d	; 61
      d6:	de b7       	in	r29, 0x3e	; 62
      d8:	69 83       	std	Y+1, r22	; 0x01
      da:	7a 83       	std	Y+2, r23	; 0x02
      dc:	8b 83       	std	Y+3, r24	; 0x03
      de:	9c 83       	std	Y+4, r25	; 0x04
      e0:	89 81       	ldd	r24, Y+1	; 0x01
      e2:	9a 81       	ldd	r25, Y+2	; 0x02
      e4:	ab 81       	ldd	r26, Y+3	; 0x03
      e6:	bc 81       	ldd	r27, Y+4	; 0x04
      e8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__data_start>
      ec:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__data_start+0x1>
      f0:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__data_start+0x2>
      f4:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__data_start+0x3>
      f8:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
      fc:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     100:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
     104:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
     108:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <_avr_timer_cntcurr>
     10c:	90 93 c4 01 	sts	0x01C4, r25	; 0x8001c4 <_avr_timer_cntcurr+0x1>
     110:	a0 93 c5 01 	sts	0x01C5, r26	; 0x8001c5 <_avr_timer_cntcurr+0x2>
     114:	b0 93 c6 01 	sts	0x01C6, r27	; 0x8001c6 <_avr_timer_cntcurr+0x3>
     118:	00 00       	nop
     11a:	0f 90       	pop	r0
     11c:	0f 90       	pop	r0
     11e:	0f 90       	pop	r0
     120:	0f 90       	pop	r0
     122:	df 91       	pop	r29
     124:	cf 91       	pop	r28
     126:	08 95       	ret

00000128 <TimerOn>:
     128:	cf 93       	push	r28
     12a:	df 93       	push	r29
     12c:	cd b7       	in	r28, 0x3d	; 61
     12e:	de b7       	in	r29, 0x3e	; 62
     130:	81 e8       	ldi	r24, 0x81	; 129
     132:	90 e0       	ldi	r25, 0x00	; 0
     134:	2b e0       	ldi	r18, 0x0B	; 11
     136:	fc 01       	movw	r30, r24
     138:	20 83       	st	Z, r18
     13a:	88 e8       	ldi	r24, 0x88	; 136
     13c:	90 e0       	ldi	r25, 0x00	; 0
     13e:	2d e7       	ldi	r18, 0x7D	; 125
     140:	30 e0       	ldi	r19, 0x00	; 0
     142:	fc 01       	movw	r30, r24
     144:	31 83       	std	Z+1, r19	; 0x01
     146:	20 83       	st	Z, r18
     148:	8f e6       	ldi	r24, 0x6F	; 111
     14a:	90 e0       	ldi	r25, 0x00	; 0
     14c:	22 e0       	ldi	r18, 0x02	; 2
     14e:	fc 01       	movw	r30, r24
     150:	20 83       	st	Z, r18
     152:	84 e8       	ldi	r24, 0x84	; 132
     154:	90 e0       	ldi	r25, 0x00	; 0
     156:	fc 01       	movw	r30, r24
     158:	11 82       	std	Z+1, r1	; 0x01
     15a:	10 82       	st	Z, r1
     15c:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     160:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     164:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
     168:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
     16c:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <_avr_timer_cntcurr>
     170:	90 93 c4 01 	sts	0x01C4, r25	; 0x8001c4 <_avr_timer_cntcurr+0x1>
     174:	a0 93 c5 01 	sts	0x01C5, r26	; 0x8001c5 <_avr_timer_cntcurr+0x2>
     178:	b0 93 c6 01 	sts	0x01C6, r27	; 0x8001c6 <_avr_timer_cntcurr+0x3>
     17c:	8f e5       	ldi	r24, 0x5F	; 95
     17e:	90 e0       	ldi	r25, 0x00	; 0
     180:	2f e5       	ldi	r18, 0x5F	; 95
     182:	30 e0       	ldi	r19, 0x00	; 0
     184:	f9 01       	movw	r30, r18
     186:	20 81       	ld	r18, Z
     188:	20 68       	ori	r18, 0x80	; 128
     18a:	fc 01       	movw	r30, r24
     18c:	20 83       	st	Z, r18
     18e:	00 00       	nop
     190:	df 91       	pop	r29
     192:	cf 91       	pop	r28
     194:	08 95       	ret

00000196 <TimerISR>:

void TimerISR() {
     196:	cf 93       	push	r28
     198:	df 93       	push	r29
     19a:	cd b7       	in	r28, 0x3d	; 61
     19c:	de b7       	in	r29, 0x3e	; 62
	TimerFlag = 1;
     19e:	81 e0       	ldi	r24, 0x01	; 1
     1a0:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <__data_end>
}
     1a4:	00 00       	nop
     1a6:	df 91       	pop	r29
     1a8:	cf 91       	pop	r28
     1aa:	08 95       	ret

000001ac <__vector_13>:

// In our approach, the C programmer does not touch this ISR, but rather TimerISR()
ISR(TIMER1_COMPA_vect)
{
     1ac:	1f 92       	push	r1
     1ae:	0f 92       	push	r0
     1b0:	00 90 5f 00 	lds	r0, 0x005F	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     1b4:	0f 92       	push	r0
     1b6:	11 24       	eor	r1, r1
     1b8:	00 90 5b 00 	lds	r0, 0x005B	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     1bc:	0f 92       	push	r0
     1be:	2f 93       	push	r18
     1c0:	3f 93       	push	r19
     1c2:	4f 93       	push	r20
     1c4:	5f 93       	push	r21
     1c6:	6f 93       	push	r22
     1c8:	7f 93       	push	r23
     1ca:	8f 93       	push	r24
     1cc:	9f 93       	push	r25
     1ce:	af 93       	push	r26
     1d0:	bf 93       	push	r27
     1d2:	ef 93       	push	r30
     1d4:	ff 93       	push	r31
     1d6:	cf 93       	push	r28
     1d8:	df 93       	push	r29
     1da:	cd b7       	in	r28, 0x3d	; 61
     1dc:	de b7       	in	r29, 0x3e	; 62
	// CPU automatically calls when TCNT0 == OCR0 (every 1 ms per TimerOn settings)
	_avr_timer_cntcurr--; 			// Count down to 0 rather than up to TOP
     1de:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <_avr_timer_cntcurr>
     1e2:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <_avr_timer_cntcurr+0x1>
     1e6:	a0 91 c5 01 	lds	r26, 0x01C5	; 0x8001c5 <_avr_timer_cntcurr+0x2>
     1ea:	b0 91 c6 01 	lds	r27, 0x01C6	; 0x8001c6 <_avr_timer_cntcurr+0x3>
     1ee:	01 97       	sbiw	r24, 0x01	; 1
     1f0:	a1 09       	sbc	r26, r1
     1f2:	b1 09       	sbc	r27, r1
     1f4:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <_avr_timer_cntcurr>
     1f8:	90 93 c4 01 	sts	0x01C4, r25	; 0x8001c4 <_avr_timer_cntcurr+0x1>
     1fc:	a0 93 c5 01 	sts	0x01C5, r26	; 0x8001c5 <_avr_timer_cntcurr+0x2>
     200:	b0 93 c6 01 	sts	0x01C6, r27	; 0x8001c6 <_avr_timer_cntcurr+0x3>
	if (_avr_timer_cntcurr == 0) { 	// results in a more efficient compare
     204:	80 91 c3 01 	lds	r24, 0x01C3	; 0x8001c3 <_avr_timer_cntcurr>
     208:	90 91 c4 01 	lds	r25, 0x01C4	; 0x8001c4 <_avr_timer_cntcurr+0x1>
     20c:	a0 91 c5 01 	lds	r26, 0x01C5	; 0x8001c5 <_avr_timer_cntcurr+0x2>
     210:	b0 91 c6 01 	lds	r27, 0x01C6	; 0x8001c6 <_avr_timer_cntcurr+0x3>
     214:	89 2b       	or	r24, r25
     216:	8a 2b       	or	r24, r26
     218:	8b 2b       	or	r24, r27
     21a:	89 f4       	brne	.+34     	; 0x23e <__vector_13+0x92>
		TimerISR(); 				// Call the ISR that the user uses
     21c:	bc df       	rcall	.-136    	; 0x196 <TimerISR>
		_avr_timer_cntcurr = _avr_timer_M;
     21e:	80 91 00 01 	lds	r24, 0x0100	; 0x800100 <__data_start>
     222:	90 91 01 01 	lds	r25, 0x0101	; 0x800101 <__data_start+0x1>
     226:	a0 91 02 01 	lds	r26, 0x0102	; 0x800102 <__data_start+0x2>
     22a:	b0 91 03 01 	lds	r27, 0x0103	; 0x800103 <__data_start+0x3>
     22e:	80 93 c3 01 	sts	0x01C3, r24	; 0x8001c3 <_avr_timer_cntcurr>
     232:	90 93 c4 01 	sts	0x01C4, r25	; 0x8001c4 <_avr_timer_cntcurr+0x1>
     236:	a0 93 c5 01 	sts	0x01C5, r26	; 0x8001c5 <_avr_timer_cntcurr+0x2>
     23a:	b0 93 c6 01 	sts	0x01C6, r27	; 0x8001c6 <_avr_timer_cntcurr+0x3>
	}
}
     23e:	00 00       	nop
     240:	df 91       	pop	r29
     242:	cf 91       	pop	r28
     244:	ff 91       	pop	r31
     246:	ef 91       	pop	r30
     248:	bf 91       	pop	r27
     24a:	af 91       	pop	r26
     24c:	9f 91       	pop	r25
     24e:	8f 91       	pop	r24
     250:	7f 91       	pop	r23
     252:	6f 91       	pop	r22
     254:	5f 91       	pop	r21
     256:	4f 91       	pop	r20
     258:	3f 91       	pop	r19
     25a:	2f 91       	pop	r18
     25c:	0f 90       	pop	r0
     25e:	00 92 5b 00 	sts	0x005B, r0	; 0x80005b <__TEXT_REGION_LENGTH__+0x7e005b>
     262:	0f 90       	pop	r0
     264:	00 92 5f 00 	sts	0x005F, r0	; 0x80005f <__TEXT_REGION_LENGTH__+0x7e005f>
     268:	0f 90       	pop	r0
     26a:	1f 90       	pop	r1
     26c:	18 95       	reti

0000026e <LCD_ClearScreen>:
#define RS 0			// pin number of uC connected to pin 4 of LCD disp.
#define E 1			// pin number of uC connected to pin 6 of LCD disp.

/*-------------------------------------------------------------------------*/

void LCD_ClearScreen(void) {
     26e:	cf 93       	push	r28
     270:	df 93       	push	r29
     272:	cd b7       	in	r28, 0x3d	; 61
     274:	de b7       	in	r29, 0x3e	; 62
   LCD_WriteCommand(0x01);
     276:	81 e0       	ldi	r24, 0x01	; 1
     278:	1a d0       	rcall	.+52     	; 0x2ae <LCD_WriteCommand>
}
     27a:	00 00       	nop
     27c:	df 91       	pop	r29
     27e:	cf 91       	pop	r28
     280:	08 95       	ret

00000282 <LCD_init>:

void LCD_init(void) {
     282:	cf 93       	push	r28
     284:	df 93       	push	r29
     286:	cd b7       	in	r28, 0x3d	; 61
     288:	de b7       	in	r29, 0x3e	; 62

    //wait for 100 ms.
	delay_ms(100);
     28a:	84 e6       	ldi	r24, 0x64	; 100
     28c:	90 e0       	ldi	r25, 0x00	; 0
     28e:	ac d0       	rcall	.+344    	; 0x3e8 <delay_ms>
	LCD_WriteCommand(0x38);
     290:	88 e3       	ldi	r24, 0x38	; 56
     292:	0d d0       	rcall	.+26     	; 0x2ae <LCD_WriteCommand>
	LCD_WriteCommand(0x06);
     294:	86 e0       	ldi	r24, 0x06	; 6
     296:	0b d0       	rcall	.+22     	; 0x2ae <LCD_WriteCommand>
	LCD_WriteCommand(0x0f);
     298:	8f e0       	ldi	r24, 0x0F	; 15
     29a:	09 d0       	rcall	.+18     	; 0x2ae <LCD_WriteCommand>
	LCD_WriteCommand(0x01);
     29c:	81 e0       	ldi	r24, 0x01	; 1
     29e:	07 d0       	rcall	.+14     	; 0x2ae <LCD_WriteCommand>
	delay_ms(10);						 
     2a0:	8a e0       	ldi	r24, 0x0A	; 10
     2a2:	90 e0       	ldi	r25, 0x00	; 0
     2a4:	a1 d0       	rcall	.+322    	; 0x3e8 <delay_ms>
     2a6:	00 00       	nop
}
     2a8:	df 91       	pop	r29
     2aa:	cf 91       	pop	r28
     2ac:	08 95       	ret

000002ae <LCD_WriteCommand>:
     2ae:	cf 93       	push	r28

void LCD_WriteCommand (unsigned char Command) {
     2b0:	df 93       	push	r29
     2b2:	1f 92       	push	r1
     2b4:	cd b7       	in	r28, 0x3d	; 61
     2b6:	de b7       	in	r29, 0x3e	; 62
     2b8:	89 83       	std	Y+1, r24	; 0x01
   CLR_BIT(CONTROL_BUS,RS);
     2ba:	85 e2       	ldi	r24, 0x25	; 37
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	25 e2       	ldi	r18, 0x25	; 37
     2c0:	30 e0       	ldi	r19, 0x00	; 0
     2c2:	f9 01       	movw	r30, r18
     2c4:	20 81       	ld	r18, Z
     2c6:	2e 7f       	andi	r18, 0xFE	; 254
     2c8:	fc 01       	movw	r30, r24
     2ca:	20 83       	st	Z, r18
   DATA_BUS = Command;
     2cc:	8b e2       	ldi	r24, 0x2B	; 43
     2ce:	90 e0       	ldi	r25, 0x00	; 0
     2d0:	29 81       	ldd	r18, Y+1	; 0x01
     2d2:	fc 01       	movw	r30, r24
     2d4:	20 83       	st	Z, r18
   SET_BIT(CONTROL_BUS,E);
     2d6:	85 e2       	ldi	r24, 0x25	; 37
     2d8:	90 e0       	ldi	r25, 0x00	; 0
     2da:	25 e2       	ldi	r18, 0x25	; 37
     2dc:	30 e0       	ldi	r19, 0x00	; 0
     2de:	f9 01       	movw	r30, r18
     2e0:	20 81       	ld	r18, Z
     2e2:	22 60       	ori	r18, 0x02	; 2
     2e4:	fc 01       	movw	r30, r24
     2e6:	20 83       	st	Z, r18
   asm("nop");
     2e8:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
     2ea:	85 e2       	ldi	r24, 0x25	; 37
     2ec:	90 e0       	ldi	r25, 0x00	; 0
     2ee:	25 e2       	ldi	r18, 0x25	; 37
     2f0:	30 e0       	ldi	r19, 0x00	; 0
     2f2:	f9 01       	movw	r30, r18
     2f4:	20 81       	ld	r18, Z
     2f6:	2d 7f       	andi	r18, 0xFD	; 253
     2f8:	fc 01       	movw	r30, r24
     2fa:	20 83       	st	Z, r18
   delay_ms(2); // ClearScreen requires 1.52ms to execute
     2fc:	82 e0       	ldi	r24, 0x02	; 2
     2fe:	90 e0       	ldi	r25, 0x00	; 0
     300:	73 d0       	rcall	.+230    	; 0x3e8 <delay_ms>
}
     302:	00 00       	nop
     304:	0f 90       	pop	r0
     306:	df 91       	pop	r29
     308:	cf 91       	pop	r28
     30a:	08 95       	ret

0000030c <LCD_WriteData>:

void LCD_WriteData(unsigned char Data) {
     30c:	cf 93       	push	r28
     30e:	df 93       	push	r29
     310:	1f 92       	push	r1
     312:	cd b7       	in	r28, 0x3d	; 61
     314:	de b7       	in	r29, 0x3e	; 62
     316:	89 83       	std	Y+1, r24	; 0x01
   SET_BIT(CONTROL_BUS,RS);
     318:	85 e2       	ldi	r24, 0x25	; 37
     31a:	90 e0       	ldi	r25, 0x00	; 0
     31c:	25 e2       	ldi	r18, 0x25	; 37
     31e:	30 e0       	ldi	r19, 0x00	; 0
     320:	f9 01       	movw	r30, r18
     322:	20 81       	ld	r18, Z
     324:	21 60       	ori	r18, 0x01	; 1
     326:	fc 01       	movw	r30, r24
     328:	20 83       	st	Z, r18
   DATA_BUS = Data;
     32a:	8b e2       	ldi	r24, 0x2B	; 43
     32c:	90 e0       	ldi	r25, 0x00	; 0
     32e:	29 81       	ldd	r18, Y+1	; 0x01
     330:	fc 01       	movw	r30, r24
     332:	20 83       	st	Z, r18
   SET_BIT(CONTROL_BUS,E);
     334:	85 e2       	ldi	r24, 0x25	; 37
     336:	90 e0       	ldi	r25, 0x00	; 0
     338:	25 e2       	ldi	r18, 0x25	; 37
     33a:	30 e0       	ldi	r19, 0x00	; 0
     33c:	f9 01       	movw	r30, r18
     33e:	20 81       	ld	r18, Z
     340:	22 60       	ori	r18, 0x02	; 2
     342:	fc 01       	movw	r30, r24
     344:	20 83       	st	Z, r18
   asm("nop");
     346:	00 00       	nop
   CLR_BIT(CONTROL_BUS,E);
     348:	85 e2       	ldi	r24, 0x25	; 37
     34a:	90 e0       	ldi	r25, 0x00	; 0
     34c:	25 e2       	ldi	r18, 0x25	; 37
     34e:	30 e0       	ldi	r19, 0x00	; 0
     350:	f9 01       	movw	r30, r18
     352:	20 81       	ld	r18, Z
     354:	2d 7f       	andi	r18, 0xFD	; 253
     356:	fc 01       	movw	r30, r24
     358:	20 83       	st	Z, r18
   delay_ms(1);
     35a:	81 e0       	ldi	r24, 0x01	; 1
     35c:	90 e0       	ldi	r25, 0x00	; 0
     35e:	44 d0       	rcall	.+136    	; 0x3e8 <delay_ms>
}
     360:	00 00       	nop
     362:	0f 90       	pop	r0
     364:	df 91       	pop	r29
     366:	cf 91       	pop	r28
     368:	08 95       	ret

0000036a <LCD_DisplayString>:

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
     36a:	cf 93       	push	r28
     36c:	df 93       	push	r29
     36e:	00 d0       	rcall	.+0      	; 0x370 <LCD_DisplayString+0x6>
     370:	00 d0       	rcall	.+0      	; 0x372 <LCD_DisplayString+0x8>
     372:	cd b7       	in	r28, 0x3d	; 61
     374:	de b7       	in	r29, 0x3e	; 62
     376:	8a 83       	std	Y+2, r24	; 0x02
     378:	7c 83       	std	Y+4, r23	; 0x04
     37a:	6b 83       	std	Y+3, r22	; 0x03
   LCD_ClearScreen();
     37c:	78 df       	rcall	.-272    	; 0x26e <LCD_ClearScreen>
   unsigned char c = column;
     37e:	8a 81       	ldd	r24, Y+2	; 0x02
     380:	89 83       	std	Y+1, r24	; 0x01
   while(*string) {
     382:	0f c0       	rjmp	.+30     	; 0x3a2 <LCD_DisplayString+0x38>
      LCD_Cursor(c++);
     384:	89 81       	ldd	r24, Y+1	; 0x01
     386:	91 e0       	ldi	r25, 0x01	; 1
     388:	98 0f       	add	r25, r24
     38a:	99 83       	std	Y+1, r25	; 0x01
     38c:	18 d0       	rcall	.+48     	; 0x3be <LCD_Cursor>
      LCD_WriteData(*string++);
     38e:	8b 81       	ldd	r24, Y+3	; 0x03
     390:	9c 81       	ldd	r25, Y+4	; 0x04
     392:	9c 01       	movw	r18, r24
     394:	2f 5f       	subi	r18, 0xFF	; 255
     396:	3f 4f       	sbci	r19, 0xFF	; 255
     398:	3c 83       	std	Y+4, r19	; 0x04
     39a:	2b 83       	std	Y+3, r18	; 0x03
     39c:	fc 01       	movw	r30, r24
     39e:	80 81       	ld	r24, Z
     3a0:	b5 df       	rcall	.-150    	; 0x30c <LCD_WriteData>
}

void LCD_DisplayString( unsigned char column, const unsigned char* string) {
   LCD_ClearScreen();
   unsigned char c = column;
   while(*string) {
     3a2:	8b 81       	ldd	r24, Y+3	; 0x03
     3a4:	9c 81       	ldd	r25, Y+4	; 0x04
     3a6:	fc 01       	movw	r30, r24
     3a8:	80 81       	ld	r24, Z
     3aa:	88 23       	and	r24, r24
     3ac:	59 f7       	brne	.-42     	; 0x384 <LCD_DisplayString+0x1a>
      LCD_Cursor(c++);
      LCD_WriteData(*string++);
   }
}
     3ae:	00 00       	nop
     3b0:	0f 90       	pop	r0
     3b2:	0f 90       	pop	r0
     3b4:	0f 90       	pop	r0
     3b6:	0f 90       	pop	r0
     3b8:	df 91       	pop	r29
     3ba:	cf 91       	pop	r28
     3bc:	08 95       	ret

000003be <LCD_Cursor>:

void LCD_Cursor(unsigned char column) {
     3be:	cf 93       	push	r28
     3c0:	df 93       	push	r29
     3c2:	1f 92       	push	r1
     3c4:	cd b7       	in	r28, 0x3d	; 61
     3c6:	de b7       	in	r29, 0x3e	; 62
     3c8:	89 83       	std	Y+1, r24	; 0x01
   if ( column < 17 ) { // 16x1 LCD: column < 9
     3ca:	89 81       	ldd	r24, Y+1	; 0x01
     3cc:	81 31       	cpi	r24, 0x11	; 17
     3ce:	20 f4       	brcc	.+8      	; 0x3d8 <LCD_Cursor+0x1a>
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
     3d0:	89 81       	ldd	r24, Y+1	; 0x01
     3d2:	81 58       	subi	r24, 0x81	; 129
     3d4:	6c df       	rcall	.-296    	; 0x2ae <LCD_WriteCommand>
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
											// 16x2 LCD: column - 9
   }
}
     3d6:	03 c0       	rjmp	.+6      	; 0x3de <LCD_Cursor+0x20>
void LCD_Cursor(unsigned char column) {
   if ( column < 17 ) { // 16x1 LCD: column < 9
						// 16x2 LCD: column < 17
      LCD_WriteCommand(0x80 + column - 1);
   } else {
      LCD_WriteCommand(0xB8 + column - 9);	// 16x1 LCD: column - 1
     3d8:	89 81       	ldd	r24, Y+1	; 0x01
     3da:	81 55       	subi	r24, 0x51	; 81
     3dc:	68 df       	rcall	.-304    	; 0x2ae <LCD_WriteCommand>
											// 16x2 LCD: column - 9
   }
}
     3de:	00 00       	nop
     3e0:	0f 90       	pop	r0
     3e2:	df 91       	pop	r29
     3e4:	cf 91       	pop	r28
     3e6:	08 95       	ret

000003e8 <delay_ms>:

void delay_ms(int miliSec) //for 8 Mhz crystal

{
     3e8:	cf 93       	push	r28
     3ea:	df 93       	push	r29
     3ec:	00 d0       	rcall	.+0      	; 0x3ee <delay_ms+0x6>
     3ee:	00 d0       	rcall	.+0      	; 0x3f0 <delay_ms+0x8>
     3f0:	00 d0       	rcall	.+0      	; 0x3f2 <delay_ms+0xa>
     3f2:	cd b7       	in	r28, 0x3d	; 61
     3f4:	de b7       	in	r29, 0x3e	; 62
     3f6:	9e 83       	std	Y+6, r25	; 0x06
     3f8:	8d 83       	std	Y+5, r24	; 0x05
    int i,j;
    for(i=0;i<miliSec;i++)
     3fa:	1a 82       	std	Y+2, r1	; 0x02
     3fc:	19 82       	std	Y+1, r1	; 0x01
     3fe:	13 c0       	rjmp	.+38     	; 0x426 <__LOCK_REGION_LENGTH__+0x26>
    for(j=0;j<775;j++)
     400:	1c 82       	std	Y+4, r1	; 0x04
     402:	1b 82       	std	Y+3, r1	; 0x03
     404:	06 c0       	rjmp	.+12     	; 0x412 <__LOCK_REGION_LENGTH__+0x12>
  {
   asm("nop");
     406:	00 00       	nop
void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
    for(j=0;j<775;j++)
     408:	8b 81       	ldd	r24, Y+3	; 0x03
     40a:	9c 81       	ldd	r25, Y+4	; 0x04
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	9c 83       	std	Y+4, r25	; 0x04
     410:	8b 83       	std	Y+3, r24	; 0x03
     412:	8b 81       	ldd	r24, Y+3	; 0x03
     414:	9c 81       	ldd	r25, Y+4	; 0x04
     416:	87 30       	cpi	r24, 0x07	; 7
     418:	93 40       	sbci	r25, 0x03	; 3
     41a:	ac f3       	brlt	.-22     	; 0x406 <__LOCK_REGION_LENGTH__+0x6>

void delay_ms(int miliSec) //for 8 Mhz crystal

{
    int i,j;
    for(i=0;i<miliSec;i++)
     41c:	89 81       	ldd	r24, Y+1	; 0x01
     41e:	9a 81       	ldd	r25, Y+2	; 0x02
     420:	01 96       	adiw	r24, 0x01	; 1
     422:	9a 83       	std	Y+2, r25	; 0x02
     424:	89 83       	std	Y+1, r24	; 0x01
     426:	29 81       	ldd	r18, Y+1	; 0x01
     428:	3a 81       	ldd	r19, Y+2	; 0x02
     42a:	8d 81       	ldd	r24, Y+5	; 0x05
     42c:	9e 81       	ldd	r25, Y+6	; 0x06
     42e:	28 17       	cp	r18, r24
     430:	39 07       	cpc	r19, r25
     432:	34 f3       	brlt	.-52     	; 0x400 <__LOCK_REGION_LENGTH__>
    for(j=0;j<775;j++)
  {
   asm("nop");
  }
}
     434:	00 00       	nop
     436:	26 96       	adiw	r28, 0x06	; 6
     438:	0f b6       	in	r0, 0x3f	; 63
     43a:	f8 94       	cli
     43c:	de bf       	out	0x3e, r29	; 62
     43e:	0f be       	out	0x3f, r0	; 63
     440:	cd bf       	out	0x3d, r28	; 61
     442:	df 91       	pop	r29
     444:	cf 91       	pop	r28
     446:	08 95       	ret

00000448 <init_IO>:

uint16_t WordOfData = 0x00;

unsigned char tempA, tempB, tempC;

void init_IO(void){
     448:	cf 93       	push	r28
     44a:	df 93       	push	r29
     44c:	cd b7       	in	r28, 0x3d	; 61
     44e:	de b7       	in	r29, 0x3e	; 62
	//Setup IO
	SHIFT_REGISTER |= (DATA | LATCH | CLOCK);	//Set control pins as outputs
     450:	84 e2       	ldi	r24, 0x24	; 36
     452:	90 e0       	ldi	r25, 0x00	; 0
     454:	24 e2       	ldi	r18, 0x24	; 36
     456:	30 e0       	ldi	r19, 0x00	; 0
     458:	f9 01       	movw	r30, r18
     45a:	20 81       	ld	r18, Z
     45c:	20 6b       	ori	r18, 0xB0	; 176
     45e:	fc 01       	movw	r30, r24
     460:	20 83       	st	Z, r18
	SHIFT_PORT &= ~(DATA | LATCH | CLOCK);		//Set control pins low
     462:	85 e2       	ldi	r24, 0x25	; 37
     464:	90 e0       	ldi	r25, 0x00	; 0
     466:	25 e2       	ldi	r18, 0x25	; 37
     468:	30 e0       	ldi	r19, 0x00	; 0
     46a:	f9 01       	movw	r30, r18
     46c:	20 81       	ld	r18, Z
     46e:	2f 74       	andi	r18, 0x4F	; 79
     470:	fc 01       	movw	r30, r24
     472:	20 83       	st	Z, r18
}
     474:	00 00       	nop
     476:	df 91       	pop	r29
     478:	cf 91       	pop	r28
     47a:	08 95       	ret

0000047c <init_SPI>:

void init_SPI(void){
     47c:	cf 93       	push	r28
     47e:	df 93       	push	r29
     480:	cd b7       	in	r28, 0x3d	; 61
     482:	de b7       	in	r29, 0x3e	; 62
	//Setup SPI
	SPCR = (1<<SPE) | (1<<MSTR);	//Start SPI as Master
     484:	8c e4       	ldi	r24, 0x4C	; 76
     486:	90 e0       	ldi	r25, 0x00	; 0
     488:	20 e5       	ldi	r18, 0x50	; 80
     48a:	fc 01       	movw	r30, r24
     48c:	20 83       	st	Z, r18
}
     48e:	00 00       	nop
     490:	df 91       	pop	r29
     492:	cf 91       	pop	r28
     494:	08 95       	ret

00000496 <spi_send>:

void spi_send(unsigned char byte){
     496:	cf 93       	push	r28
     498:	df 93       	push	r29
     49a:	1f 92       	push	r1
     49c:	cd b7       	in	r28, 0x3d	; 61
     49e:	de b7       	in	r29, 0x3e	; 62
     4a0:	89 83       	std	Y+1, r24	; 0x01
	SPDR = byte;			//Shift in some data
     4a2:	8e e4       	ldi	r24, 0x4E	; 78
     4a4:	90 e0       	ldi	r25, 0x00	; 0
     4a6:	29 81       	ldd	r18, Y+1	; 0x01
     4a8:	fc 01       	movw	r30, r24
     4aa:	20 83       	st	Z, r18
	while(!(SPSR & (1<<SPIF)));	//Wait for SPI process to finish
     4ac:	00 00       	nop
     4ae:	8d e4       	ldi	r24, 0x4D	; 77
     4b0:	90 e0       	ldi	r25, 0x00	; 0
     4b2:	fc 01       	movw	r30, r24
     4b4:	80 81       	ld	r24, Z
     4b6:	88 23       	and	r24, r24
     4b8:	d4 f7       	brge	.-12     	; 0x4ae <spi_send+0x18>
}
     4ba:	00 00       	nop
     4bc:	0f 90       	pop	r0
     4be:	df 91       	pop	r29
     4c0:	cf 91       	pop	r28
     4c2:	08 95       	ret

000004c4 <Light_Tick>:

int Light_Tick(int state) {
     4c4:	cf 93       	push	r28
     4c6:	df 93       	push	r29
     4c8:	00 d0       	rcall	.+0      	; 0x4ca <Light_Tick+0x6>
     4ca:	cd b7       	in	r28, 0x3d	; 61
     4cc:	de b7       	in	r29, 0x3e	; 62
     4ce:	9a 83       	std	Y+2, r25	; 0x02
     4d0:	89 83       	std	Y+1, r24	; 0x01
	spi_send(row); // Row(s) to display
     4d2:	80 91 c8 01 	lds	r24, 0x01C8	; 0x8001c8 <row>
     4d6:	df df       	rcall	.-66     	; 0x496 <spi_send>
	spi_send(pattern); // Pattern displaying pattern
     4d8:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <pattern>
     4dc:	dc df       	rcall	.-72     	; 0x496 <spi_send>
	
	//Toggle latch to copy data to the storage register
	SHIFT_PORT |= LATCH;
     4de:	85 e2       	ldi	r24, 0x25	; 37
     4e0:	90 e0       	ldi	r25, 0x00	; 0
     4e2:	25 e2       	ldi	r18, 0x25	; 37
     4e4:	30 e0       	ldi	r19, 0x00	; 0
     4e6:	f9 01       	movw	r30, r18
     4e8:	20 81       	ld	r18, Z
     4ea:	20 61       	ori	r18, 0x10	; 16
     4ec:	fc 01       	movw	r30, r24
     4ee:	20 83       	st	Z, r18
	SHIFT_PORT &= ~LATCH;
     4f0:	85 e2       	ldi	r24, 0x25	; 37
     4f2:	90 e0       	ldi	r25, 0x00	; 0
     4f4:	25 e2       	ldi	r18, 0x25	; 37
     4f6:	30 e0       	ldi	r19, 0x00	; 0
     4f8:	f9 01       	movw	r30, r18
     4fa:	20 81       	ld	r18, Z
     4fc:	2f 7e       	andi	r18, 0xEF	; 239
     4fe:	fc 01       	movw	r30, r24
     500:	20 83       	st	Z, r18
	return state;
     502:	89 81       	ldd	r24, Y+1	; 0x01
     504:	9a 81       	ldd	r25, Y+2	; 0x02
}
     506:	0f 90       	pop	r0
     508:	0f 90       	pop	r0
     50a:	df 91       	pop	r29
     50c:	cf 91       	pop	r28
     50e:	08 95       	ret

00000510 <Clear_Matrix>:

int Clear_Matrix(int state) {
     510:	cf 93       	push	r28
     512:	df 93       	push	r29
     514:	00 d0       	rcall	.+0      	; 0x516 <Clear_Matrix+0x6>
     516:	cd b7       	in	r28, 0x3d	; 61
     518:	de b7       	in	r29, 0x3e	; 62
     51a:	9a 83       	std	Y+2, r25	; 0x02
     51c:	89 83       	std	Y+1, r24	; 0x01
	spi_send(0); // Row(s) to display
     51e:	80 e0       	ldi	r24, 0x00	; 0
     520:	ba df       	rcall	.-140    	; 0x496 <spi_send>
	spi_send(0); // Pattern displaying pattern
     522:	80 e0       	ldi	r24, 0x00	; 0
     524:	b8 df       	rcall	.-144    	; 0x496 <spi_send>
	
	//Toggle latch to copy data to the storage register
	SHIFT_PORT |= LATCH;
     526:	85 e2       	ldi	r24, 0x25	; 37
     528:	90 e0       	ldi	r25, 0x00	; 0
     52a:	25 e2       	ldi	r18, 0x25	; 37
     52c:	30 e0       	ldi	r19, 0x00	; 0
     52e:	f9 01       	movw	r30, r18
     530:	20 81       	ld	r18, Z
     532:	20 61       	ori	r18, 0x10	; 16
     534:	fc 01       	movw	r30, r24
     536:	20 83       	st	Z, r18
	SHIFT_PORT &= ~LATCH;
     538:	85 e2       	ldi	r24, 0x25	; 37
     53a:	90 e0       	ldi	r25, 0x00	; 0
     53c:	25 e2       	ldi	r18, 0x25	; 37
     53e:	30 e0       	ldi	r19, 0x00	; 0
     540:	f9 01       	movw	r30, r18
     542:	20 81       	ld	r18, Z
     544:	2f 7e       	andi	r18, 0xEF	; 239
     546:	fc 01       	movw	r30, r24
     548:	20 83       	st	Z, r18
	return state;
     54a:	89 81       	ldd	r24, Y+1	; 0x01
     54c:	9a 81       	ldd	r25, Y+2	; 0x02
}
     54e:	0f 90       	pop	r0
     550:	0f 90       	pop	r0
     552:	df 91       	pop	r29
     554:	cf 91       	pop	r28
     556:	08 95       	ret

00000558 <Tick_First>:

void Tick_First(){
     558:	cf 93       	push	r28
     55a:	df 93       	push	r29
     55c:	cd b7       	in	r28, 0x3d	; 61
     55e:	de b7       	in	r29, 0x3e	; 62
	// Transitions
	switch (current) {
     560:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <current>
     564:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <current+0x1>
     568:	82 30       	cpi	r24, 0x02	; 2
     56a:	91 05       	cpc	r25, r1
     56c:	51 f0       	breq	.+20     	; 0x582 <Tick_First+0x2a>
     56e:	83 30       	cpi	r24, 0x03	; 3
     570:	91 05       	cpc	r25, r1
     572:	49 f0       	breq	.+18     	; 0x586 <Tick_First+0x2e>
     574:	89 2b       	or	r24, r25
     576:	49 f0       	breq	.+18     	; 0x58a <Tick_First+0x32>
		case checkPressed:
		break;
		case updateLEDs:
		break;
		default:
		current = shift;
     578:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <current+0x1>
     57c:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <current>
		break;
     580:	05 c0       	rjmp	.+10     	; 0x58c <Tick_First+0x34>
	// Transitions
	switch (current) {
		case shift:
		break;
		case checkPressed:
		break;
     582:	00 00       	nop
     584:	03 c0       	rjmp	.+6      	; 0x58c <Tick_First+0x34>
		case updateLEDs:
		break;
     586:	00 00       	nop
     588:	01 c0       	rjmp	.+2      	; 0x58c <Tick_First+0x34>

void Tick_First(){
	// Transitions
	switch (current) {
		case shift:
		break;
     58a:	00 00       	nop
		current = shift;
		break;

	}
	// Actions
	switch (current) {
     58c:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <current>
     590:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <current+0x1>
     594:	89 2b       	or	r24, r25
     596:	09 f0       	breq	.+2      	; 0x59a <Tick_First+0x42>
				}
			}
			Light_Tick(current);
		break;
		default:
		break;
     598:	54 c0       	rjmp	.+168    	; 0x642 <Tick_First+0xea>

	}
	// Actions
	switch (current) {
		case shift:
			pattern = pattern1;
     59a:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <pattern1>
     59e:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <pattern>
			row = row1;
     5a2:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <row1>
     5a6:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <row>
			if(counter >= slowness){
     5aa:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <counter>
     5ae:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <counter+0x1>
     5b2:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <slowness>
     5b6:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <slowness+0x1>
     5ba:	28 17       	cp	r18, r24
     5bc:	39 07       	cpc	r19, r25
     5be:	50 f1       	brcs	.+84     	; 0x614 <Tick_First+0xbc>
				if(pattern == 0 || did1 == 1){
     5c0:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <pattern>
     5c4:	88 23       	and	r24, r24
     5c6:	21 f0       	breq	.+8      	; 0x5d0 <Tick_First+0x78>
     5c8:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <did1>
     5cc:	81 30       	cpi	r24, 0x01	; 1
     5ce:	41 f4       	brne	.+16     	; 0x5e0 <Tick_First+0x88>
					pattern = pattern | 0x01;
     5d0:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <pattern>
     5d4:	81 60       	ori	r24, 0x01	; 1
     5d6:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <pattern>
					did1 = 0;
     5da:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <did1>
     5de:	05 c0       	rjmp	.+10     	; 0x5ea <Tick_First+0x92>
				}
				else{
					pattern <<= 1;
     5e0:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <pattern>
     5e4:	88 0f       	add	r24, r24
     5e6:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <pattern>
				}
				pattern1 = pattern;
     5ea:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <pattern>
     5ee:	80 93 c9 01 	sts	0x01C9, r24	; 0x8001c9 <pattern1>
				if((pattern1 & 0x80) == 0x80){
     5f2:	80 91 c9 01 	lds	r24, 0x01C9	; 0x8001c9 <pattern1>
     5f6:	88 23       	and	r24, r24
     5f8:	6c f4       	brge	.+26     	; 0x614 <Tick_First+0xbc>
					if((~PINA & 0x20) == 0x20){
     5fa:	80 e2       	ldi	r24, 0x20	; 32
     5fc:	90 e0       	ldi	r25, 0x00	; 0
     5fe:	fc 01       	movw	r30, r24
     600:	80 81       	ld	r24, Z
     602:	88 2f       	mov	r24, r24
     604:	90 e0       	ldi	r25, 0x00	; 0
     606:	80 72       	andi	r24, 0x20	; 32
     608:	99 27       	eor	r25, r25
     60a:	89 2b       	or	r24, r25
     60c:	19 f4       	brne	.+6      	; 0x614 <Tick_First+0xbc>
						firstPlayerPressed1 = 1;
     60e:	81 e0       	ldi	r24, 0x01	; 1
     610:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <firstPlayerPressed1>
					}
				}
			}
			if((pattern & 0x80) == 0x80){
     614:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <pattern>
     618:	88 23       	and	r24, r24
     61a:	6c f4       	brge	.+26     	; 0x636 <Tick_First+0xde>
				if((~PINA & 0x20) == 0x20){
     61c:	80 e2       	ldi	r24, 0x20	; 32
     61e:	90 e0       	ldi	r25, 0x00	; 0
     620:	fc 01       	movw	r30, r24
     622:	80 81       	ld	r24, Z
     624:	88 2f       	mov	r24, r24
     626:	90 e0       	ldi	r25, 0x00	; 0
     628:	80 72       	andi	r24, 0x20	; 32
     62a:	99 27       	eor	r25, r25
     62c:	89 2b       	or	r24, r25
     62e:	19 f4       	brne	.+6      	; 0x636 <Tick_First+0xde>
					firstPlayerPressed1 = 1;
     630:	81 e0       	ldi	r24, 0x01	; 1
     632:	80 93 e0 01 	sts	0x01E0, r24	; 0x8001e0 <firstPlayerPressed1>
				}
			}
			Light_Tick(current);
     636:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <current>
     63a:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <current+0x1>
     63e:	42 df       	rcall	.-380    	; 0x4c4 <Light_Tick>
		break;
     640:	00 00       	nop
		default:
		break;
	}
}
     642:	00 00       	nop
     644:	df 91       	pop	r29
     646:	cf 91       	pop	r28
     648:	08 95       	ret

0000064a <Tick_Second>:
void Tick_Second(){
     64a:	cf 93       	push	r28
     64c:	df 93       	push	r29
     64e:	cd b7       	in	r28, 0x3d	; 61
     650:	de b7       	in	r29, 0x3e	; 62
	// Transitions
	switch (current) {
     652:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <current>
     656:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <current+0x1>
     65a:	89 2b       	or	r24, r25
     65c:	29 f0       	breq	.+10     	; 0x668 <Tick_Second+0x1e>
		case shift:
		break;
		default:
		current = shift;
     65e:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <current+0x1>
     662:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <current>
		break;
     666:	01 c0       	rjmp	.+2      	; 0x66a <Tick_Second+0x20>
}
void Tick_Second(){
	// Transitions
	switch (current) {
		case shift:
		break;
     668:	00 00       	nop
		current = shift;
		break;

	}
	// Actions
	switch (current) {
     66a:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <current>
     66e:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <current+0x1>
     672:	89 2b       	or	r24, r25
     674:	09 f0       	breq	.+2      	; 0x678 <Tick_Second+0x2e>
			}
		}
		Light_Tick(current);
		break;
		default:
		break;
     676:	54 c0       	rjmp	.+168    	; 0x720 <Tick_Second+0xd6>

	}
	// Actions
	switch (current) {
		case shift:
		pattern = pattern2;
     678:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <pattern2>
     67c:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <pattern>
		row = row2;
     680:	80 91 05 01 	lds	r24, 0x0105	; 0x800105 <row2>
     684:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <row>
		if(counter >= slowness){
     688:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <counter>
     68c:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <counter+0x1>
     690:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <slowness>
     694:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <slowness+0x1>
     698:	28 17       	cp	r18, r24
     69a:	39 07       	cpc	r19, r25
     69c:	50 f1       	brcs	.+84     	; 0x6f2 <Tick_Second+0xa8>
			if(pattern == 0 || did2 == 1){
     69e:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <pattern>
     6a2:	88 23       	and	r24, r24
     6a4:	21 f0       	breq	.+8      	; 0x6ae <Tick_Second+0x64>
     6a6:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <did2>
     6aa:	81 30       	cpi	r24, 0x01	; 1
     6ac:	41 f4       	brne	.+16     	; 0x6be <Tick_Second+0x74>
				pattern = pattern | 0x01;
     6ae:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <pattern>
     6b2:	81 60       	ori	r24, 0x01	; 1
     6b4:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <pattern>
				did2 = 0;
     6b8:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <did2>
     6bc:	05 c0       	rjmp	.+10     	; 0x6c8 <Tick_Second+0x7e>
			}
			else{
				pattern <<= 1;
     6be:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <pattern>
     6c2:	88 0f       	add	r24, r24
     6c4:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <pattern>
			}
			pattern2 = pattern;
     6c8:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <pattern>
     6cc:	80 93 ca 01 	sts	0x01CA, r24	; 0x8001ca <pattern2>
			if((pattern2 & 0x80) == 0x80){
     6d0:	80 91 ca 01 	lds	r24, 0x01CA	; 0x8001ca <pattern2>
     6d4:	88 23       	and	r24, r24
     6d6:	6c f4       	brge	.+26     	; 0x6f2 <Tick_Second+0xa8>
				if((~PINA & 0x40) == 0x40){
     6d8:	80 e2       	ldi	r24, 0x20	; 32
     6da:	90 e0       	ldi	r25, 0x00	; 0
     6dc:	fc 01       	movw	r30, r24
     6de:	80 81       	ld	r24, Z
     6e0:	88 2f       	mov	r24, r24
     6e2:	90 e0       	ldi	r25, 0x00	; 0
     6e4:	80 74       	andi	r24, 0x40	; 64
     6e6:	99 27       	eor	r25, r25
     6e8:	89 2b       	or	r24, r25
     6ea:	19 f4       	brne	.+6      	; 0x6f2 <Tick_Second+0xa8>
					firstPlayerPressed2 = 1;
     6ec:	81 e0       	ldi	r24, 0x01	; 1
     6ee:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <firstPlayerPressed2>
				}
			}
		}
		if((pattern & 0x80) == 0x80){
     6f2:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <pattern>
     6f6:	88 23       	and	r24, r24
     6f8:	6c f4       	brge	.+26     	; 0x714 <Tick_Second+0xca>
			if((~PINA & 0x40) == 0x40){
     6fa:	80 e2       	ldi	r24, 0x20	; 32
     6fc:	90 e0       	ldi	r25, 0x00	; 0
     6fe:	fc 01       	movw	r30, r24
     700:	80 81       	ld	r24, Z
     702:	88 2f       	mov	r24, r24
     704:	90 e0       	ldi	r25, 0x00	; 0
     706:	80 74       	andi	r24, 0x40	; 64
     708:	99 27       	eor	r25, r25
     70a:	89 2b       	or	r24, r25
     70c:	19 f4       	brne	.+6      	; 0x714 <Tick_Second+0xca>
				firstPlayerPressed2 = 1;
     70e:	81 e0       	ldi	r24, 0x01	; 1
     710:	80 93 e1 01 	sts	0x01E1, r24	; 0x8001e1 <firstPlayerPressed2>
			}
		}
		Light_Tick(current);
     714:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <current>
     718:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <current+0x1>
     71c:	d3 de       	rcall	.-602    	; 0x4c4 <Light_Tick>
		break;
     71e:	00 00       	nop
		default:
		break;
	}
}
     720:	00 00       	nop
     722:	df 91       	pop	r29
     724:	cf 91       	pop	r28
     726:	08 95       	ret

00000728 <Tick_Third>:
void Tick_Third(){
     728:	cf 93       	push	r28
     72a:	df 93       	push	r29
     72c:	cd b7       	in	r28, 0x3d	; 61
     72e:	de b7       	in	r29, 0x3e	; 62
	pattern = pattern3;
     730:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <pattern3>
     734:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <pattern>
	row = row3;
     738:	80 91 06 01 	lds	r24, 0x0106	; 0x800106 <row3>
     73c:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <row>
	// Transitions
	switch (current) {
     740:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <current>
     744:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <current+0x1>
     748:	89 2b       	or	r24, r25
     74a:	29 f0       	breq	.+10     	; 0x756 <Tick_Third+0x2e>
		case shift:
		break;
		default:
		current = shift;
     74c:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <current+0x1>
     750:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <current>
		break;
     754:	01 c0       	rjmp	.+2      	; 0x758 <Tick_Third+0x30>
	pattern = pattern3;
	row = row3;
	// Transitions
	switch (current) {
		case shift:
		break;
     756:	00 00       	nop
		current = shift;
		break;

	}
	// Actions
	switch (current) {
     758:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <current>
     75c:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <current+0x1>
     760:	89 2b       	or	r24, r25
     762:	09 f0       	breq	.+2      	; 0x766 <Tick_Third+0x3e>
			}
		}
		Light_Tick(current);
		break;
		default:
		break;
     764:	44 c0       	rjmp	.+136    	; 0x7ee <Tick_Third+0xc6>

	}
	// Actions
	switch (current) {
		case shift:
		if(counter >= slowness){
     766:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <counter>
     76a:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <counter+0x1>
     76e:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <slowness>
     772:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <slowness+0x1>
     776:	28 17       	cp	r18, r24
     778:	39 07       	cpc	r19, r25
     77a:	30 f1       	brcs	.+76     	; 0x7c8 <Tick_Third+0xa0>
			if(pattern == 0 || did3 == 1){
     77c:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <pattern>
     780:	88 23       	and	r24, r24
     782:	21 f0       	breq	.+8      	; 0x78c <Tick_Third+0x64>
     784:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <did3>
     788:	81 30       	cpi	r24, 0x01	; 1
     78a:	41 f4       	brne	.+16     	; 0x79c <Tick_Third+0x74>
				pattern = pattern | 0x01;
     78c:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <pattern>
     790:	81 60       	ori	r24, 0x01	; 1
     792:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <pattern>
				did3 = 0;
     796:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <did3>
     79a:	05 c0       	rjmp	.+10     	; 0x7a6 <Tick_Third+0x7e>
			}
			else{
				pattern <<= 1;
     79c:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <pattern>
     7a0:	88 0f       	add	r24, r24
     7a2:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <pattern>
			}
			pattern3 = pattern;
     7a6:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <pattern>
     7aa:	80 93 cb 01 	sts	0x01CB, r24	; 0x8001cb <pattern3>
			if((pattern3 & 0x80) == 0x80){
     7ae:	80 91 cb 01 	lds	r24, 0x01CB	; 0x8001cb <pattern3>
     7b2:	88 23       	and	r24, r24
     7b4:	4c f4       	brge	.+18     	; 0x7c8 <Tick_Third+0xa0>
				if((~PINA & 0x80) == 0x80){
     7b6:	80 e2       	ldi	r24, 0x20	; 32
     7b8:	90 e0       	ldi	r25, 0x00	; 0
     7ba:	fc 01       	movw	r30, r24
     7bc:	80 81       	ld	r24, Z
     7be:	88 23       	and	r24, r24
     7c0:	1c f0       	brlt	.+6      	; 0x7c8 <Tick_Third+0xa0>
					firstPlayerPressed3 = 1;
     7c2:	81 e0       	ldi	r24, 0x01	; 1
     7c4:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <firstPlayerPressed3>
				}
			}
		}
		if((pattern & 0x80) == 0x80){
     7c8:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <pattern>
     7cc:	88 23       	and	r24, r24
     7ce:	4c f4       	brge	.+18     	; 0x7e2 <Tick_Third+0xba>
			if((~PINA & 0x80) == 0x80){
     7d0:	80 e2       	ldi	r24, 0x20	; 32
     7d2:	90 e0       	ldi	r25, 0x00	; 0
     7d4:	fc 01       	movw	r30, r24
     7d6:	80 81       	ld	r24, Z
     7d8:	88 23       	and	r24, r24
     7da:	1c f0       	brlt	.+6      	; 0x7e2 <Tick_Third+0xba>
				firstPlayerPressed3 = 1;
     7dc:	81 e0       	ldi	r24, 0x01	; 1
     7de:	80 93 e2 01 	sts	0x01E2, r24	; 0x8001e2 <firstPlayerPressed3>
			}
		}
		Light_Tick(current);
     7e2:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <current>
     7e6:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <current+0x1>
     7ea:	6c de       	rcall	.-808    	; 0x4c4 <Light_Tick>
		break;
     7ec:	00 00       	nop
		default:
		break;
	}
}
     7ee:	00 00       	nop
     7f0:	df 91       	pop	r29
     7f2:	cf 91       	pop	r28
     7f4:	08 95       	ret

000007f6 <Tick_Fourth>:
void Tick_Fourth(){
     7f6:	cf 93       	push	r28
     7f8:	df 93       	push	r29
     7fa:	cd b7       	in	r28, 0x3d	; 61
     7fc:	de b7       	in	r29, 0x3e	; 62
	pattern = pattern4;
     7fe:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <pattern4>
     802:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <pattern>
	row = row4;
     806:	80 91 07 01 	lds	r24, 0x0107	; 0x800107 <row4>
     80a:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <row>
	// Transitions
	switch (current) {
     80e:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <current>
     812:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <current+0x1>
     816:	89 2b       	or	r24, r25
     818:	29 f0       	breq	.+10     	; 0x824 <Tick_Fourth+0x2e>
		case shift:
		break;
		default:
		current = shift;
     81a:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <current+0x1>
     81e:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <current>
		break;
     822:	01 c0       	rjmp	.+2      	; 0x826 <Tick_Fourth+0x30>
	pattern = pattern4;
	row = row4;
	// Transitions
	switch (current) {
		case shift:
		break;
     824:	00 00       	nop
		current = shift;
		break;

	}
	// Actions
	switch (current) {
     826:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <current>
     82a:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <current+0x1>
     82e:	89 2b       	or	r24, r25
     830:	09 f0       	breq	.+2      	; 0x834 <Tick_Fourth+0x3e>
			}
		}
		Light_Tick(current);
		break;
		default:
		break;
     832:	4c c0       	rjmp	.+152    	; 0x8cc <Tick_Fourth+0xd6>

	}
	// Actions
	switch (current) {
		case shift:
		if(counter >= slowness){
     834:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <counter>
     838:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <counter+0x1>
     83c:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <slowness>
     840:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <slowness+0x1>
     844:	28 17       	cp	r18, r24
     846:	39 07       	cpc	r19, r25
     848:	50 f1       	brcs	.+84     	; 0x89e <Tick_Fourth+0xa8>
			if(pattern == 0 || did4 == 1){
     84a:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <pattern>
     84e:	88 23       	and	r24, r24
     850:	21 f0       	breq	.+8      	; 0x85a <Tick_Fourth+0x64>
     852:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <did4>
     856:	81 30       	cpi	r24, 0x01	; 1
     858:	41 f4       	brne	.+16     	; 0x86a <Tick_Fourth+0x74>
				pattern = pattern | 0x01;
     85a:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <pattern>
     85e:	81 60       	ori	r24, 0x01	; 1
     860:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <pattern>
				did4= 0;
     864:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <did4>
     868:	05 c0       	rjmp	.+10     	; 0x874 <Tick_Fourth+0x7e>
			}
			else{
				pattern <<= 1;
     86a:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <pattern>
     86e:	88 0f       	add	r24, r24
     870:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <pattern>
			}
			pattern4 = pattern;
     874:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <pattern>
     878:	80 93 cc 01 	sts	0x01CC, r24	; 0x8001cc <pattern4>
			if((pattern & 0x80) == 0x80){
     87c:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <pattern>
     880:	88 23       	and	r24, r24
     882:	6c f4       	brge	.+26     	; 0x89e <Tick_Fourth+0xa8>
				if((~PINC & 0x40) == 0x40){
     884:	86 e2       	ldi	r24, 0x26	; 38
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	fc 01       	movw	r30, r24
     88a:	80 81       	ld	r24, Z
     88c:	88 2f       	mov	r24, r24
     88e:	90 e0       	ldi	r25, 0x00	; 0
     890:	80 74       	andi	r24, 0x40	; 64
     892:	99 27       	eor	r25, r25
     894:	89 2b       	or	r24, r25
     896:	19 f4       	brne	.+6      	; 0x89e <Tick_Fourth+0xa8>
					firstPlayerPressed4 = 1;
     898:	81 e0       	ldi	r24, 0x01	; 1
     89a:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <firstPlayerPressed4>
				}
			}
		}
		if((pattern4 & 0x80) == 0x80){
     89e:	80 91 cc 01 	lds	r24, 0x01CC	; 0x8001cc <pattern4>
     8a2:	88 23       	and	r24, r24
     8a4:	6c f4       	brge	.+26     	; 0x8c0 <Tick_Fourth+0xca>
			if((~PINC & 0x40) == 0x40){
     8a6:	86 e2       	ldi	r24, 0x26	; 38
     8a8:	90 e0       	ldi	r25, 0x00	; 0
     8aa:	fc 01       	movw	r30, r24
     8ac:	80 81       	ld	r24, Z
     8ae:	88 2f       	mov	r24, r24
     8b0:	90 e0       	ldi	r25, 0x00	; 0
     8b2:	80 74       	andi	r24, 0x40	; 64
     8b4:	99 27       	eor	r25, r25
     8b6:	89 2b       	or	r24, r25
     8b8:	19 f4       	brne	.+6      	; 0x8c0 <Tick_Fourth+0xca>
				firstPlayerPressed4 = 1;
     8ba:	81 e0       	ldi	r24, 0x01	; 1
     8bc:	80 93 e3 01 	sts	0x01E3, r24	; 0x8001e3 <firstPlayerPressed4>
			}
		}
		Light_Tick(current);
     8c0:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <current>
     8c4:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <current+0x1>
     8c8:	fd dd       	rcall	.-1030   	; 0x4c4 <Light_Tick>
		break;
     8ca:	00 00       	nop
		default:
		break;
	}
}
     8cc:	00 00       	nop
     8ce:	df 91       	pop	r29
     8d0:	cf 91       	pop	r28
     8d2:	08 95       	ret

000008d4 <Tick_Fifth>:
void Tick_Fifth(){
     8d4:	cf 93       	push	r28
     8d6:	df 93       	push	r29
     8d8:	cd b7       	in	r28, 0x3d	; 61
     8da:	de b7       	in	r29, 0x3e	; 62
	pattern = pattern5;
     8dc:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <pattern5>
     8e0:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <pattern>
	row = row5;
     8e4:	80 91 08 01 	lds	r24, 0x0108	; 0x800108 <row5>
     8e8:	80 93 c8 01 	sts	0x01C8, r24	; 0x8001c8 <row>
	// Transitions
	switch (current) {
     8ec:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <current>
     8f0:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <current+0x1>
     8f4:	89 2b       	or	r24, r25
     8f6:	29 f0       	breq	.+10     	; 0x902 <Tick_Fifth+0x2e>
		case shift:
		break;
		default:
		current = shift;
     8f8:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <current+0x1>
     8fc:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <current>
		break;
     900:	01 c0       	rjmp	.+2      	; 0x904 <Tick_Fifth+0x30>
	pattern = pattern5;
	row = row5;
	// Transitions
	switch (current) {
		case shift:
		break;
     902:	00 00       	nop
		current = shift;
		break;

	}
	// Actions
	switch (current) {
     904:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <current>
     908:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <current+0x1>
     90c:	89 2b       	or	r24, r25
     90e:	09 f0       	breq	.+2      	; 0x912 <Tick_Fifth+0x3e>
			}
		}
		Light_Tick(current);
		break;
		default:
		break;
     910:	44 c0       	rjmp	.+136    	; 0x99a <Tick_Fifth+0xc6>

	}
	// Actions
	switch (current) {
		case shift:
		if(counter >= slowness){
     912:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <counter>
     916:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <counter+0x1>
     91a:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <slowness>
     91e:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <slowness+0x1>
     922:	28 17       	cp	r18, r24
     924:	39 07       	cpc	r19, r25
     926:	30 f1       	brcs	.+76     	; 0x974 <Tick_Fifth+0xa0>
			if(pattern == 0 || did5 == 1){
     928:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <pattern>
     92c:	88 23       	and	r24, r24
     92e:	21 f0       	breq	.+8      	; 0x938 <Tick_Fifth+0x64>
     930:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <did5>
     934:	81 30       	cpi	r24, 0x01	; 1
     936:	41 f4       	brne	.+16     	; 0x948 <Tick_Fifth+0x74>
				pattern = pattern | 0x01;
     938:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <pattern>
     93c:	81 60       	ori	r24, 0x01	; 1
     93e:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <pattern>
				did5 = 0;
     942:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <did5>
     946:	05 c0       	rjmp	.+10     	; 0x952 <Tick_Fifth+0x7e>
			}
			else{
				pattern <<= 1;
     948:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <pattern>
     94c:	88 0f       	add	r24, r24
     94e:	80 93 c7 01 	sts	0x01C7, r24	; 0x8001c7 <pattern>
			}
			pattern5 = pattern;
     952:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <pattern>
     956:	80 93 cd 01 	sts	0x01CD, r24	; 0x8001cd <pattern5>
			if((pattern5 & 0x80) == 0x80){
     95a:	80 91 cd 01 	lds	r24, 0x01CD	; 0x8001cd <pattern5>
     95e:	88 23       	and	r24, r24
     960:	4c f4       	brge	.+18     	; 0x974 <Tick_Fifth+0xa0>
				if((~PINC & 0x80) == 0x80){
     962:	86 e2       	ldi	r24, 0x26	; 38
     964:	90 e0       	ldi	r25, 0x00	; 0
     966:	fc 01       	movw	r30, r24
     968:	80 81       	ld	r24, Z
     96a:	88 23       	and	r24, r24
     96c:	1c f0       	brlt	.+6      	; 0x974 <Tick_Fifth+0xa0>
					firstPlayerPressed5 = 1;
     96e:	81 e0       	ldi	r24, 0x01	; 1
     970:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <firstPlayerPressed5>
				}
			}
		}
		if((pattern & 0x80) == 0x80){
     974:	80 91 c7 01 	lds	r24, 0x01C7	; 0x8001c7 <pattern>
     978:	88 23       	and	r24, r24
     97a:	4c f4       	brge	.+18     	; 0x98e <Tick_Fifth+0xba>
			if((~PINC & 0x80) == 0x80){
     97c:	86 e2       	ldi	r24, 0x26	; 38
     97e:	90 e0       	ldi	r25, 0x00	; 0
     980:	fc 01       	movw	r30, r24
     982:	80 81       	ld	r24, Z
     984:	88 23       	and	r24, r24
     986:	1c f0       	brlt	.+6      	; 0x98e <Tick_Fifth+0xba>
				firstPlayerPressed5 = 1;
     988:	81 e0       	ldi	r24, 0x01	; 1
     98a:	80 93 e4 01 	sts	0x01E4, r24	; 0x8001e4 <firstPlayerPressed5>
			}
		}
		Light_Tick(current);
     98e:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <current>
     992:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <current+0x1>
     996:	96 dd       	rcall	.-1236   	; 0x4c4 <Light_Tick>
		break;
     998:	00 00       	nop
		default:
		break;
	}
}
     99a:	00 00       	nop
     99c:	df 91       	pop	r29
     99e:	cf 91       	pop	r28
     9a0:	08 95       	ret

000009a2 <updateScore>:

void updateScore(){
     9a2:	cf 93       	push	r28
     9a4:	df 93       	push	r29
     9a6:	cd b7       	in	r28, 0x3d	; 61
     9a8:	de b7       	in	r29, 0x3e	; 62
	if(firstPlayerPressed1 == 1){
     9aa:	80 91 e0 01 	lds	r24, 0x01E0	; 0x8001e0 <firstPlayerPressed1>
     9ae:	81 30       	cpi	r24, 0x01	; 1
     9b0:	59 f4       	brne	.+22     	; 0x9c8 <updateScore+0x26>
		score += 1;
     9b2:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <score>
     9b6:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <score+0x1>
     9ba:	01 96       	adiw	r24, 0x01	; 1
     9bc:	90 93 e6 01 	sts	0x01E6, r25	; 0x8001e6 <score+0x1>
     9c0:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <score>
		firstPlayerPressed1 = 0;
     9c4:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <firstPlayerPressed1>
	}
	if(firstPlayerPressed2 == 1){
     9c8:	80 91 e1 01 	lds	r24, 0x01E1	; 0x8001e1 <firstPlayerPressed2>
     9cc:	81 30       	cpi	r24, 0x01	; 1
     9ce:	59 f4       	brne	.+22     	; 0x9e6 <updateScore+0x44>
		score += 1;
     9d0:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <score>
     9d4:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <score+0x1>
     9d8:	01 96       	adiw	r24, 0x01	; 1
     9da:	90 93 e6 01 	sts	0x01E6, r25	; 0x8001e6 <score+0x1>
     9de:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <score>
		firstPlayerPressed2 = 0;
     9e2:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <firstPlayerPressed2>
	}
	if(firstPlayerPressed3 == 1){
     9e6:	80 91 e2 01 	lds	r24, 0x01E2	; 0x8001e2 <firstPlayerPressed3>
     9ea:	81 30       	cpi	r24, 0x01	; 1
     9ec:	59 f4       	brne	.+22     	; 0xa04 <updateScore+0x62>
		score += 1;
     9ee:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <score>
     9f2:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <score+0x1>
     9f6:	01 96       	adiw	r24, 0x01	; 1
     9f8:	90 93 e6 01 	sts	0x01E6, r25	; 0x8001e6 <score+0x1>
     9fc:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <score>
		firstPlayerPressed3 = 0;
     a00:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <firstPlayerPressed3>
	}
	if(firstPlayerPressed4 == 1){
     a04:	80 91 e3 01 	lds	r24, 0x01E3	; 0x8001e3 <firstPlayerPressed4>
     a08:	81 30       	cpi	r24, 0x01	; 1
     a0a:	59 f4       	brne	.+22     	; 0xa22 <updateScore+0x80>
		score += 1;
     a0c:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <score>
     a10:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <score+0x1>
     a14:	01 96       	adiw	r24, 0x01	; 1
     a16:	90 93 e6 01 	sts	0x01E6, r25	; 0x8001e6 <score+0x1>
     a1a:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <score>
		firstPlayerPressed4 = 0;
     a1e:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <firstPlayerPressed4>
	}
	if(firstPlayerPressed5 == 1){
     a22:	80 91 e4 01 	lds	r24, 0x01E4	; 0x8001e4 <firstPlayerPressed5>
     a26:	81 30       	cpi	r24, 0x01	; 1
     a28:	59 f4       	brne	.+22     	; 0xa40 <updateScore+0x9e>
		score += 1;
     a2a:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <score>
     a2e:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <score+0x1>
     a32:	01 96       	adiw	r24, 0x01	; 1
     a34:	90 93 e6 01 	sts	0x01E6, r25	; 0x8001e6 <score+0x1>
     a38:	80 93 e5 01 	sts	0x01E5, r24	; 0x8001e5 <score>
		firstPlayerPressed5 = 0;
     a3c:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <firstPlayerPressed5>
	}
}
     a40:	00 00       	nop
     a42:	df 91       	pop	r29
     a44:	cf 91       	pop	r28
     a46:	08 95       	ret

00000a48 <updateLights>:

void updateLights(){
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	cf 93       	push	r28
     a4e:	df 93       	push	r29
     a50:	cd b7       	in	r28, 0x3d	; 61
     a52:	de b7       	in	r29, 0x3e	; 62
     a54:	ce 58       	subi	r28, 0x8E	; 142
     a56:	d1 09       	sbc	r29, r1
     a58:	0f b6       	in	r0, 0x3f	; 63
     a5a:	f8 94       	cli
     a5c:	de bf       	out	0x3e, r29	; 62
     a5e:	0f be       	out	0x3f, r0	; 63
     a60:	cd bf       	out	0x3d, r28	; 61
	switch (current) {
     a62:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <current>
     a66:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <current+0x1>
     a6a:	00 97       	sbiw	r24, 0x00	; 0
     a6c:	39 f0       	breq	.+14     	; 0xa7c <updateLights+0x34>
     a6e:	01 97       	sbiw	r24, 0x01	; 1
     a70:	39 f0       	breq	.+14     	; 0xa80 <updateLights+0x38>
		case shift:
		break;
		case setVars:
		break;
		default:
		current = shift;
     a72:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <current+0x1>
     a76:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <current>
		break;
     a7a:	03 c0       	rjmp	.+6      	; 0xa82 <updateLights+0x3a>
}

void updateLights(){
	switch (current) {
		case shift:
		break;
     a7c:	00 00       	nop
     a7e:	01 c0       	rjmp	.+2      	; 0xa82 <updateLights+0x3a>
		case setVars:
		break;
     a80:	00 00       	nop
		current = shift;
		break;

	}
	// Actions
	switch (current) {
     a82:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <current>
     a86:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <current+0x1>
     a8a:	00 97       	sbiw	r24, 0x00	; 0
     a8c:	31 f0       	breq	.+12     	; 0xa9a <updateLights+0x52>
     a8e:	01 97       	sbiw	r24, 0x01	; 1
     a90:	11 f4       	brne	.+4      	; 0xa96 <updateLights+0x4e>
     a92:	0c 94 4d 0d 	jmp	0x1a9a	; 0x1a9a <updateLights+0x1052>
				updateScore();
			}
			current = shift;
			break;
		default:
		break;
     a96:	0c 94 8b 0d 	jmp	0x1b16	; 0x1b16 <updateLights+0x10ce>

	}
	// Actions
	switch (current) {
		case shift:
			counter++;
     a9a:	80 91 0b 01 	lds	r24, 0x010B	; 0x80010b <counter>
     a9e:	90 91 0c 01 	lds	r25, 0x010C	; 0x80010c <counter+0x1>
     aa2:	01 96       	adiw	r24, 0x01	; 1
     aa4:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <counter+0x1>
     aa8:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <counter>
			
			for(int c = 0; c < size; c++){
     aac:	1a 82       	std	Y+2, r1	; 0x02
     aae:	19 82       	std	Y+1, r1	; 0x01
     ab0:	e3 c7       	rjmp	.+4038   	; 0x1a78 <updateLights+0x1030>
				if(time[c] == light_count){
     ab2:	89 81       	ldd	r24, Y+1	; 0x01
     ab4:	9a 81       	ldd	r25, Y+2	; 0x02
     ab6:	81 53       	subi	r24, 0x31	; 49
     ab8:	9d 4f       	sbci	r25, 0xFD	; 253
     aba:	fc 01       	movw	r30, r24
     abc:	80 81       	ld	r24, Z
     abe:	28 2f       	mov	r18, r24
     ac0:	30 e0       	ldi	r19, 0x00	; 0
     ac2:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <light_count>
     ac6:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <light_count+0x1>
     aca:	28 17       	cp	r18, r24
     acc:	39 07       	cpc	r19, r25
     ace:	09 f0       	breq	.+2      	; 0xad2 <updateLights+0x8a>
     ad0:	3b c3       	rjmp	.+1654   	; 0x1148 <updateLights+0x700>
					if(sequence[c] == 1){
     ad2:	89 81       	ldd	r24, Y+1	; 0x01
     ad4:	9a 81       	ldd	r25, Y+2	; 0x02
     ad6:	87 51       	subi	r24, 0x17	; 23
     ad8:	9e 4f       	sbci	r25, 0xFE	; 254
     ada:	fc 01       	movw	r30, r24
     adc:	80 81       	ld	r24, Z
     ade:	81 30       	cpi	r24, 0x01	; 1
     ae0:	09 f0       	breq	.+2      	; 0xae4 <updateLights+0x9c>
						Tick_First();
     ae2:	73 c0       	rjmp	.+230    	; 0xbca <updateLights+0x182>
     ae4:	39 dd       	rcall	.-1422   	; 0x558 <Tick_First>
     ae6:	80 e0       	ldi	r24, 0x00	; 0
     ae8:	90 e0       	ldi	r25, 0x00	; 0
     aea:	a0 e8       	ldi	r26, 0x80	; 128
     aec:	bf e3       	ldi	r27, 0x3F	; 63
     aee:	8f a3       	std	Y+39, r24	; 0x27
     af0:	98 a7       	std	Y+40, r25	; 0x28
     af2:	a9 a7       	std	Y+41, r26	; 0x29
     af4:	ba a7       	std	Y+42, r27	; 0x2a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     af6:	20 e0       	ldi	r18, 0x00	; 0
     af8:	30 e0       	ldi	r19, 0x00	; 0
     afa:	4a e7       	ldi	r20, 0x7A	; 122
     afc:	53 e4       	ldi	r21, 0x43	; 67
     afe:	6f a1       	ldd	r22, Y+39	; 0x27
     b00:	78 a5       	ldd	r23, Y+40	; 0x28
     b02:	89 a5       	ldd	r24, Y+41	; 0x29
     b04:	9a a5       	ldd	r25, Y+42	; 0x2a
     b06:	0e 94 24 13 	call	0x2648	; 0x2648 <__mulsf3>
     b0a:	dc 01       	movw	r26, r24
     b0c:	cb 01       	movw	r24, r22
     b0e:	8b a7       	std	Y+43, r24	; 0x2b
     b10:	9c a7       	std	Y+44, r25	; 0x2c
     b12:	ad a7       	std	Y+45, r26	; 0x2d
     b14:	be a7       	std	Y+46, r27	; 0x2e
	if (__tmp < 1.0)
     b16:	20 e0       	ldi	r18, 0x00	; 0
     b18:	30 e0       	ldi	r19, 0x00	; 0
     b1a:	40 e8       	ldi	r20, 0x80	; 128
     b1c:	5f e3       	ldi	r21, 0x3F	; 63
     b1e:	6b a5       	ldd	r22, Y+43	; 0x2b
     b20:	7c a5       	ldd	r23, Y+44	; 0x2c
     b22:	8d a5       	ldd	r24, Y+45	; 0x2d
     b24:	9e a5       	ldd	r25, Y+46	; 0x2e
     b26:	0e 94 a3 12 	call	0x2546	; 0x2546 <__cmpsf2>
     b2a:	88 23       	and	r24, r24
     b2c:	2c f4       	brge	.+10     	; 0xb38 <updateLights+0xf0>
		__ticks = 1;
     b2e:	81 e0       	ldi	r24, 0x01	; 1
     b30:	90 e0       	ldi	r25, 0x00	; 0
     b32:	98 ab       	std	Y+48, r25	; 0x30
     b34:	8f a7       	std	Y+47, r24	; 0x2f
     b36:	3f c0       	rjmp	.+126    	; 0xbb6 <updateLights+0x16e>
	else if (__tmp > 65535)
     b38:	20 e0       	ldi	r18, 0x00	; 0
     b3a:	3f ef       	ldi	r19, 0xFF	; 255
     b3c:	4f e7       	ldi	r20, 0x7F	; 127
     b3e:	57 e4       	ldi	r21, 0x47	; 71
     b40:	6b a5       	ldd	r22, Y+43	; 0x2b
     b42:	7c a5       	ldd	r23, Y+44	; 0x2c
     b44:	8d a5       	ldd	r24, Y+45	; 0x2d
     b46:	9e a5       	ldd	r25, Y+46	; 0x2e
     b48:	0e 94 20 13 	call	0x2640	; 0x2640 <__gesf2>
     b4c:	18 16       	cp	r1, r24
     b4e:	4c f5       	brge	.+82     	; 0xba2 <updateLights+0x15a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     b50:	20 e0       	ldi	r18, 0x00	; 0
     b52:	30 e0       	ldi	r19, 0x00	; 0
     b54:	40 e2       	ldi	r20, 0x20	; 32
     b56:	51 e4       	ldi	r21, 0x41	; 65
     b58:	6f a1       	ldd	r22, Y+39	; 0x27
     b5a:	78 a5       	ldd	r23, Y+40	; 0x28
     b5c:	89 a5       	ldd	r24, Y+41	; 0x29
     b5e:	9a a5       	ldd	r25, Y+42	; 0x2a
     b60:	0e 94 24 13 	call	0x2648	; 0x2648 <__mulsf3>
     b64:	dc 01       	movw	r26, r24
     b66:	cb 01       	movw	r24, r22
     b68:	bc 01       	movw	r22, r24
     b6a:	cd 01       	movw	r24, r26
     b6c:	0e 94 a7 12 	call	0x254e	; 0x254e <__fixunssfsi>
     b70:	dc 01       	movw	r26, r24
     b72:	cb 01       	movw	r24, r22
     b74:	98 ab       	std	Y+48, r25	; 0x30
     b76:	8f a7       	std	Y+47, r24	; 0x2f
     b78:	0f c0       	rjmp	.+30     	; 0xb98 <updateLights+0x150>
     b7a:	89 e1       	ldi	r24, 0x19	; 25
     b7c:	90 e0       	ldi	r25, 0x00	; 0
     b7e:	9a ab       	std	Y+50, r25	; 0x32
     b80:	89 ab       	std	Y+49, r24	; 0x31
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     b82:	89 a9       	ldd	r24, Y+49	; 0x31
     b84:	9a a9       	ldd	r25, Y+50	; 0x32
     b86:	01 97       	sbiw	r24, 0x01	; 1
     b88:	f1 f7       	brne	.-4      	; 0xb86 <updateLights+0x13e>
     b8a:	9a ab       	std	Y+50, r25	; 0x32
     b8c:	89 ab       	std	Y+49, r24	; 0x31
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     b8e:	8f a5       	ldd	r24, Y+47	; 0x2f
     b90:	98 a9       	ldd	r25, Y+48	; 0x30
     b92:	01 97       	sbiw	r24, 0x01	; 1
     b94:	98 ab       	std	Y+48, r25	; 0x30
     b96:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     b98:	8f a5       	ldd	r24, Y+47	; 0x2f
     b9a:	98 a9       	ldd	r25, Y+48	; 0x30
     b9c:	89 2b       	or	r24, r25
     b9e:	69 f7       	brne	.-38     	; 0xb7a <updateLights+0x132>
     ba0:	14 c0       	rjmp	.+40     	; 0xbca <updateLights+0x182>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     ba2:	6b a5       	ldd	r22, Y+43	; 0x2b
     ba4:	7c a5       	ldd	r23, Y+44	; 0x2c
     ba6:	8d a5       	ldd	r24, Y+45	; 0x2d
     ba8:	9e a5       	ldd	r25, Y+46	; 0x2e
     baa:	0e 94 a7 12 	call	0x254e	; 0x254e <__fixunssfsi>
     bae:	dc 01       	movw	r26, r24
     bb0:	cb 01       	movw	r24, r22
     bb2:	98 ab       	std	Y+48, r25	; 0x30
     bb4:	8f a7       	std	Y+47, r24	; 0x2f
     bb6:	8f a5       	ldd	r24, Y+47	; 0x2f
     bb8:	98 a9       	ldd	r25, Y+48	; 0x30
     bba:	9c ab       	std	Y+52, r25	; 0x34
     bbc:	8b ab       	std	Y+51, r24	; 0x33
     bbe:	8b a9       	ldd	r24, Y+51	; 0x33
     bc0:	9c a9       	ldd	r25, Y+52	; 0x34
     bc2:	01 97       	sbiw	r24, 0x01	; 1
     bc4:	f1 f7       	brne	.-4      	; 0xbc2 <updateLights+0x17a>
     bc6:	9c ab       	std	Y+52, r25	; 0x34
     bc8:	8b ab       	std	Y+51, r24	; 0x33
						_delay_ms(1);
					}
					if(sequence[c] == 2){
     bca:	89 81       	ldd	r24, Y+1	; 0x01
     bcc:	9a 81       	ldd	r25, Y+2	; 0x02
     bce:	87 51       	subi	r24, 0x17	; 23
     bd0:	9e 4f       	sbci	r25, 0xFE	; 254
     bd2:	fc 01       	movw	r30, r24
     bd4:	80 81       	ld	r24, Z
     bd6:	82 30       	cpi	r24, 0x02	; 2
     bd8:	09 f0       	breq	.+2      	; 0xbdc <updateLights+0x194>
						Tick_Second();
     bda:	73 c0       	rjmp	.+230    	; 0xcc2 <updateLights+0x27a>
     bdc:	36 dd       	rcall	.-1428   	; 0x64a <Tick_Second>
     bde:	80 e0       	ldi	r24, 0x00	; 0
     be0:	90 e0       	ldi	r25, 0x00	; 0
     be2:	a0 e8       	ldi	r26, 0x80	; 128
     be4:	bf e3       	ldi	r27, 0x3F	; 63
     be6:	8b 83       	std	Y+3, r24	; 0x03
     be8:	9c 83       	std	Y+4, r25	; 0x04
     bea:	ad 83       	std	Y+5, r26	; 0x05
     bec:	be 83       	std	Y+6, r27	; 0x06

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     bee:	20 e0       	ldi	r18, 0x00	; 0
     bf0:	30 e0       	ldi	r19, 0x00	; 0
     bf2:	4a e7       	ldi	r20, 0x7A	; 122
     bf4:	53 e4       	ldi	r21, 0x43	; 67
     bf6:	6b 81       	ldd	r22, Y+3	; 0x03
     bf8:	7c 81       	ldd	r23, Y+4	; 0x04
     bfa:	8d 81       	ldd	r24, Y+5	; 0x05
     bfc:	9e 81       	ldd	r25, Y+6	; 0x06
     bfe:	0e 94 24 13 	call	0x2648	; 0x2648 <__mulsf3>
     c02:	dc 01       	movw	r26, r24
     c04:	cb 01       	movw	r24, r22
     c06:	8d ab       	std	Y+53, r24	; 0x35
     c08:	9e ab       	std	Y+54, r25	; 0x36
     c0a:	af ab       	std	Y+55, r26	; 0x37
     c0c:	b8 af       	std	Y+56, r27	; 0x38
	if (__tmp < 1.0)
     c0e:	20 e0       	ldi	r18, 0x00	; 0
     c10:	30 e0       	ldi	r19, 0x00	; 0
     c12:	40 e8       	ldi	r20, 0x80	; 128
     c14:	5f e3       	ldi	r21, 0x3F	; 63
     c16:	6d a9       	ldd	r22, Y+53	; 0x35
     c18:	7e a9       	ldd	r23, Y+54	; 0x36
     c1a:	8f a9       	ldd	r24, Y+55	; 0x37
     c1c:	98 ad       	ldd	r25, Y+56	; 0x38
     c1e:	0e 94 a3 12 	call	0x2546	; 0x2546 <__cmpsf2>
     c22:	88 23       	and	r24, r24
     c24:	2c f4       	brge	.+10     	; 0xc30 <updateLights+0x1e8>
		__ticks = 1;
     c26:	81 e0       	ldi	r24, 0x01	; 1
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	9a af       	std	Y+58, r25	; 0x3a
     c2c:	89 af       	std	Y+57, r24	; 0x39
     c2e:	3f c0       	rjmp	.+126    	; 0xcae <updateLights+0x266>
	else if (__tmp > 65535)
     c30:	20 e0       	ldi	r18, 0x00	; 0
     c32:	3f ef       	ldi	r19, 0xFF	; 255
     c34:	4f e7       	ldi	r20, 0x7F	; 127
     c36:	57 e4       	ldi	r21, 0x47	; 71
     c38:	6d a9       	ldd	r22, Y+53	; 0x35
     c3a:	7e a9       	ldd	r23, Y+54	; 0x36
     c3c:	8f a9       	ldd	r24, Y+55	; 0x37
     c3e:	98 ad       	ldd	r25, Y+56	; 0x38
     c40:	0e 94 20 13 	call	0x2640	; 0x2640 <__gesf2>
     c44:	18 16       	cp	r1, r24
     c46:	4c f5       	brge	.+82     	; 0xc9a <updateLights+0x252>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     c48:	20 e0       	ldi	r18, 0x00	; 0
     c4a:	30 e0       	ldi	r19, 0x00	; 0
     c4c:	40 e2       	ldi	r20, 0x20	; 32
     c4e:	51 e4       	ldi	r21, 0x41	; 65
     c50:	6b 81       	ldd	r22, Y+3	; 0x03
     c52:	7c 81       	ldd	r23, Y+4	; 0x04
     c54:	8d 81       	ldd	r24, Y+5	; 0x05
     c56:	9e 81       	ldd	r25, Y+6	; 0x06
     c58:	0e 94 24 13 	call	0x2648	; 0x2648 <__mulsf3>
     c5c:	dc 01       	movw	r26, r24
     c5e:	cb 01       	movw	r24, r22
     c60:	bc 01       	movw	r22, r24
     c62:	cd 01       	movw	r24, r26
     c64:	0e 94 a7 12 	call	0x254e	; 0x254e <__fixunssfsi>
     c68:	dc 01       	movw	r26, r24
     c6a:	cb 01       	movw	r24, r22
     c6c:	9a af       	std	Y+58, r25	; 0x3a
     c6e:	89 af       	std	Y+57, r24	; 0x39
     c70:	0f c0       	rjmp	.+30     	; 0xc90 <updateLights+0x248>
     c72:	89 e1       	ldi	r24, 0x19	; 25
     c74:	90 e0       	ldi	r25, 0x00	; 0
     c76:	9c af       	std	Y+60, r25	; 0x3c
     c78:	8b af       	std	Y+59, r24	; 0x3b
     c7a:	8b ad       	ldd	r24, Y+59	; 0x3b
     c7c:	9c ad       	ldd	r25, Y+60	; 0x3c
     c7e:	01 97       	sbiw	r24, 0x01	; 1
     c80:	f1 f7       	brne	.-4      	; 0xc7e <updateLights+0x236>
     c82:	9c af       	std	Y+60, r25	; 0x3c
     c84:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c86:	89 ad       	ldd	r24, Y+57	; 0x39
     c88:	9a ad       	ldd	r25, Y+58	; 0x3a
     c8a:	01 97       	sbiw	r24, 0x01	; 1
     c8c:	9a af       	std	Y+58, r25	; 0x3a
     c8e:	89 af       	std	Y+57, r24	; 0x39
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c90:	89 ad       	ldd	r24, Y+57	; 0x39
     c92:	9a ad       	ldd	r25, Y+58	; 0x3a
     c94:	89 2b       	or	r24, r25
     c96:	69 f7       	brne	.-38     	; 0xc72 <updateLights+0x22a>
     c98:	14 c0       	rjmp	.+40     	; 0xcc2 <updateLights+0x27a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c9a:	6d a9       	ldd	r22, Y+53	; 0x35
     c9c:	7e a9       	ldd	r23, Y+54	; 0x36
     c9e:	8f a9       	ldd	r24, Y+55	; 0x37
     ca0:	98 ad       	ldd	r25, Y+56	; 0x38
     ca2:	0e 94 a7 12 	call	0x254e	; 0x254e <__fixunssfsi>
     ca6:	dc 01       	movw	r26, r24
     ca8:	cb 01       	movw	r24, r22
     caa:	9a af       	std	Y+58, r25	; 0x3a
     cac:	89 af       	std	Y+57, r24	; 0x39
     cae:	89 ad       	ldd	r24, Y+57	; 0x39
     cb0:	9a ad       	ldd	r25, Y+58	; 0x3a
     cb2:	9e af       	std	Y+62, r25	; 0x3e
     cb4:	8d af       	std	Y+61, r24	; 0x3d
     cb6:	8d ad       	ldd	r24, Y+61	; 0x3d
     cb8:	9e ad       	ldd	r25, Y+62	; 0x3e
     cba:	01 97       	sbiw	r24, 0x01	; 1
     cbc:	f1 f7       	brne	.-4      	; 0xcba <updateLights+0x272>
     cbe:	9e af       	std	Y+62, r25	; 0x3e
     cc0:	8d af       	std	Y+61, r24	; 0x3d
						_delay_ms(1);
					}
					if(sequence[c] == 3){
     cc2:	89 81       	ldd	r24, Y+1	; 0x01
     cc4:	9a 81       	ldd	r25, Y+2	; 0x02
     cc6:	87 51       	subi	r24, 0x17	; 23
     cc8:	9e 4f       	sbci	r25, 0xFE	; 254
     cca:	fc 01       	movw	r30, r24
     ccc:	80 81       	ld	r24, Z
     cce:	83 30       	cpi	r24, 0x03	; 3
     cd0:	09 f0       	breq	.+2      	; 0xcd4 <updateLights+0x28c>
						Tick_Third();
     cd2:	b6 c0       	rjmp	.+364    	; 0xe40 <updateLights+0x3f8>
     cd4:	29 dd       	rcall	.-1454   	; 0x728 <Tick_Third>
     cd6:	80 e0       	ldi	r24, 0x00	; 0
     cd8:	90 e0       	ldi	r25, 0x00	; 0
     cda:	a0 e8       	ldi	r26, 0x80	; 128
     cdc:	bf e3       	ldi	r27, 0x3F	; 63
     cde:	8f 83       	std	Y+7, r24	; 0x07
     ce0:	98 87       	std	Y+8, r25	; 0x08
     ce2:	a9 87       	std	Y+9, r26	; 0x09
     ce4:	ba 87       	std	Y+10, r27	; 0x0a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     ce6:	8e 01       	movw	r16, r28
     ce8:	01 5c       	subi	r16, 0xC1	; 193
     cea:	1f 4f       	sbci	r17, 0xFF	; 255
     cec:	20 e0       	ldi	r18, 0x00	; 0
     cee:	30 e0       	ldi	r19, 0x00	; 0
     cf0:	4a e7       	ldi	r20, 0x7A	; 122
     cf2:	53 e4       	ldi	r21, 0x43	; 67
     cf4:	6f 81       	ldd	r22, Y+7	; 0x07
     cf6:	78 85       	ldd	r23, Y+8	; 0x08
     cf8:	89 85       	ldd	r24, Y+9	; 0x09
     cfa:	9a 85       	ldd	r25, Y+10	; 0x0a
     cfc:	0e 94 24 13 	call	0x2648	; 0x2648 <__mulsf3>
     d00:	dc 01       	movw	r26, r24
     d02:	cb 01       	movw	r24, r22
     d04:	f8 01       	movw	r30, r16
     d06:	80 83       	st	Z, r24
     d08:	91 83       	std	Z+1, r25	; 0x01
     d0a:	a2 83       	std	Z+2, r26	; 0x02
     d0c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d0e:	ce 01       	movw	r24, r28
     d10:	cf 96       	adiw	r24, 0x3f	; 63
     d12:	20 e0       	ldi	r18, 0x00	; 0
     d14:	30 e0       	ldi	r19, 0x00	; 0
     d16:	40 e8       	ldi	r20, 0x80	; 128
     d18:	5f e3       	ldi	r21, 0x3F	; 63
     d1a:	fc 01       	movw	r30, r24
     d1c:	60 81       	ld	r22, Z
     d1e:	71 81       	ldd	r23, Z+1	; 0x01
     d20:	82 81       	ldd	r24, Z+2	; 0x02
     d22:	93 81       	ldd	r25, Z+3	; 0x03
     d24:	0e 94 a3 12 	call	0x2546	; 0x2546 <__cmpsf2>
     d28:	88 23       	and	r24, r24
     d2a:	4c f4       	brge	.+18     	; 0xd3e <updateLights+0x2f6>
		__ticks = 1;
     d2c:	ce 01       	movw	r24, r28
     d2e:	8d 5b       	subi	r24, 0xBD	; 189
     d30:	9f 4f       	sbci	r25, 0xFF	; 255
     d32:	21 e0       	ldi	r18, 0x01	; 1
     d34:	30 e0       	ldi	r19, 0x00	; 0
     d36:	fc 01       	movw	r30, r24
     d38:	31 83       	std	Z+1, r19	; 0x01
     d3a:	20 83       	st	Z, r18
     d3c:	67 c0       	rjmp	.+206    	; 0xe0c <updateLights+0x3c4>
	else if (__tmp > 65535)
     d3e:	ce 01       	movw	r24, r28
     d40:	cf 96       	adiw	r24, 0x3f	; 63
     d42:	20 e0       	ldi	r18, 0x00	; 0
     d44:	3f ef       	ldi	r19, 0xFF	; 255
     d46:	4f e7       	ldi	r20, 0x7F	; 127
     d48:	57 e4       	ldi	r21, 0x47	; 71
     d4a:	fc 01       	movw	r30, r24
     d4c:	60 81       	ld	r22, Z
     d4e:	71 81       	ldd	r23, Z+1	; 0x01
     d50:	82 81       	ldd	r24, Z+2	; 0x02
     d52:	93 81       	ldd	r25, Z+3	; 0x03
     d54:	0e 94 20 13 	call	0x2640	; 0x2640 <__gesf2>
     d58:	18 16       	cp	r1, r24
     d5a:	0c f0       	brlt	.+2      	; 0xd5e <updateLights+0x316>
     d5c:	46 c0       	rjmp	.+140    	; 0xdea <updateLights+0x3a2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d5e:	20 e0       	ldi	r18, 0x00	; 0
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	40 e2       	ldi	r20, 0x20	; 32
     d64:	51 e4       	ldi	r21, 0x41	; 65
     d66:	6f 81       	ldd	r22, Y+7	; 0x07
     d68:	78 85       	ldd	r23, Y+8	; 0x08
     d6a:	89 85       	ldd	r24, Y+9	; 0x09
     d6c:	9a 85       	ldd	r25, Y+10	; 0x0a
     d6e:	0e 94 24 13 	call	0x2648	; 0x2648 <__mulsf3>
     d72:	dc 01       	movw	r26, r24
     d74:	cb 01       	movw	r24, r22
     d76:	8e 01       	movw	r16, r28
     d78:	0d 5b       	subi	r16, 0xBD	; 189
     d7a:	1f 4f       	sbci	r17, 0xFF	; 255
     d7c:	bc 01       	movw	r22, r24
     d7e:	cd 01       	movw	r24, r26
     d80:	0e 94 a7 12 	call	0x254e	; 0x254e <__fixunssfsi>
     d84:	dc 01       	movw	r26, r24
     d86:	cb 01       	movw	r24, r22
     d88:	f8 01       	movw	r30, r16
     d8a:	91 83       	std	Z+1, r25	; 0x01
     d8c:	80 83       	st	Z, r24
     d8e:	24 c0       	rjmp	.+72     	; 0xdd8 <updateLights+0x390>
     d90:	ce 01       	movw	r24, r28
     d92:	8b 5b       	subi	r24, 0xBB	; 187
     d94:	9f 4f       	sbci	r25, 0xFF	; 255
     d96:	29 e1       	ldi	r18, 0x19	; 25
     d98:	30 e0       	ldi	r19, 0x00	; 0
     d9a:	fc 01       	movw	r30, r24
     d9c:	31 83       	std	Z+1, r19	; 0x01
     d9e:	20 83       	st	Z, r18
     da0:	ce 01       	movw	r24, r28
     da2:	8b 5b       	subi	r24, 0xBB	; 187
     da4:	9f 4f       	sbci	r25, 0xFF	; 255
     da6:	fc 01       	movw	r30, r24
     da8:	80 81       	ld	r24, Z
     daa:	91 81       	ldd	r25, Z+1	; 0x01
     dac:	01 97       	sbiw	r24, 0x01	; 1
     dae:	f1 f7       	brne	.-4      	; 0xdac <updateLights+0x364>
     db0:	9e 01       	movw	r18, r28
     db2:	2b 5b       	subi	r18, 0xBB	; 187
     db4:	3f 4f       	sbci	r19, 0xFF	; 255
     db6:	f9 01       	movw	r30, r18
     db8:	91 83       	std	Z+1, r25	; 0x01
     dba:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     dbc:	ce 01       	movw	r24, r28
     dbe:	8d 5b       	subi	r24, 0xBD	; 189
     dc0:	9f 4f       	sbci	r25, 0xFF	; 255
     dc2:	9e 01       	movw	r18, r28
     dc4:	2d 5b       	subi	r18, 0xBD	; 189
     dc6:	3f 4f       	sbci	r19, 0xFF	; 255
     dc8:	f9 01       	movw	r30, r18
     dca:	20 81       	ld	r18, Z
     dcc:	31 81       	ldd	r19, Z+1	; 0x01
     dce:	21 50       	subi	r18, 0x01	; 1
     dd0:	31 09       	sbc	r19, r1
     dd2:	fc 01       	movw	r30, r24
     dd4:	31 83       	std	Z+1, r19	; 0x01
     dd6:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dd8:	ce 01       	movw	r24, r28
     dda:	8d 5b       	subi	r24, 0xBD	; 189
     ddc:	9f 4f       	sbci	r25, 0xFF	; 255
     dde:	fc 01       	movw	r30, r24
     de0:	80 81       	ld	r24, Z
     de2:	91 81       	ldd	r25, Z+1	; 0x01
     de4:	89 2b       	or	r24, r25
     de6:	a1 f6       	brne	.-88     	; 0xd90 <updateLights+0x348>
     de8:	2b c0       	rjmp	.+86     	; 0xe40 <updateLights+0x3f8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dea:	8e 01       	movw	r16, r28
     dec:	0d 5b       	subi	r16, 0xBD	; 189
     dee:	1f 4f       	sbci	r17, 0xFF	; 255
     df0:	ce 01       	movw	r24, r28
     df2:	cf 96       	adiw	r24, 0x3f	; 63
     df4:	fc 01       	movw	r30, r24
     df6:	60 81       	ld	r22, Z
     df8:	71 81       	ldd	r23, Z+1	; 0x01
     dfa:	82 81       	ldd	r24, Z+2	; 0x02
     dfc:	93 81       	ldd	r25, Z+3	; 0x03
     dfe:	0e 94 a7 12 	call	0x254e	; 0x254e <__fixunssfsi>
     e02:	dc 01       	movw	r26, r24
     e04:	cb 01       	movw	r24, r22
     e06:	f8 01       	movw	r30, r16
     e08:	91 83       	std	Z+1, r25	; 0x01
     e0a:	80 83       	st	Z, r24
     e0c:	ce 01       	movw	r24, r28
     e0e:	89 5b       	subi	r24, 0xB9	; 185
     e10:	9f 4f       	sbci	r25, 0xFF	; 255
     e12:	9e 01       	movw	r18, r28
     e14:	2d 5b       	subi	r18, 0xBD	; 189
     e16:	3f 4f       	sbci	r19, 0xFF	; 255
     e18:	f9 01       	movw	r30, r18
     e1a:	20 81       	ld	r18, Z
     e1c:	31 81       	ldd	r19, Z+1	; 0x01
     e1e:	fc 01       	movw	r30, r24
     e20:	31 83       	std	Z+1, r19	; 0x01
     e22:	20 83       	st	Z, r18
     e24:	ce 01       	movw	r24, r28
     e26:	89 5b       	subi	r24, 0xB9	; 185
     e28:	9f 4f       	sbci	r25, 0xFF	; 255
     e2a:	fc 01       	movw	r30, r24
     e2c:	80 81       	ld	r24, Z
     e2e:	91 81       	ldd	r25, Z+1	; 0x01
     e30:	01 97       	sbiw	r24, 0x01	; 1
     e32:	f1 f7       	brne	.-4      	; 0xe30 <updateLights+0x3e8>
     e34:	9e 01       	movw	r18, r28
     e36:	29 5b       	subi	r18, 0xB9	; 185
     e38:	3f 4f       	sbci	r19, 0xFF	; 255
     e3a:	f9 01       	movw	r30, r18
     e3c:	91 83       	std	Z+1, r25	; 0x01
     e3e:	80 83       	st	Z, r24
						_delay_ms(1);
					}
					if(sequence[c] == 4){
     e40:	89 81       	ldd	r24, Y+1	; 0x01
     e42:	9a 81       	ldd	r25, Y+2	; 0x02
     e44:	87 51       	subi	r24, 0x17	; 23
     e46:	9e 4f       	sbci	r25, 0xFE	; 254
     e48:	fc 01       	movw	r30, r24
     e4a:	80 81       	ld	r24, Z
     e4c:	84 30       	cpi	r24, 0x04	; 4
     e4e:	09 f0       	breq	.+2      	; 0xe52 <updateLights+0x40a>
						Tick_Fourth();
     e50:	b9 c0       	rjmp	.+370    	; 0xfc4 <updateLights+0x57c>
     e52:	d1 dc       	rcall	.-1630   	; 0x7f6 <Tick_Fourth>
     e54:	80 e0       	ldi	r24, 0x00	; 0
     e56:	90 e0       	ldi	r25, 0x00	; 0
     e58:	a0 e8       	ldi	r26, 0x80	; 128
     e5a:	bf e3       	ldi	r27, 0x3F	; 63
     e5c:	8b 87       	std	Y+11, r24	; 0x0b
     e5e:	9c 87       	std	Y+12, r25	; 0x0c
     e60:	ad 87       	std	Y+13, r26	; 0x0d
     e62:	be 87       	std	Y+14, r27	; 0x0e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     e64:	8e 01       	movw	r16, r28
     e66:	07 5b       	subi	r16, 0xB7	; 183
     e68:	1f 4f       	sbci	r17, 0xFF	; 255
     e6a:	20 e0       	ldi	r18, 0x00	; 0
     e6c:	30 e0       	ldi	r19, 0x00	; 0
     e6e:	4a e7       	ldi	r20, 0x7A	; 122
     e70:	53 e4       	ldi	r21, 0x43	; 67
     e72:	6b 85       	ldd	r22, Y+11	; 0x0b
     e74:	7c 85       	ldd	r23, Y+12	; 0x0c
     e76:	8d 85       	ldd	r24, Y+13	; 0x0d
     e78:	9e 85       	ldd	r25, Y+14	; 0x0e
     e7a:	0e 94 24 13 	call	0x2648	; 0x2648 <__mulsf3>
     e7e:	dc 01       	movw	r26, r24
     e80:	cb 01       	movw	r24, r22
     e82:	f8 01       	movw	r30, r16
     e84:	80 83       	st	Z, r24
     e86:	91 83       	std	Z+1, r25	; 0x01
     e88:	a2 83       	std	Z+2, r26	; 0x02
     e8a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     e8c:	ce 01       	movw	r24, r28
     e8e:	87 5b       	subi	r24, 0xB7	; 183
     e90:	9f 4f       	sbci	r25, 0xFF	; 255
     e92:	20 e0       	ldi	r18, 0x00	; 0
     e94:	30 e0       	ldi	r19, 0x00	; 0
     e96:	40 e8       	ldi	r20, 0x80	; 128
     e98:	5f e3       	ldi	r21, 0x3F	; 63
     e9a:	fc 01       	movw	r30, r24
     e9c:	60 81       	ld	r22, Z
     e9e:	71 81       	ldd	r23, Z+1	; 0x01
     ea0:	82 81       	ldd	r24, Z+2	; 0x02
     ea2:	93 81       	ldd	r25, Z+3	; 0x03
     ea4:	0e 94 a3 12 	call	0x2546	; 0x2546 <__cmpsf2>
     ea8:	88 23       	and	r24, r24
     eaa:	4c f4       	brge	.+18     	; 0xebe <updateLights+0x476>
		__ticks = 1;
     eac:	ce 01       	movw	r24, r28
     eae:	83 5b       	subi	r24, 0xB3	; 179
     eb0:	9f 4f       	sbci	r25, 0xFF	; 255
     eb2:	21 e0       	ldi	r18, 0x01	; 1
     eb4:	30 e0       	ldi	r19, 0x00	; 0
     eb6:	fc 01       	movw	r30, r24
     eb8:	31 83       	std	Z+1, r19	; 0x01
     eba:	20 83       	st	Z, r18
     ebc:	69 c0       	rjmp	.+210    	; 0xf90 <updateLights+0x548>
	else if (__tmp > 65535)
     ebe:	ce 01       	movw	r24, r28
     ec0:	87 5b       	subi	r24, 0xB7	; 183
     ec2:	9f 4f       	sbci	r25, 0xFF	; 255
     ec4:	20 e0       	ldi	r18, 0x00	; 0
     ec6:	3f ef       	ldi	r19, 0xFF	; 255
     ec8:	4f e7       	ldi	r20, 0x7F	; 127
     eca:	57 e4       	ldi	r21, 0x47	; 71
     ecc:	fc 01       	movw	r30, r24
     ece:	60 81       	ld	r22, Z
     ed0:	71 81       	ldd	r23, Z+1	; 0x01
     ed2:	82 81       	ldd	r24, Z+2	; 0x02
     ed4:	93 81       	ldd	r25, Z+3	; 0x03
     ed6:	0e 94 20 13 	call	0x2640	; 0x2640 <__gesf2>
     eda:	18 16       	cp	r1, r24
     edc:	0c f0       	brlt	.+2      	; 0xee0 <updateLights+0x498>
     ede:	46 c0       	rjmp	.+140    	; 0xf6c <updateLights+0x524>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     ee0:	20 e0       	ldi	r18, 0x00	; 0
     ee2:	30 e0       	ldi	r19, 0x00	; 0
     ee4:	40 e2       	ldi	r20, 0x20	; 32
     ee6:	51 e4       	ldi	r21, 0x41	; 65
     ee8:	6b 85       	ldd	r22, Y+11	; 0x0b
     eea:	7c 85       	ldd	r23, Y+12	; 0x0c
     eec:	8d 85       	ldd	r24, Y+13	; 0x0d
     eee:	9e 85       	ldd	r25, Y+14	; 0x0e
     ef0:	0e 94 24 13 	call	0x2648	; 0x2648 <__mulsf3>
     ef4:	dc 01       	movw	r26, r24
     ef6:	cb 01       	movw	r24, r22
     ef8:	8e 01       	movw	r16, r28
     efa:	03 5b       	subi	r16, 0xB3	; 179
     efc:	1f 4f       	sbci	r17, 0xFF	; 255
     efe:	bc 01       	movw	r22, r24
     f00:	cd 01       	movw	r24, r26
     f02:	0e 94 a7 12 	call	0x254e	; 0x254e <__fixunssfsi>
     f06:	dc 01       	movw	r26, r24
     f08:	cb 01       	movw	r24, r22
     f0a:	f8 01       	movw	r30, r16
     f0c:	91 83       	std	Z+1, r25	; 0x01
     f0e:	80 83       	st	Z, r24
     f10:	24 c0       	rjmp	.+72     	; 0xf5a <updateLights+0x512>
     f12:	ce 01       	movw	r24, r28
     f14:	81 5b       	subi	r24, 0xB1	; 177
     f16:	9f 4f       	sbci	r25, 0xFF	; 255
     f18:	29 e1       	ldi	r18, 0x19	; 25
     f1a:	30 e0       	ldi	r19, 0x00	; 0
     f1c:	fc 01       	movw	r30, r24
     f1e:	31 83       	std	Z+1, r19	; 0x01
     f20:	20 83       	st	Z, r18
     f22:	ce 01       	movw	r24, r28
     f24:	81 5b       	subi	r24, 0xB1	; 177
     f26:	9f 4f       	sbci	r25, 0xFF	; 255
     f28:	fc 01       	movw	r30, r24
     f2a:	80 81       	ld	r24, Z
     f2c:	91 81       	ldd	r25, Z+1	; 0x01
     f2e:	01 97       	sbiw	r24, 0x01	; 1
     f30:	f1 f7       	brne	.-4      	; 0xf2e <updateLights+0x4e6>
     f32:	9e 01       	movw	r18, r28
     f34:	21 5b       	subi	r18, 0xB1	; 177
     f36:	3f 4f       	sbci	r19, 0xFF	; 255
     f38:	f9 01       	movw	r30, r18
     f3a:	91 83       	std	Z+1, r25	; 0x01
     f3c:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f3e:	ce 01       	movw	r24, r28
     f40:	83 5b       	subi	r24, 0xB3	; 179
     f42:	9f 4f       	sbci	r25, 0xFF	; 255
     f44:	9e 01       	movw	r18, r28
     f46:	23 5b       	subi	r18, 0xB3	; 179
     f48:	3f 4f       	sbci	r19, 0xFF	; 255
     f4a:	f9 01       	movw	r30, r18
     f4c:	20 81       	ld	r18, Z
     f4e:	31 81       	ldd	r19, Z+1	; 0x01
     f50:	21 50       	subi	r18, 0x01	; 1
     f52:	31 09       	sbc	r19, r1
     f54:	fc 01       	movw	r30, r24
     f56:	31 83       	std	Z+1, r19	; 0x01
     f58:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f5a:	ce 01       	movw	r24, r28
     f5c:	83 5b       	subi	r24, 0xB3	; 179
     f5e:	9f 4f       	sbci	r25, 0xFF	; 255
     f60:	fc 01       	movw	r30, r24
     f62:	80 81       	ld	r24, Z
     f64:	91 81       	ldd	r25, Z+1	; 0x01
     f66:	89 2b       	or	r24, r25
     f68:	a1 f6       	brne	.-88     	; 0xf12 <updateLights+0x4ca>
     f6a:	2c c0       	rjmp	.+88     	; 0xfc4 <updateLights+0x57c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f6c:	8e 01       	movw	r16, r28
     f6e:	03 5b       	subi	r16, 0xB3	; 179
     f70:	1f 4f       	sbci	r17, 0xFF	; 255
     f72:	ce 01       	movw	r24, r28
     f74:	87 5b       	subi	r24, 0xB7	; 183
     f76:	9f 4f       	sbci	r25, 0xFF	; 255
     f78:	fc 01       	movw	r30, r24
     f7a:	60 81       	ld	r22, Z
     f7c:	71 81       	ldd	r23, Z+1	; 0x01
     f7e:	82 81       	ldd	r24, Z+2	; 0x02
     f80:	93 81       	ldd	r25, Z+3	; 0x03
     f82:	0e 94 a7 12 	call	0x254e	; 0x254e <__fixunssfsi>
     f86:	dc 01       	movw	r26, r24
     f88:	cb 01       	movw	r24, r22
     f8a:	f8 01       	movw	r30, r16
     f8c:	91 83       	std	Z+1, r25	; 0x01
     f8e:	80 83       	st	Z, r24
     f90:	ce 01       	movw	r24, r28
     f92:	8f 5a       	subi	r24, 0xAF	; 175
     f94:	9f 4f       	sbci	r25, 0xFF	; 255
     f96:	9e 01       	movw	r18, r28
     f98:	23 5b       	subi	r18, 0xB3	; 179
     f9a:	3f 4f       	sbci	r19, 0xFF	; 255
     f9c:	f9 01       	movw	r30, r18
     f9e:	20 81       	ld	r18, Z
     fa0:	31 81       	ldd	r19, Z+1	; 0x01
     fa2:	fc 01       	movw	r30, r24
     fa4:	31 83       	std	Z+1, r19	; 0x01
     fa6:	20 83       	st	Z, r18
     fa8:	ce 01       	movw	r24, r28
     faa:	8f 5a       	subi	r24, 0xAF	; 175
     fac:	9f 4f       	sbci	r25, 0xFF	; 255
     fae:	fc 01       	movw	r30, r24
     fb0:	80 81       	ld	r24, Z
     fb2:	91 81       	ldd	r25, Z+1	; 0x01
     fb4:	01 97       	sbiw	r24, 0x01	; 1
     fb6:	f1 f7       	brne	.-4      	; 0xfb4 <updateLights+0x56c>
     fb8:	9e 01       	movw	r18, r28
     fba:	2f 5a       	subi	r18, 0xAF	; 175
     fbc:	3f 4f       	sbci	r19, 0xFF	; 255
     fbe:	f9 01       	movw	r30, r18
     fc0:	91 83       	std	Z+1, r25	; 0x01
     fc2:	80 83       	st	Z, r24
						_delay_ms(1);
					}
					if(sequence[c] == 5){
     fc4:	89 81       	ldd	r24, Y+1	; 0x01
     fc6:	9a 81       	ldd	r25, Y+2	; 0x02
     fc8:	87 51       	subi	r24, 0x17	; 23
     fca:	9e 4f       	sbci	r25, 0xFE	; 254
     fcc:	fc 01       	movw	r30, r24
     fce:	80 81       	ld	r24, Z
     fd0:	85 30       	cpi	r24, 0x05	; 5
     fd2:	09 f0       	breq	.+2      	; 0xfd6 <updateLights+0x58e>
						Tick_Fifth();
     fd4:	b9 c0       	rjmp	.+370    	; 0x1148 <updateLights+0x700>
     fd6:	7e dc       	rcall	.-1796   	; 0x8d4 <Tick_Fifth>
     fd8:	80 e0       	ldi	r24, 0x00	; 0
     fda:	90 e0       	ldi	r25, 0x00	; 0
     fdc:	a0 e8       	ldi	r26, 0x80	; 128
     fde:	bf e3       	ldi	r27, 0x3F	; 63
     fe0:	8f 87       	std	Y+15, r24	; 0x0f
     fe2:	98 8b       	std	Y+16, r25	; 0x10
     fe4:	a9 8b       	std	Y+17, r26	; 0x11
     fe6:	ba 8b       	std	Y+18, r27	; 0x12

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
     fe8:	8e 01       	movw	r16, r28
     fea:	0d 5a       	subi	r16, 0xAD	; 173
     fec:	1f 4f       	sbci	r17, 0xFF	; 255
     fee:	20 e0       	ldi	r18, 0x00	; 0
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	4a e7       	ldi	r20, 0x7A	; 122
     ff4:	53 e4       	ldi	r21, 0x43	; 67
     ff6:	6f 85       	ldd	r22, Y+15	; 0x0f
     ff8:	78 89       	ldd	r23, Y+16	; 0x10
     ffa:	89 89       	ldd	r24, Y+17	; 0x11
     ffc:	9a 89       	ldd	r25, Y+18	; 0x12
     ffe:	0e 94 24 13 	call	0x2648	; 0x2648 <__mulsf3>
    1002:	dc 01       	movw	r26, r24
    1004:	cb 01       	movw	r24, r22
    1006:	f8 01       	movw	r30, r16
    1008:	80 83       	st	Z, r24
    100a:	91 83       	std	Z+1, r25	; 0x01
    100c:	a2 83       	std	Z+2, r26	; 0x02
    100e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1010:	ce 01       	movw	r24, r28
    1012:	8d 5a       	subi	r24, 0xAD	; 173
    1014:	9f 4f       	sbci	r25, 0xFF	; 255
    1016:	20 e0       	ldi	r18, 0x00	; 0
    1018:	30 e0       	ldi	r19, 0x00	; 0
    101a:	40 e8       	ldi	r20, 0x80	; 128
    101c:	5f e3       	ldi	r21, 0x3F	; 63
    101e:	fc 01       	movw	r30, r24
    1020:	60 81       	ld	r22, Z
    1022:	71 81       	ldd	r23, Z+1	; 0x01
    1024:	82 81       	ldd	r24, Z+2	; 0x02
    1026:	93 81       	ldd	r25, Z+3	; 0x03
    1028:	0e 94 a3 12 	call	0x2546	; 0x2546 <__cmpsf2>
    102c:	88 23       	and	r24, r24
    102e:	4c f4       	brge	.+18     	; 0x1042 <updateLights+0x5fa>
		__ticks = 1;
    1030:	ce 01       	movw	r24, r28
    1032:	89 5a       	subi	r24, 0xA9	; 169
    1034:	9f 4f       	sbci	r25, 0xFF	; 255
    1036:	21 e0       	ldi	r18, 0x01	; 1
    1038:	30 e0       	ldi	r19, 0x00	; 0
    103a:	fc 01       	movw	r30, r24
    103c:	31 83       	std	Z+1, r19	; 0x01
    103e:	20 83       	st	Z, r18
    1040:	69 c0       	rjmp	.+210    	; 0x1114 <updateLights+0x6cc>
	else if (__tmp > 65535)
    1042:	ce 01       	movw	r24, r28
    1044:	8d 5a       	subi	r24, 0xAD	; 173
    1046:	9f 4f       	sbci	r25, 0xFF	; 255
    1048:	20 e0       	ldi	r18, 0x00	; 0
    104a:	3f ef       	ldi	r19, 0xFF	; 255
    104c:	4f e7       	ldi	r20, 0x7F	; 127
    104e:	57 e4       	ldi	r21, 0x47	; 71
    1050:	fc 01       	movw	r30, r24
    1052:	60 81       	ld	r22, Z
    1054:	71 81       	ldd	r23, Z+1	; 0x01
    1056:	82 81       	ldd	r24, Z+2	; 0x02
    1058:	93 81       	ldd	r25, Z+3	; 0x03
    105a:	0e 94 20 13 	call	0x2640	; 0x2640 <__gesf2>
    105e:	18 16       	cp	r1, r24
    1060:	0c f0       	brlt	.+2      	; 0x1064 <updateLights+0x61c>
    1062:	46 c0       	rjmp	.+140    	; 0x10f0 <updateLights+0x6a8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1064:	20 e0       	ldi	r18, 0x00	; 0
    1066:	30 e0       	ldi	r19, 0x00	; 0
    1068:	40 e2       	ldi	r20, 0x20	; 32
    106a:	51 e4       	ldi	r21, 0x41	; 65
    106c:	6f 85       	ldd	r22, Y+15	; 0x0f
    106e:	78 89       	ldd	r23, Y+16	; 0x10
    1070:	89 89       	ldd	r24, Y+17	; 0x11
    1072:	9a 89       	ldd	r25, Y+18	; 0x12
    1074:	0e 94 24 13 	call	0x2648	; 0x2648 <__mulsf3>
    1078:	dc 01       	movw	r26, r24
    107a:	cb 01       	movw	r24, r22
    107c:	8e 01       	movw	r16, r28
    107e:	09 5a       	subi	r16, 0xA9	; 169
    1080:	1f 4f       	sbci	r17, 0xFF	; 255
    1082:	bc 01       	movw	r22, r24
    1084:	cd 01       	movw	r24, r26
    1086:	0e 94 a7 12 	call	0x254e	; 0x254e <__fixunssfsi>
    108a:	dc 01       	movw	r26, r24
    108c:	cb 01       	movw	r24, r22
    108e:	f8 01       	movw	r30, r16
    1090:	91 83       	std	Z+1, r25	; 0x01
    1092:	80 83       	st	Z, r24
    1094:	24 c0       	rjmp	.+72     	; 0x10de <updateLights+0x696>
    1096:	ce 01       	movw	r24, r28
    1098:	87 5a       	subi	r24, 0xA7	; 167
    109a:	9f 4f       	sbci	r25, 0xFF	; 255
    109c:	29 e1       	ldi	r18, 0x19	; 25
    109e:	30 e0       	ldi	r19, 0x00	; 0
    10a0:	fc 01       	movw	r30, r24
    10a2:	31 83       	std	Z+1, r19	; 0x01
    10a4:	20 83       	st	Z, r18
    10a6:	ce 01       	movw	r24, r28
    10a8:	87 5a       	subi	r24, 0xA7	; 167
    10aa:	9f 4f       	sbci	r25, 0xFF	; 255
    10ac:	fc 01       	movw	r30, r24
    10ae:	80 81       	ld	r24, Z
    10b0:	91 81       	ldd	r25, Z+1	; 0x01
    10b2:	01 97       	sbiw	r24, 0x01	; 1
    10b4:	f1 f7       	brne	.-4      	; 0x10b2 <updateLights+0x66a>
    10b6:	9e 01       	movw	r18, r28
    10b8:	27 5a       	subi	r18, 0xA7	; 167
    10ba:	3f 4f       	sbci	r19, 0xFF	; 255
    10bc:	f9 01       	movw	r30, r18
    10be:	91 83       	std	Z+1, r25	; 0x01
    10c0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    10c2:	ce 01       	movw	r24, r28
    10c4:	89 5a       	subi	r24, 0xA9	; 169
    10c6:	9f 4f       	sbci	r25, 0xFF	; 255
    10c8:	9e 01       	movw	r18, r28
    10ca:	29 5a       	subi	r18, 0xA9	; 169
    10cc:	3f 4f       	sbci	r19, 0xFF	; 255
    10ce:	f9 01       	movw	r30, r18
    10d0:	20 81       	ld	r18, Z
    10d2:	31 81       	ldd	r19, Z+1	; 0x01
    10d4:	21 50       	subi	r18, 0x01	; 1
    10d6:	31 09       	sbc	r19, r1
    10d8:	fc 01       	movw	r30, r24
    10da:	31 83       	std	Z+1, r19	; 0x01
    10dc:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    10de:	ce 01       	movw	r24, r28
    10e0:	89 5a       	subi	r24, 0xA9	; 169
    10e2:	9f 4f       	sbci	r25, 0xFF	; 255
    10e4:	fc 01       	movw	r30, r24
    10e6:	80 81       	ld	r24, Z
    10e8:	91 81       	ldd	r25, Z+1	; 0x01
    10ea:	89 2b       	or	r24, r25
    10ec:	a1 f6       	brne	.-88     	; 0x1096 <updateLights+0x64e>
    10ee:	2c c0       	rjmp	.+88     	; 0x1148 <updateLights+0x700>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    10f0:	8e 01       	movw	r16, r28
    10f2:	09 5a       	subi	r16, 0xA9	; 169
    10f4:	1f 4f       	sbci	r17, 0xFF	; 255
    10f6:	ce 01       	movw	r24, r28
    10f8:	8d 5a       	subi	r24, 0xAD	; 173
    10fa:	9f 4f       	sbci	r25, 0xFF	; 255
    10fc:	fc 01       	movw	r30, r24
    10fe:	60 81       	ld	r22, Z
    1100:	71 81       	ldd	r23, Z+1	; 0x01
    1102:	82 81       	ldd	r24, Z+2	; 0x02
    1104:	93 81       	ldd	r25, Z+3	; 0x03
    1106:	0e 94 a7 12 	call	0x254e	; 0x254e <__fixunssfsi>
    110a:	dc 01       	movw	r26, r24
    110c:	cb 01       	movw	r24, r22
    110e:	f8 01       	movw	r30, r16
    1110:	91 83       	std	Z+1, r25	; 0x01
    1112:	80 83       	st	Z, r24
    1114:	ce 01       	movw	r24, r28
    1116:	85 5a       	subi	r24, 0xA5	; 165
    1118:	9f 4f       	sbci	r25, 0xFF	; 255
    111a:	9e 01       	movw	r18, r28
    111c:	29 5a       	subi	r18, 0xA9	; 169
    111e:	3f 4f       	sbci	r19, 0xFF	; 255
    1120:	f9 01       	movw	r30, r18
    1122:	20 81       	ld	r18, Z
    1124:	31 81       	ldd	r19, Z+1	; 0x01
    1126:	fc 01       	movw	r30, r24
    1128:	31 83       	std	Z+1, r19	; 0x01
    112a:	20 83       	st	Z, r18
    112c:	ce 01       	movw	r24, r28
    112e:	85 5a       	subi	r24, 0xA5	; 165
    1130:	9f 4f       	sbci	r25, 0xFF	; 255
    1132:	fc 01       	movw	r30, r24
    1134:	80 81       	ld	r24, Z
    1136:	91 81       	ldd	r25, Z+1	; 0x01
    1138:	01 97       	sbiw	r24, 0x01	; 1
    113a:	f1 f7       	brne	.-4      	; 0x1138 <updateLights+0x6f0>
    113c:	9e 01       	movw	r18, r28
    113e:	25 5a       	subi	r18, 0xA5	; 165
    1140:	3f 4f       	sbci	r19, 0xFF	; 255
    1142:	f9 01       	movw	r30, r18
    1144:	91 83       	std	Z+1, r25	; 0x01
    1146:	80 83       	st	Z, r24
						_delay_ms(1);
					}
				}
				
			if(time[c] == light_count - 1 || time[c] == light_count - 2 || time[c] == light_count - 3 || time[c] == light_count - 4 || time[c] == light_count - 5 || time[c] == light_count - 6 || time[c] == light_count - 7 || time[c] == light_count - 8){
    1148:	89 81       	ldd	r24, Y+1	; 0x01
    114a:	9a 81       	ldd	r25, Y+2	; 0x02
    114c:	81 53       	subi	r24, 0x31	; 49
    114e:	9d 4f       	sbci	r25, 0xFD	; 253
    1150:	fc 01       	movw	r30, r24
    1152:	80 81       	ld	r24, Z
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <light_count>
    115c:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <light_count+0x1>
    1160:	01 97       	sbiw	r24, 0x01	; 1
    1162:	28 17       	cp	r18, r24
    1164:	39 07       	cpc	r19, r25
    1166:	09 f4       	brne	.+2      	; 0x116a <updateLights+0x722>
    1168:	74 c0       	rjmp	.+232    	; 0x1252 <updateLights+0x80a>
    116a:	89 81       	ldd	r24, Y+1	; 0x01
    116c:	9a 81       	ldd	r25, Y+2	; 0x02
    116e:	81 53       	subi	r24, 0x31	; 49
    1170:	9d 4f       	sbci	r25, 0xFD	; 253
    1172:	fc 01       	movw	r30, r24
    1174:	80 81       	ld	r24, Z
    1176:	28 2f       	mov	r18, r24
    1178:	30 e0       	ldi	r19, 0x00	; 0
    117a:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <light_count>
    117e:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <light_count+0x1>
    1182:	02 97       	sbiw	r24, 0x02	; 2
    1184:	28 17       	cp	r18, r24
    1186:	39 07       	cpc	r19, r25
    1188:	09 f4       	brne	.+2      	; 0x118c <updateLights+0x744>
    118a:	63 c0       	rjmp	.+198    	; 0x1252 <updateLights+0x80a>
    118c:	89 81       	ldd	r24, Y+1	; 0x01
    118e:	9a 81       	ldd	r25, Y+2	; 0x02
    1190:	81 53       	subi	r24, 0x31	; 49
    1192:	9d 4f       	sbci	r25, 0xFD	; 253
    1194:	fc 01       	movw	r30, r24
    1196:	80 81       	ld	r24, Z
    1198:	28 2f       	mov	r18, r24
    119a:	30 e0       	ldi	r19, 0x00	; 0
    119c:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <light_count>
    11a0:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <light_count+0x1>
    11a4:	03 97       	sbiw	r24, 0x03	; 3
    11a6:	28 17       	cp	r18, r24
    11a8:	39 07       	cpc	r19, r25
    11aa:	09 f4       	brne	.+2      	; 0x11ae <updateLights+0x766>
    11ac:	52 c0       	rjmp	.+164    	; 0x1252 <updateLights+0x80a>
    11ae:	89 81       	ldd	r24, Y+1	; 0x01
    11b0:	9a 81       	ldd	r25, Y+2	; 0x02
    11b2:	81 53       	subi	r24, 0x31	; 49
    11b4:	9d 4f       	sbci	r25, 0xFD	; 253
    11b6:	fc 01       	movw	r30, r24
    11b8:	80 81       	ld	r24, Z
    11ba:	28 2f       	mov	r18, r24
    11bc:	30 e0       	ldi	r19, 0x00	; 0
    11be:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <light_count>
    11c2:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <light_count+0x1>
    11c6:	04 97       	sbiw	r24, 0x04	; 4
    11c8:	28 17       	cp	r18, r24
    11ca:	39 07       	cpc	r19, r25
    11cc:	09 f4       	brne	.+2      	; 0x11d0 <updateLights+0x788>
    11ce:	41 c0       	rjmp	.+130    	; 0x1252 <updateLights+0x80a>
    11d0:	89 81       	ldd	r24, Y+1	; 0x01
    11d2:	9a 81       	ldd	r25, Y+2	; 0x02
    11d4:	81 53       	subi	r24, 0x31	; 49
    11d6:	9d 4f       	sbci	r25, 0xFD	; 253
    11d8:	fc 01       	movw	r30, r24
    11da:	80 81       	ld	r24, Z
    11dc:	28 2f       	mov	r18, r24
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <light_count>
    11e4:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <light_count+0x1>
    11e8:	05 97       	sbiw	r24, 0x05	; 5
    11ea:	28 17       	cp	r18, r24
    11ec:	39 07       	cpc	r19, r25
    11ee:	89 f1       	breq	.+98     	; 0x1252 <updateLights+0x80a>
    11f0:	89 81       	ldd	r24, Y+1	; 0x01
    11f2:	9a 81       	ldd	r25, Y+2	; 0x02
    11f4:	81 53       	subi	r24, 0x31	; 49
    11f6:	9d 4f       	sbci	r25, 0xFD	; 253
    11f8:	fc 01       	movw	r30, r24
    11fa:	80 81       	ld	r24, Z
    11fc:	28 2f       	mov	r18, r24
    11fe:	30 e0       	ldi	r19, 0x00	; 0
    1200:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <light_count>
    1204:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <light_count+0x1>
    1208:	06 97       	sbiw	r24, 0x06	; 6
    120a:	28 17       	cp	r18, r24
    120c:	39 07       	cpc	r19, r25
    120e:	09 f1       	breq	.+66     	; 0x1252 <updateLights+0x80a>
    1210:	89 81       	ldd	r24, Y+1	; 0x01
    1212:	9a 81       	ldd	r25, Y+2	; 0x02
    1214:	81 53       	subi	r24, 0x31	; 49
    1216:	9d 4f       	sbci	r25, 0xFD	; 253
    1218:	fc 01       	movw	r30, r24
    121a:	80 81       	ld	r24, Z
    121c:	28 2f       	mov	r18, r24
    121e:	30 e0       	ldi	r19, 0x00	; 0
    1220:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <light_count>
    1224:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <light_count+0x1>
    1228:	07 97       	sbiw	r24, 0x07	; 7
    122a:	28 17       	cp	r18, r24
    122c:	39 07       	cpc	r19, r25
    122e:	89 f0       	breq	.+34     	; 0x1252 <updateLights+0x80a>
    1230:	89 81       	ldd	r24, Y+1	; 0x01
    1232:	9a 81       	ldd	r25, Y+2	; 0x02
    1234:	81 53       	subi	r24, 0x31	; 49
    1236:	9d 4f       	sbci	r25, 0xFD	; 253
    1238:	fc 01       	movw	r30, r24
    123a:	80 81       	ld	r24, Z
    123c:	28 2f       	mov	r18, r24
    123e:	30 e0       	ldi	r19, 0x00	; 0
    1240:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <light_count>
    1244:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <light_count+0x1>
    1248:	08 97       	sbiw	r24, 0x08	; 8
    124a:	28 17       	cp	r18, r24
    124c:	39 07       	cpc	r19, r25
    124e:	09 f0       	breq	.+2      	; 0x1252 <updateLights+0x80a>
    1250:	0e c4       	rjmp	.+2076   	; 0x1a6e <updateLights+0x1026>
				if(sequence[c] == 1){
    1252:	89 81       	ldd	r24, Y+1	; 0x01
    1254:	9a 81       	ldd	r25, Y+2	; 0x02
    1256:	87 51       	subi	r24, 0x17	; 23
    1258:	9e 4f       	sbci	r25, 0xFE	; 254
    125a:	fc 01       	movw	r30, r24
    125c:	80 81       	ld	r24, Z
    125e:	81 30       	cpi	r24, 0x01	; 1
    1260:	09 f0       	breq	.+2      	; 0x1264 <updateLights+0x81c>
    1262:	ca c0       	rjmp	.+404    	; 0x13f8 <updateLights+0x9b0>
					if(did1 == 1){
    1264:	80 91 d1 01 	lds	r24, 0x01D1	; 0x8001d1 <did1>
    1268:	81 30       	cpi	r24, 0x01	; 1
    126a:	11 f4       	brne	.+4      	; 0x1270 <updateLights+0x828>
						did1 = 0;
    126c:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <did1>
					}
					if(done1 != 1){
    1270:	80 91 d6 01 	lds	r24, 0x01D6	; 0x8001d6 <done1>
    1274:	81 30       	cpi	r24, 0x01	; 1
    1276:	09 f4       	brne	.+2      	; 0x127a <updateLights+0x832>
						Tick_First();
    1278:	b9 c0       	rjmp	.+370    	; 0x13ec <updateLights+0x9a4>
    127a:	6e d9       	rcall	.-3364   	; 0x558 <Tick_First>
    127c:	80 e0       	ldi	r24, 0x00	; 0
    127e:	90 e0       	ldi	r25, 0x00	; 0
    1280:	a0 e8       	ldi	r26, 0x80	; 128
    1282:	bf e3       	ldi	r27, 0x3F	; 63
    1284:	8b 8b       	std	Y+19, r24	; 0x13
    1286:	9c 8b       	std	Y+20, r25	; 0x14
    1288:	ad 8b       	std	Y+21, r26	; 0x15
    128a:	be 8b       	std	Y+22, r27	; 0x16

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    128c:	8e 01       	movw	r16, r28
    128e:	03 5a       	subi	r16, 0xA3	; 163
    1290:	1f 4f       	sbci	r17, 0xFF	; 255
    1292:	20 e0       	ldi	r18, 0x00	; 0
    1294:	30 e0       	ldi	r19, 0x00	; 0
    1296:	4a e7       	ldi	r20, 0x7A	; 122
    1298:	53 e4       	ldi	r21, 0x43	; 67
    129a:	6b 89       	ldd	r22, Y+19	; 0x13
    129c:	7c 89       	ldd	r23, Y+20	; 0x14
    129e:	8d 89       	ldd	r24, Y+21	; 0x15
    12a0:	9e 89       	ldd	r25, Y+22	; 0x16
    12a2:	0e 94 24 13 	call	0x2648	; 0x2648 <__mulsf3>
    12a6:	dc 01       	movw	r26, r24
    12a8:	cb 01       	movw	r24, r22
    12aa:	f8 01       	movw	r30, r16
    12ac:	80 83       	st	Z, r24
    12ae:	91 83       	std	Z+1, r25	; 0x01
    12b0:	a2 83       	std	Z+2, r26	; 0x02
    12b2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    12b4:	ce 01       	movw	r24, r28
    12b6:	83 5a       	subi	r24, 0xA3	; 163
    12b8:	9f 4f       	sbci	r25, 0xFF	; 255
    12ba:	20 e0       	ldi	r18, 0x00	; 0
    12bc:	30 e0       	ldi	r19, 0x00	; 0
    12be:	40 e8       	ldi	r20, 0x80	; 128
    12c0:	5f e3       	ldi	r21, 0x3F	; 63
    12c2:	fc 01       	movw	r30, r24
    12c4:	60 81       	ld	r22, Z
    12c6:	71 81       	ldd	r23, Z+1	; 0x01
    12c8:	82 81       	ldd	r24, Z+2	; 0x02
    12ca:	93 81       	ldd	r25, Z+3	; 0x03
    12cc:	0e 94 a3 12 	call	0x2546	; 0x2546 <__cmpsf2>
    12d0:	88 23       	and	r24, r24
    12d2:	4c f4       	brge	.+18     	; 0x12e6 <updateLights+0x89e>
		__ticks = 1;
    12d4:	ce 01       	movw	r24, r28
    12d6:	8f 59       	subi	r24, 0x9F	; 159
    12d8:	9f 4f       	sbci	r25, 0xFF	; 255
    12da:	21 e0       	ldi	r18, 0x01	; 1
    12dc:	30 e0       	ldi	r19, 0x00	; 0
    12de:	fc 01       	movw	r30, r24
    12e0:	31 83       	std	Z+1, r19	; 0x01
    12e2:	20 83       	st	Z, r18
    12e4:	69 c0       	rjmp	.+210    	; 0x13b8 <updateLights+0x970>
	else if (__tmp > 65535)
    12e6:	ce 01       	movw	r24, r28
    12e8:	83 5a       	subi	r24, 0xA3	; 163
    12ea:	9f 4f       	sbci	r25, 0xFF	; 255
    12ec:	20 e0       	ldi	r18, 0x00	; 0
    12ee:	3f ef       	ldi	r19, 0xFF	; 255
    12f0:	4f e7       	ldi	r20, 0x7F	; 127
    12f2:	57 e4       	ldi	r21, 0x47	; 71
    12f4:	fc 01       	movw	r30, r24
    12f6:	60 81       	ld	r22, Z
    12f8:	71 81       	ldd	r23, Z+1	; 0x01
    12fa:	82 81       	ldd	r24, Z+2	; 0x02
    12fc:	93 81       	ldd	r25, Z+3	; 0x03
    12fe:	0e 94 20 13 	call	0x2640	; 0x2640 <__gesf2>
    1302:	18 16       	cp	r1, r24
    1304:	0c f0       	brlt	.+2      	; 0x1308 <updateLights+0x8c0>
    1306:	46 c0       	rjmp	.+140    	; 0x1394 <updateLights+0x94c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1308:	20 e0       	ldi	r18, 0x00	; 0
    130a:	30 e0       	ldi	r19, 0x00	; 0
    130c:	40 e2       	ldi	r20, 0x20	; 32
    130e:	51 e4       	ldi	r21, 0x41	; 65
    1310:	6b 89       	ldd	r22, Y+19	; 0x13
    1312:	7c 89       	ldd	r23, Y+20	; 0x14
    1314:	8d 89       	ldd	r24, Y+21	; 0x15
    1316:	9e 89       	ldd	r25, Y+22	; 0x16
    1318:	0e 94 24 13 	call	0x2648	; 0x2648 <__mulsf3>
    131c:	dc 01       	movw	r26, r24
    131e:	cb 01       	movw	r24, r22
    1320:	8e 01       	movw	r16, r28
    1322:	0f 59       	subi	r16, 0x9F	; 159
    1324:	1f 4f       	sbci	r17, 0xFF	; 255
    1326:	bc 01       	movw	r22, r24
    1328:	cd 01       	movw	r24, r26
    132a:	0e 94 a7 12 	call	0x254e	; 0x254e <__fixunssfsi>
    132e:	dc 01       	movw	r26, r24
    1330:	cb 01       	movw	r24, r22
    1332:	f8 01       	movw	r30, r16
    1334:	91 83       	std	Z+1, r25	; 0x01
    1336:	80 83       	st	Z, r24
    1338:	24 c0       	rjmp	.+72     	; 0x1382 <updateLights+0x93a>
    133a:	ce 01       	movw	r24, r28
    133c:	8d 59       	subi	r24, 0x9D	; 157
    133e:	9f 4f       	sbci	r25, 0xFF	; 255
    1340:	29 e1       	ldi	r18, 0x19	; 25
    1342:	30 e0       	ldi	r19, 0x00	; 0
    1344:	fc 01       	movw	r30, r24
    1346:	31 83       	std	Z+1, r19	; 0x01
    1348:	20 83       	st	Z, r18
    134a:	ce 01       	movw	r24, r28
    134c:	8d 59       	subi	r24, 0x9D	; 157
    134e:	9f 4f       	sbci	r25, 0xFF	; 255
    1350:	fc 01       	movw	r30, r24
    1352:	80 81       	ld	r24, Z
    1354:	91 81       	ldd	r25, Z+1	; 0x01
    1356:	01 97       	sbiw	r24, 0x01	; 1
    1358:	f1 f7       	brne	.-4      	; 0x1356 <updateLights+0x90e>
    135a:	9e 01       	movw	r18, r28
    135c:	2d 59       	subi	r18, 0x9D	; 157
    135e:	3f 4f       	sbci	r19, 0xFF	; 255
    1360:	f9 01       	movw	r30, r18
    1362:	91 83       	std	Z+1, r25	; 0x01
    1364:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1366:	ce 01       	movw	r24, r28
    1368:	8f 59       	subi	r24, 0x9F	; 159
    136a:	9f 4f       	sbci	r25, 0xFF	; 255
    136c:	9e 01       	movw	r18, r28
    136e:	2f 59       	subi	r18, 0x9F	; 159
    1370:	3f 4f       	sbci	r19, 0xFF	; 255
    1372:	f9 01       	movw	r30, r18
    1374:	20 81       	ld	r18, Z
    1376:	31 81       	ldd	r19, Z+1	; 0x01
    1378:	21 50       	subi	r18, 0x01	; 1
    137a:	31 09       	sbc	r19, r1
    137c:	fc 01       	movw	r30, r24
    137e:	31 83       	std	Z+1, r19	; 0x01
    1380:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1382:	ce 01       	movw	r24, r28
    1384:	8f 59       	subi	r24, 0x9F	; 159
    1386:	9f 4f       	sbci	r25, 0xFF	; 255
    1388:	fc 01       	movw	r30, r24
    138a:	80 81       	ld	r24, Z
    138c:	91 81       	ldd	r25, Z+1	; 0x01
    138e:	89 2b       	or	r24, r25
    1390:	a1 f6       	brne	.-88     	; 0x133a <updateLights+0x8f2>
    1392:	2c c0       	rjmp	.+88     	; 0x13ec <updateLights+0x9a4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1394:	8e 01       	movw	r16, r28
    1396:	0f 59       	subi	r16, 0x9F	; 159
    1398:	1f 4f       	sbci	r17, 0xFF	; 255
    139a:	ce 01       	movw	r24, r28
    139c:	83 5a       	subi	r24, 0xA3	; 163
    139e:	9f 4f       	sbci	r25, 0xFF	; 255
    13a0:	fc 01       	movw	r30, r24
    13a2:	60 81       	ld	r22, Z
    13a4:	71 81       	ldd	r23, Z+1	; 0x01
    13a6:	82 81       	ldd	r24, Z+2	; 0x02
    13a8:	93 81       	ldd	r25, Z+3	; 0x03
    13aa:	0e 94 a7 12 	call	0x254e	; 0x254e <__fixunssfsi>
    13ae:	dc 01       	movw	r26, r24
    13b0:	cb 01       	movw	r24, r22
    13b2:	f8 01       	movw	r30, r16
    13b4:	91 83       	std	Z+1, r25	; 0x01
    13b6:	80 83       	st	Z, r24
    13b8:	ce 01       	movw	r24, r28
    13ba:	8b 59       	subi	r24, 0x9B	; 155
    13bc:	9f 4f       	sbci	r25, 0xFF	; 255
    13be:	9e 01       	movw	r18, r28
    13c0:	2f 59       	subi	r18, 0x9F	; 159
    13c2:	3f 4f       	sbci	r19, 0xFF	; 255
    13c4:	f9 01       	movw	r30, r18
    13c6:	20 81       	ld	r18, Z
    13c8:	31 81       	ldd	r19, Z+1	; 0x01
    13ca:	fc 01       	movw	r30, r24
    13cc:	31 83       	std	Z+1, r19	; 0x01
    13ce:	20 83       	st	Z, r18
    13d0:	ce 01       	movw	r24, r28
    13d2:	8b 59       	subi	r24, 0x9B	; 155
    13d4:	9f 4f       	sbci	r25, 0xFF	; 255
    13d6:	fc 01       	movw	r30, r24
    13d8:	80 81       	ld	r24, Z
    13da:	91 81       	ldd	r25, Z+1	; 0x01
    13dc:	01 97       	sbiw	r24, 0x01	; 1
    13de:	f1 f7       	brne	.-4      	; 0x13dc <updateLights+0x994>
    13e0:	9e 01       	movw	r18, r28
    13e2:	2b 59       	subi	r18, 0x9B	; 155
    13e4:	3f 4f       	sbci	r19, 0xFF	; 255
    13e6:	f9 01       	movw	r30, r18
    13e8:	91 83       	std	Z+1, r25	; 0x01
    13ea:	80 83       	st	Z, r24
						_delay_ms(1);
					}
					did1 = 1;
    13ec:	81 e0       	ldi	r24, 0x01	; 1
    13ee:	80 93 d1 01 	sts	0x01D1, r24	; 0x8001d1 <did1>
					done1 = 1;
    13f2:	81 e0       	ldi	r24, 0x01	; 1
    13f4:	80 93 d6 01 	sts	0x01D6, r24	; 0x8001d6 <done1>
				}
				if(sequence[c] == 2){
    13f8:	89 81       	ldd	r24, Y+1	; 0x01
    13fa:	9a 81       	ldd	r25, Y+2	; 0x02
    13fc:	87 51       	subi	r24, 0x17	; 23
    13fe:	9e 4f       	sbci	r25, 0xFE	; 254
    1400:	fc 01       	movw	r30, r24
    1402:	80 81       	ld	r24, Z
    1404:	82 30       	cpi	r24, 0x02	; 2
    1406:	09 f0       	breq	.+2      	; 0x140a <updateLights+0x9c2>
    1408:	c9 c0       	rjmp	.+402    	; 0x159c <updateLights+0xb54>
					if(did2 == 1){
    140a:	80 91 d2 01 	lds	r24, 0x01D2	; 0x8001d2 <did2>
    140e:	81 30       	cpi	r24, 0x01	; 1
    1410:	11 f4       	brne	.+4      	; 0x1416 <updateLights+0x9ce>
						did2 = 0;
    1412:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <did2>
					}
					if(done2 != 1){
    1416:	80 91 d7 01 	lds	r24, 0x01D7	; 0x8001d7 <done2>
    141a:	81 30       	cpi	r24, 0x01	; 1
    141c:	09 f4       	brne	.+2      	; 0x1420 <updateLights+0x9d8>
						Tick_Second();
    141e:	b8 c0       	rjmp	.+368    	; 0x1590 <updateLights+0xb48>
    1420:	14 d9       	rcall	.-3544   	; 0x64a <Tick_Second>
    1422:	80 e0       	ldi	r24, 0x00	; 0
    1424:	90 e0       	ldi	r25, 0x00	; 0
    1426:	a0 e8       	ldi	r26, 0x80	; 128
    1428:	bf e3       	ldi	r27, 0x3F	; 63
    142a:	8f 8b       	std	Y+23, r24	; 0x17
    142c:	98 8f       	std	Y+24, r25	; 0x18
    142e:	a9 8f       	std	Y+25, r26	; 0x19
    1430:	ba 8f       	std	Y+26, r27	; 0x1a

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1432:	8e 01       	movw	r16, r28
    1434:	09 59       	subi	r16, 0x99	; 153
    1436:	1f 4f       	sbci	r17, 0xFF	; 255
    1438:	20 e0       	ldi	r18, 0x00	; 0
    143a:	30 e0       	ldi	r19, 0x00	; 0
    143c:	4a e7       	ldi	r20, 0x7A	; 122
    143e:	53 e4       	ldi	r21, 0x43	; 67
    1440:	6f 89       	ldd	r22, Y+23	; 0x17
    1442:	78 8d       	ldd	r23, Y+24	; 0x18
    1444:	89 8d       	ldd	r24, Y+25	; 0x19
    1446:	9a 8d       	ldd	r25, Y+26	; 0x1a
    1448:	0e 94 24 13 	call	0x2648	; 0x2648 <__mulsf3>
    144c:	dc 01       	movw	r26, r24
    144e:	cb 01       	movw	r24, r22
    1450:	f8 01       	movw	r30, r16
    1452:	80 83       	st	Z, r24
    1454:	91 83       	std	Z+1, r25	; 0x01
    1456:	a2 83       	std	Z+2, r26	; 0x02
    1458:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    145a:	ce 01       	movw	r24, r28
    145c:	89 59       	subi	r24, 0x99	; 153
    145e:	9f 4f       	sbci	r25, 0xFF	; 255
    1460:	20 e0       	ldi	r18, 0x00	; 0
    1462:	30 e0       	ldi	r19, 0x00	; 0
    1464:	40 e8       	ldi	r20, 0x80	; 128
    1466:	5f e3       	ldi	r21, 0x3F	; 63
    1468:	fc 01       	movw	r30, r24
    146a:	60 81       	ld	r22, Z
    146c:	71 81       	ldd	r23, Z+1	; 0x01
    146e:	82 81       	ldd	r24, Z+2	; 0x02
    1470:	93 81       	ldd	r25, Z+3	; 0x03
    1472:	0e 94 a3 12 	call	0x2546	; 0x2546 <__cmpsf2>
    1476:	88 23       	and	r24, r24
    1478:	4c f4       	brge	.+18     	; 0x148c <updateLights+0xa44>
		__ticks = 1;
    147a:	ce 01       	movw	r24, r28
    147c:	85 59       	subi	r24, 0x95	; 149
    147e:	9f 4f       	sbci	r25, 0xFF	; 255
    1480:	21 e0       	ldi	r18, 0x01	; 1
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	fc 01       	movw	r30, r24
    1486:	31 83       	std	Z+1, r19	; 0x01
    1488:	20 83       	st	Z, r18
    148a:	68 c0       	rjmp	.+208    	; 0x155c <updateLights+0xb14>
	else if (__tmp > 65535)
    148c:	ce 01       	movw	r24, r28
    148e:	89 59       	subi	r24, 0x99	; 153
    1490:	9f 4f       	sbci	r25, 0xFF	; 255
    1492:	20 e0       	ldi	r18, 0x00	; 0
    1494:	3f ef       	ldi	r19, 0xFF	; 255
    1496:	4f e7       	ldi	r20, 0x7F	; 127
    1498:	57 e4       	ldi	r21, 0x47	; 71
    149a:	fc 01       	movw	r30, r24
    149c:	60 81       	ld	r22, Z
    149e:	71 81       	ldd	r23, Z+1	; 0x01
    14a0:	82 81       	ldd	r24, Z+2	; 0x02
    14a2:	93 81       	ldd	r25, Z+3	; 0x03
    14a4:	0e 94 20 13 	call	0x2640	; 0x2640 <__gesf2>
    14a8:	18 16       	cp	r1, r24
    14aa:	0c f0       	brlt	.+2      	; 0x14ae <updateLights+0xa66>
    14ac:	46 c0       	rjmp	.+140    	; 0x153a <updateLights+0xaf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14ae:	20 e0       	ldi	r18, 0x00	; 0
    14b0:	30 e0       	ldi	r19, 0x00	; 0
    14b2:	40 e2       	ldi	r20, 0x20	; 32
    14b4:	51 e4       	ldi	r21, 0x41	; 65
    14b6:	6f 89       	ldd	r22, Y+23	; 0x17
    14b8:	78 8d       	ldd	r23, Y+24	; 0x18
    14ba:	89 8d       	ldd	r24, Y+25	; 0x19
    14bc:	9a 8d       	ldd	r25, Y+26	; 0x1a
    14be:	0e 94 24 13 	call	0x2648	; 0x2648 <__mulsf3>
    14c2:	dc 01       	movw	r26, r24
    14c4:	cb 01       	movw	r24, r22
    14c6:	8e 01       	movw	r16, r28
    14c8:	05 59       	subi	r16, 0x95	; 149
    14ca:	1f 4f       	sbci	r17, 0xFF	; 255
    14cc:	bc 01       	movw	r22, r24
    14ce:	cd 01       	movw	r24, r26
    14d0:	0e 94 a7 12 	call	0x254e	; 0x254e <__fixunssfsi>
    14d4:	dc 01       	movw	r26, r24
    14d6:	cb 01       	movw	r24, r22
    14d8:	f8 01       	movw	r30, r16
    14da:	91 83       	std	Z+1, r25	; 0x01
    14dc:	80 83       	st	Z, r24
    14de:	24 c0       	rjmp	.+72     	; 0x1528 <updateLights+0xae0>
    14e0:	ce 01       	movw	r24, r28
    14e2:	83 59       	subi	r24, 0x93	; 147
    14e4:	9f 4f       	sbci	r25, 0xFF	; 255
    14e6:	29 e1       	ldi	r18, 0x19	; 25
    14e8:	30 e0       	ldi	r19, 0x00	; 0
    14ea:	fc 01       	movw	r30, r24
    14ec:	31 83       	std	Z+1, r19	; 0x01
    14ee:	20 83       	st	Z, r18
    14f0:	ce 01       	movw	r24, r28
    14f2:	83 59       	subi	r24, 0x93	; 147
    14f4:	9f 4f       	sbci	r25, 0xFF	; 255
    14f6:	fc 01       	movw	r30, r24
    14f8:	80 81       	ld	r24, Z
    14fa:	91 81       	ldd	r25, Z+1	; 0x01
    14fc:	01 97       	sbiw	r24, 0x01	; 1
    14fe:	f1 f7       	brne	.-4      	; 0x14fc <updateLights+0xab4>
    1500:	9e 01       	movw	r18, r28
    1502:	23 59       	subi	r18, 0x93	; 147
    1504:	3f 4f       	sbci	r19, 0xFF	; 255
    1506:	f9 01       	movw	r30, r18
    1508:	91 83       	std	Z+1, r25	; 0x01
    150a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    150c:	ce 01       	movw	r24, r28
    150e:	85 59       	subi	r24, 0x95	; 149
    1510:	9f 4f       	sbci	r25, 0xFF	; 255
    1512:	9e 01       	movw	r18, r28
    1514:	25 59       	subi	r18, 0x95	; 149
    1516:	3f 4f       	sbci	r19, 0xFF	; 255
    1518:	f9 01       	movw	r30, r18
    151a:	20 81       	ld	r18, Z
    151c:	31 81       	ldd	r19, Z+1	; 0x01
    151e:	21 50       	subi	r18, 0x01	; 1
    1520:	31 09       	sbc	r19, r1
    1522:	fc 01       	movw	r30, r24
    1524:	31 83       	std	Z+1, r19	; 0x01
    1526:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1528:	ce 01       	movw	r24, r28
    152a:	85 59       	subi	r24, 0x95	; 149
    152c:	9f 4f       	sbci	r25, 0xFF	; 255
    152e:	fc 01       	movw	r30, r24
    1530:	80 81       	ld	r24, Z
    1532:	91 81       	ldd	r25, Z+1	; 0x01
    1534:	89 2b       	or	r24, r25
    1536:	a1 f6       	brne	.-88     	; 0x14e0 <updateLights+0xa98>
    1538:	2b c0       	rjmp	.+86     	; 0x1590 <updateLights+0xb48>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    153a:	8e 01       	movw	r16, r28
    153c:	05 59       	subi	r16, 0x95	; 149
    153e:	1f 4f       	sbci	r17, 0xFF	; 255
    1540:	ce 01       	movw	r24, r28
    1542:	89 59       	subi	r24, 0x99	; 153
    1544:	9f 4f       	sbci	r25, 0xFF	; 255
    1546:	fc 01       	movw	r30, r24
    1548:	60 81       	ld	r22, Z
    154a:	71 81       	ldd	r23, Z+1	; 0x01
    154c:	82 81       	ldd	r24, Z+2	; 0x02
    154e:	93 81       	ldd	r25, Z+3	; 0x03
    1550:	fe d7       	rcall	.+4092   	; 0x254e <__fixunssfsi>
    1552:	dc 01       	movw	r26, r24
    1554:	cb 01       	movw	r24, r22
    1556:	f8 01       	movw	r30, r16
    1558:	91 83       	std	Z+1, r25	; 0x01
    155a:	80 83       	st	Z, r24
    155c:	ce 01       	movw	r24, r28
    155e:	81 59       	subi	r24, 0x91	; 145
    1560:	9f 4f       	sbci	r25, 0xFF	; 255
    1562:	9e 01       	movw	r18, r28
    1564:	25 59       	subi	r18, 0x95	; 149
    1566:	3f 4f       	sbci	r19, 0xFF	; 255
    1568:	f9 01       	movw	r30, r18
    156a:	20 81       	ld	r18, Z
    156c:	31 81       	ldd	r19, Z+1	; 0x01
    156e:	fc 01       	movw	r30, r24
    1570:	31 83       	std	Z+1, r19	; 0x01
    1572:	20 83       	st	Z, r18
    1574:	ce 01       	movw	r24, r28
    1576:	81 59       	subi	r24, 0x91	; 145
    1578:	9f 4f       	sbci	r25, 0xFF	; 255
    157a:	fc 01       	movw	r30, r24
    157c:	80 81       	ld	r24, Z
    157e:	91 81       	ldd	r25, Z+1	; 0x01
    1580:	01 97       	sbiw	r24, 0x01	; 1
    1582:	f1 f7       	brne	.-4      	; 0x1580 <updateLights+0xb38>
    1584:	9e 01       	movw	r18, r28
    1586:	21 59       	subi	r18, 0x91	; 145
    1588:	3f 4f       	sbci	r19, 0xFF	; 255
    158a:	f9 01       	movw	r30, r18
    158c:	91 83       	std	Z+1, r25	; 0x01
    158e:	80 83       	st	Z, r24
						_delay_ms(1);
					}
					did2 = 1;
    1590:	81 e0       	ldi	r24, 0x01	; 1
    1592:	80 93 d2 01 	sts	0x01D2, r24	; 0x8001d2 <did2>
					done2 = 1;
    1596:	81 e0       	ldi	r24, 0x01	; 1
    1598:	80 93 d7 01 	sts	0x01D7, r24	; 0x8001d7 <done2>
				}
				if(sequence[c] == 3){
    159c:	89 81       	ldd	r24, Y+1	; 0x01
    159e:	9a 81       	ldd	r25, Y+2	; 0x02
    15a0:	87 51       	subi	r24, 0x17	; 23
    15a2:	9e 4f       	sbci	r25, 0xFE	; 254
    15a4:	fc 01       	movw	r30, r24
    15a6:	80 81       	ld	r24, Z
    15a8:	83 30       	cpi	r24, 0x03	; 3
    15aa:	09 f0       	breq	.+2      	; 0x15ae <updateLights+0xb66>
    15ac:	c5 c0       	rjmp	.+394    	; 0x1738 <updateLights+0xcf0>
					if(did3 == 1){
    15ae:	80 91 d3 01 	lds	r24, 0x01D3	; 0x8001d3 <did3>
    15b2:	81 30       	cpi	r24, 0x01	; 1
						did3 = 0;
    15b4:	11 f4       	brne	.+4      	; 0x15ba <updateLights+0xb72>
    15b6:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <did3>
					}
					if(done3 != 1){
    15ba:	80 91 d8 01 	lds	r24, 0x01D8	; 0x8001d8 <done3>
    15be:	81 30       	cpi	r24, 0x01	; 1
    15c0:	09 f4       	brne	.+2      	; 0x15c4 <updateLights+0xb7c>
						Tick_Third();
    15c2:	b4 c0       	rjmp	.+360    	; 0x172c <updateLights+0xce4>
    15c4:	b1 d8       	rcall	.-3742   	; 0x728 <Tick_Third>
    15c6:	80 e0       	ldi	r24, 0x00	; 0
    15c8:	90 e0       	ldi	r25, 0x00	; 0
    15ca:	a0 e8       	ldi	r26, 0x80	; 128
    15cc:	bf e3       	ldi	r27, 0x3F	; 63
    15ce:	8b 8f       	std	Y+27, r24	; 0x1b
    15d0:	9c 8f       	std	Y+28, r25	; 0x1c
    15d2:	ad 8f       	std	Y+29, r26	; 0x1d
    15d4:	be 8f       	std	Y+30, r27	; 0x1e

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    15d6:	8e 01       	movw	r16, r28
    15d8:	0f 58       	subi	r16, 0x8F	; 143
    15da:	1f 4f       	sbci	r17, 0xFF	; 255
    15dc:	20 e0       	ldi	r18, 0x00	; 0
    15de:	30 e0       	ldi	r19, 0x00	; 0
    15e0:	4a e7       	ldi	r20, 0x7A	; 122
    15e2:	53 e4       	ldi	r21, 0x43	; 67
    15e4:	6b 8d       	ldd	r22, Y+27	; 0x1b
    15e6:	7c 8d       	ldd	r23, Y+28	; 0x1c
    15e8:	8d 8d       	ldd	r24, Y+29	; 0x1d
    15ea:	9e 8d       	ldd	r25, Y+30	; 0x1e
    15ec:	0e 94 24 13 	call	0x2648	; 0x2648 <__mulsf3>
    15f0:	dc 01       	movw	r26, r24
    15f2:	cb 01       	movw	r24, r22
    15f4:	f8 01       	movw	r30, r16
    15f6:	80 83       	st	Z, r24
    15f8:	91 83       	std	Z+1, r25	; 0x01
    15fa:	a2 83       	std	Z+2, r26	; 0x02
    15fc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    15fe:	ce 01       	movw	r24, r28
    1600:	8f 58       	subi	r24, 0x8F	; 143
    1602:	9f 4f       	sbci	r25, 0xFF	; 255
    1604:	20 e0       	ldi	r18, 0x00	; 0
    1606:	30 e0       	ldi	r19, 0x00	; 0
    1608:	40 e8       	ldi	r20, 0x80	; 128
    160a:	5f e3       	ldi	r21, 0x3F	; 63
    160c:	fc 01       	movw	r30, r24
    160e:	60 81       	ld	r22, Z
    1610:	71 81       	ldd	r23, Z+1	; 0x01
    1612:	82 81       	ldd	r24, Z+2	; 0x02
    1614:	93 81       	ldd	r25, Z+3	; 0x03
    1616:	97 d7       	rcall	.+3886   	; 0x2546 <__cmpsf2>
    1618:	88 23       	and	r24, r24
    161a:	4c f4       	brge	.+18     	; 0x162e <updateLights+0xbe6>
		__ticks = 1;
    161c:	ce 01       	movw	r24, r28
    161e:	8b 58       	subi	r24, 0x8B	; 139
    1620:	9f 4f       	sbci	r25, 0xFF	; 255
    1622:	21 e0       	ldi	r18, 0x01	; 1
    1624:	30 e0       	ldi	r19, 0x00	; 0
    1626:	fc 01       	movw	r30, r24
    1628:	31 83       	std	Z+1, r19	; 0x01
    162a:	20 83       	st	Z, r18
    162c:	65 c0       	rjmp	.+202    	; 0x16f8 <updateLights+0xcb0>
	else if (__tmp > 65535)
    162e:	ce 01       	movw	r24, r28
    1630:	8f 58       	subi	r24, 0x8F	; 143
    1632:	9f 4f       	sbci	r25, 0xFF	; 255
    1634:	20 e0       	ldi	r18, 0x00	; 0
    1636:	3f ef       	ldi	r19, 0xFF	; 255
    1638:	4f e7       	ldi	r20, 0x7F	; 127
    163a:	57 e4       	ldi	r21, 0x47	; 71
    163c:	fc 01       	movw	r30, r24
    163e:	60 81       	ld	r22, Z
    1640:	71 81       	ldd	r23, Z+1	; 0x01
    1642:	82 81       	ldd	r24, Z+2	; 0x02
    1644:	93 81       	ldd	r25, Z+3	; 0x03
    1646:	fc d7       	rcall	.+4088   	; 0x2640 <__gesf2>
    1648:	18 16       	cp	r1, r24
    164a:	0c f0       	brlt	.+2      	; 0x164e <updateLights+0xc06>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    164c:	44 c0       	rjmp	.+136    	; 0x16d6 <updateLights+0xc8e>
    164e:	20 e0       	ldi	r18, 0x00	; 0
    1650:	30 e0       	ldi	r19, 0x00	; 0
    1652:	40 e2       	ldi	r20, 0x20	; 32
    1654:	51 e4       	ldi	r21, 0x41	; 65
    1656:	6b 8d       	ldd	r22, Y+27	; 0x1b
    1658:	7c 8d       	ldd	r23, Y+28	; 0x1c
    165a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    165c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    165e:	f4 d7       	rcall	.+4072   	; 0x2648 <__mulsf3>
    1660:	dc 01       	movw	r26, r24
    1662:	cb 01       	movw	r24, r22
    1664:	8e 01       	movw	r16, r28
    1666:	0b 58       	subi	r16, 0x8B	; 139
    1668:	1f 4f       	sbci	r17, 0xFF	; 255
    166a:	bc 01       	movw	r22, r24
    166c:	cd 01       	movw	r24, r26
    166e:	6f d7       	rcall	.+3806   	; 0x254e <__fixunssfsi>
    1670:	dc 01       	movw	r26, r24
    1672:	cb 01       	movw	r24, r22
    1674:	f8 01       	movw	r30, r16
    1676:	91 83       	std	Z+1, r25	; 0x01
    1678:	80 83       	st	Z, r24
    167a:	24 c0       	rjmp	.+72     	; 0x16c4 <updateLights+0xc7c>
    167c:	ce 01       	movw	r24, r28
    167e:	89 58       	subi	r24, 0x89	; 137
    1680:	9f 4f       	sbci	r25, 0xFF	; 255
    1682:	29 e1       	ldi	r18, 0x19	; 25
    1684:	30 e0       	ldi	r19, 0x00	; 0
    1686:	fc 01       	movw	r30, r24
    1688:	31 83       	std	Z+1, r19	; 0x01
    168a:	20 83       	st	Z, r18
    168c:	ce 01       	movw	r24, r28
    168e:	89 58       	subi	r24, 0x89	; 137
    1690:	9f 4f       	sbci	r25, 0xFF	; 255
    1692:	fc 01       	movw	r30, r24
    1694:	80 81       	ld	r24, Z
    1696:	91 81       	ldd	r25, Z+1	; 0x01
    1698:	01 97       	sbiw	r24, 0x01	; 1
    169a:	f1 f7       	brne	.-4      	; 0x1698 <updateLights+0xc50>
    169c:	9e 01       	movw	r18, r28
    169e:	29 58       	subi	r18, 0x89	; 137
    16a0:	3f 4f       	sbci	r19, 0xFF	; 255
    16a2:	f9 01       	movw	r30, r18
    16a4:	91 83       	std	Z+1, r25	; 0x01
    16a6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    16a8:	ce 01       	movw	r24, r28
    16aa:	8b 58       	subi	r24, 0x8B	; 139
    16ac:	9f 4f       	sbci	r25, 0xFF	; 255
    16ae:	9e 01       	movw	r18, r28
    16b0:	2b 58       	subi	r18, 0x8B	; 139
    16b2:	3f 4f       	sbci	r19, 0xFF	; 255
    16b4:	f9 01       	movw	r30, r18
    16b6:	20 81       	ld	r18, Z
    16b8:	31 81       	ldd	r19, Z+1	; 0x01
    16ba:	21 50       	subi	r18, 0x01	; 1
    16bc:	31 09       	sbc	r19, r1
    16be:	fc 01       	movw	r30, r24
    16c0:	31 83       	std	Z+1, r19	; 0x01
    16c2:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    16c4:	ce 01       	movw	r24, r28
    16c6:	8b 58       	subi	r24, 0x8B	; 139
    16c8:	9f 4f       	sbci	r25, 0xFF	; 255
    16ca:	fc 01       	movw	r30, r24
    16cc:	80 81       	ld	r24, Z
    16ce:	91 81       	ldd	r25, Z+1	; 0x01
    16d0:	89 2b       	or	r24, r25
    16d2:	a1 f6       	brne	.-88     	; 0x167c <updateLights+0xc34>
    16d4:	2b c0       	rjmp	.+86     	; 0x172c <updateLights+0xce4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    16d6:	8e 01       	movw	r16, r28
    16d8:	0b 58       	subi	r16, 0x8B	; 139
    16da:	1f 4f       	sbci	r17, 0xFF	; 255
    16dc:	ce 01       	movw	r24, r28
    16de:	8f 58       	subi	r24, 0x8F	; 143
    16e0:	9f 4f       	sbci	r25, 0xFF	; 255
    16e2:	fc 01       	movw	r30, r24
    16e4:	60 81       	ld	r22, Z
    16e6:	71 81       	ldd	r23, Z+1	; 0x01
    16e8:	82 81       	ldd	r24, Z+2	; 0x02
    16ea:	93 81       	ldd	r25, Z+3	; 0x03
    16ec:	30 d7       	rcall	.+3680   	; 0x254e <__fixunssfsi>
    16ee:	dc 01       	movw	r26, r24
    16f0:	cb 01       	movw	r24, r22
    16f2:	f8 01       	movw	r30, r16
    16f4:	91 83       	std	Z+1, r25	; 0x01
    16f6:	80 83       	st	Z, r24
    16f8:	ce 01       	movw	r24, r28
    16fa:	87 58       	subi	r24, 0x87	; 135
    16fc:	9f 4f       	sbci	r25, 0xFF	; 255
    16fe:	9e 01       	movw	r18, r28
    1700:	2b 58       	subi	r18, 0x8B	; 139
    1702:	3f 4f       	sbci	r19, 0xFF	; 255
    1704:	f9 01       	movw	r30, r18
    1706:	20 81       	ld	r18, Z
    1708:	31 81       	ldd	r19, Z+1	; 0x01
    170a:	fc 01       	movw	r30, r24
    170c:	31 83       	std	Z+1, r19	; 0x01
    170e:	20 83       	st	Z, r18
    1710:	ce 01       	movw	r24, r28
    1712:	87 58       	subi	r24, 0x87	; 135
    1714:	9f 4f       	sbci	r25, 0xFF	; 255
    1716:	fc 01       	movw	r30, r24
    1718:	80 81       	ld	r24, Z
    171a:	91 81       	ldd	r25, Z+1	; 0x01
    171c:	01 97       	sbiw	r24, 0x01	; 1
    171e:	f1 f7       	brne	.-4      	; 0x171c <updateLights+0xcd4>
    1720:	9e 01       	movw	r18, r28
    1722:	27 58       	subi	r18, 0x87	; 135
    1724:	3f 4f       	sbci	r19, 0xFF	; 255
    1726:	f9 01       	movw	r30, r18
    1728:	91 83       	std	Z+1, r25	; 0x01
    172a:	80 83       	st	Z, r24
						_delay_ms(1);
					}
					did3 = 1;
    172c:	81 e0       	ldi	r24, 0x01	; 1
    172e:	80 93 d3 01 	sts	0x01D3, r24	; 0x8001d3 <did3>
					done3 = 1;
    1732:	81 e0       	ldi	r24, 0x01	; 1
    1734:	80 93 d8 01 	sts	0x01D8, r24	; 0x8001d8 <done3>
				}
				if(sequence[c] == 4){
    1738:	89 81       	ldd	r24, Y+1	; 0x01
    173a:	9a 81       	ldd	r25, Y+2	; 0x02
    173c:	87 51       	subi	r24, 0x17	; 23
    173e:	9e 4f       	sbci	r25, 0xFE	; 254
    1740:	fc 01       	movw	r30, r24
    1742:	80 81       	ld	r24, Z
    1744:	84 30       	cpi	r24, 0x04	; 4
    1746:	09 f0       	breq	.+2      	; 0x174a <updateLights+0xd02>
					if(did4 == 1){
    1748:	c4 c0       	rjmp	.+392    	; 0x18d2 <updateLights+0xe8a>
    174a:	80 91 d4 01 	lds	r24, 0x01D4	; 0x8001d4 <did4>
    174e:	81 30       	cpi	r24, 0x01	; 1
						did4 = 0;
    1750:	11 f4       	brne	.+4      	; 0x1756 <updateLights+0xd0e>
    1752:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <did4>
					}
					if(done4 != 1){
    1756:	80 91 d9 01 	lds	r24, 0x01D9	; 0x8001d9 <done4>
    175a:	81 30       	cpi	r24, 0x01	; 1
    175c:	09 f4       	brne	.+2      	; 0x1760 <updateLights+0xd18>
						Tick_Fourth();
    175e:	b3 c0       	rjmp	.+358    	; 0x18c6 <updateLights+0xe7e>
    1760:	4a d8       	rcall	.-3948   	; 0x7f6 <Tick_Fourth>
    1762:	80 e0       	ldi	r24, 0x00	; 0
    1764:	90 e0       	ldi	r25, 0x00	; 0
    1766:	a0 e8       	ldi	r26, 0x80	; 128
    1768:	bf e3       	ldi	r27, 0x3F	; 63
    176a:	8f 8f       	std	Y+31, r24	; 0x1f
    176c:	98 a3       	std	Y+32, r25	; 0x20
    176e:	a9 a3       	std	Y+33, r26	; 0x21

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    1770:	ba a3       	std	Y+34, r27	; 0x22
    1772:	8e 01       	movw	r16, r28
    1774:	05 58       	subi	r16, 0x85	; 133
    1776:	1f 4f       	sbci	r17, 0xFF	; 255
    1778:	20 e0       	ldi	r18, 0x00	; 0
    177a:	30 e0       	ldi	r19, 0x00	; 0
    177c:	4a e7       	ldi	r20, 0x7A	; 122
    177e:	53 e4       	ldi	r21, 0x43	; 67
    1780:	6f 8d       	ldd	r22, Y+31	; 0x1f
    1782:	78 a1       	ldd	r23, Y+32	; 0x20
    1784:	89 a1       	ldd	r24, Y+33	; 0x21
    1786:	9a a1       	ldd	r25, Y+34	; 0x22
    1788:	5f d7       	rcall	.+3774   	; 0x2648 <__mulsf3>
    178a:	dc 01       	movw	r26, r24
    178c:	cb 01       	movw	r24, r22
    178e:	f8 01       	movw	r30, r16
    1790:	80 83       	st	Z, r24
    1792:	91 83       	std	Z+1, r25	; 0x01
    1794:	a2 83       	std	Z+2, r26	; 0x02
	if (__tmp < 1.0)
    1796:	b3 83       	std	Z+3, r27	; 0x03
    1798:	ce 01       	movw	r24, r28
    179a:	85 58       	subi	r24, 0x85	; 133
    179c:	9f 4f       	sbci	r25, 0xFF	; 255
    179e:	20 e0       	ldi	r18, 0x00	; 0
    17a0:	30 e0       	ldi	r19, 0x00	; 0
    17a2:	40 e8       	ldi	r20, 0x80	; 128
    17a4:	5f e3       	ldi	r21, 0x3F	; 63
    17a6:	fc 01       	movw	r30, r24
    17a8:	60 81       	ld	r22, Z
    17aa:	71 81       	ldd	r23, Z+1	; 0x01
    17ac:	82 81       	ldd	r24, Z+2	; 0x02
    17ae:	93 81       	ldd	r25, Z+3	; 0x03
    17b0:	ca d6       	rcall	.+3476   	; 0x2546 <__cmpsf2>
    17b2:	88 23       	and	r24, r24
    17b4:	4c f4       	brge	.+18     	; 0x17c8 <updateLights+0xd80>
		__ticks = 1;
    17b6:	ce 01       	movw	r24, r28
    17b8:	81 58       	subi	r24, 0x81	; 129
    17ba:	9f 4f       	sbci	r25, 0xFF	; 255
    17bc:	21 e0       	ldi	r18, 0x01	; 1
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	fc 01       	movw	r30, r24
    17c2:	31 83       	std	Z+1, r19	; 0x01
    17c4:	20 83       	st	Z, r18
	else if (__tmp > 65535)
    17c6:	65 c0       	rjmp	.+202    	; 0x1892 <updateLights+0xe4a>
    17c8:	ce 01       	movw	r24, r28
    17ca:	85 58       	subi	r24, 0x85	; 133
    17cc:	9f 4f       	sbci	r25, 0xFF	; 255
    17ce:	20 e0       	ldi	r18, 0x00	; 0
    17d0:	3f ef       	ldi	r19, 0xFF	; 255
    17d2:	4f e7       	ldi	r20, 0x7F	; 127
    17d4:	57 e4       	ldi	r21, 0x47	; 71
    17d6:	fc 01       	movw	r30, r24
    17d8:	60 81       	ld	r22, Z
    17da:	71 81       	ldd	r23, Z+1	; 0x01
    17dc:	82 81       	ldd	r24, Z+2	; 0x02
    17de:	93 81       	ldd	r25, Z+3	; 0x03
    17e0:	2f d7       	rcall	.+3678   	; 0x2640 <__gesf2>
    17e2:	18 16       	cp	r1, r24
    17e4:	0c f0       	brlt	.+2      	; 0x17e8 <updateLights+0xda0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17e6:	44 c0       	rjmp	.+136    	; 0x1870 <updateLights+0xe28>
    17e8:	20 e0       	ldi	r18, 0x00	; 0
    17ea:	30 e0       	ldi	r19, 0x00	; 0
    17ec:	40 e2       	ldi	r20, 0x20	; 32
    17ee:	51 e4       	ldi	r21, 0x41	; 65
    17f0:	6f 8d       	ldd	r22, Y+31	; 0x1f
    17f2:	78 a1       	ldd	r23, Y+32	; 0x20
    17f4:	89 a1       	ldd	r24, Y+33	; 0x21
    17f6:	9a a1       	ldd	r25, Y+34	; 0x22
    17f8:	27 d7       	rcall	.+3662   	; 0x2648 <__mulsf3>
    17fa:	dc 01       	movw	r26, r24
    17fc:	cb 01       	movw	r24, r22
    17fe:	8e 01       	movw	r16, r28
    1800:	01 58       	subi	r16, 0x81	; 129
    1802:	1f 4f       	sbci	r17, 0xFF	; 255
    1804:	bc 01       	movw	r22, r24
    1806:	cd 01       	movw	r24, r26
    1808:	a2 d6       	rcall	.+3396   	; 0x254e <__fixunssfsi>
    180a:	dc 01       	movw	r26, r24
    180c:	cb 01       	movw	r24, r22
    180e:	f8 01       	movw	r30, r16
    1810:	91 83       	std	Z+1, r25	; 0x01
    1812:	80 83       	st	Z, r24
    1814:	24 c0       	rjmp	.+72     	; 0x185e <updateLights+0xe16>
    1816:	ce 01       	movw	r24, r28
    1818:	8f 57       	subi	r24, 0x7F	; 127
    181a:	9f 4f       	sbci	r25, 0xFF	; 255
    181c:	29 e1       	ldi	r18, 0x19	; 25
    181e:	30 e0       	ldi	r19, 0x00	; 0
    1820:	fc 01       	movw	r30, r24
    1822:	31 83       	std	Z+1, r19	; 0x01
    1824:	20 83       	st	Z, r18
    1826:	ce 01       	movw	r24, r28
    1828:	8f 57       	subi	r24, 0x7F	; 127
    182a:	9f 4f       	sbci	r25, 0xFF	; 255
    182c:	fc 01       	movw	r30, r24
    182e:	80 81       	ld	r24, Z
    1830:	91 81       	ldd	r25, Z+1	; 0x01
    1832:	01 97       	sbiw	r24, 0x01	; 1
    1834:	f1 f7       	brne	.-4      	; 0x1832 <updateLights+0xdea>
    1836:	9e 01       	movw	r18, r28
    1838:	2f 57       	subi	r18, 0x7F	; 127
    183a:	3f 4f       	sbci	r19, 0xFF	; 255
    183c:	f9 01       	movw	r30, r18
    183e:	91 83       	std	Z+1, r25	; 0x01
    1840:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1842:	ce 01       	movw	r24, r28
    1844:	81 58       	subi	r24, 0x81	; 129
    1846:	9f 4f       	sbci	r25, 0xFF	; 255
    1848:	9e 01       	movw	r18, r28
    184a:	21 58       	subi	r18, 0x81	; 129
    184c:	3f 4f       	sbci	r19, 0xFF	; 255
    184e:	f9 01       	movw	r30, r18
    1850:	20 81       	ld	r18, Z
    1852:	31 81       	ldd	r19, Z+1	; 0x01
    1854:	21 50       	subi	r18, 0x01	; 1
    1856:	31 09       	sbc	r19, r1
    1858:	fc 01       	movw	r30, r24
    185a:	31 83       	std	Z+1, r19	; 0x01
    185c:	20 83       	st	Z, r18
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    185e:	ce 01       	movw	r24, r28
    1860:	81 58       	subi	r24, 0x81	; 129
    1862:	9f 4f       	sbci	r25, 0xFF	; 255
    1864:	fc 01       	movw	r30, r24
    1866:	80 81       	ld	r24, Z
    1868:	91 81       	ldd	r25, Z+1	; 0x01
    186a:	89 2b       	or	r24, r25
    186c:	a1 f6       	brne	.-88     	; 0x1816 <updateLights+0xdce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    186e:	2b c0       	rjmp	.+86     	; 0x18c6 <updateLights+0xe7e>
    1870:	8e 01       	movw	r16, r28
    1872:	01 58       	subi	r16, 0x81	; 129
    1874:	1f 4f       	sbci	r17, 0xFF	; 255
    1876:	ce 01       	movw	r24, r28
    1878:	85 58       	subi	r24, 0x85	; 133
    187a:	9f 4f       	sbci	r25, 0xFF	; 255
    187c:	fc 01       	movw	r30, r24
    187e:	60 81       	ld	r22, Z
    1880:	71 81       	ldd	r23, Z+1	; 0x01
    1882:	82 81       	ldd	r24, Z+2	; 0x02
    1884:	93 81       	ldd	r25, Z+3	; 0x03
    1886:	63 d6       	rcall	.+3270   	; 0x254e <__fixunssfsi>
    1888:	dc 01       	movw	r26, r24
    188a:	cb 01       	movw	r24, r22
    188c:	f8 01       	movw	r30, r16
    188e:	91 83       	std	Z+1, r25	; 0x01
    1890:	80 83       	st	Z, r24
    1892:	ce 01       	movw	r24, r28
    1894:	8d 57       	subi	r24, 0x7D	; 125
    1896:	9f 4f       	sbci	r25, 0xFF	; 255
    1898:	9e 01       	movw	r18, r28
    189a:	21 58       	subi	r18, 0x81	; 129
    189c:	3f 4f       	sbci	r19, 0xFF	; 255
    189e:	f9 01       	movw	r30, r18
    18a0:	20 81       	ld	r18, Z
    18a2:	31 81       	ldd	r19, Z+1	; 0x01
    18a4:	fc 01       	movw	r30, r24
    18a6:	31 83       	std	Z+1, r19	; 0x01
    18a8:	20 83       	st	Z, r18
    18aa:	ce 01       	movw	r24, r28
    18ac:	8d 57       	subi	r24, 0x7D	; 125
    18ae:	9f 4f       	sbci	r25, 0xFF	; 255
    18b0:	fc 01       	movw	r30, r24
    18b2:	80 81       	ld	r24, Z
    18b4:	91 81       	ldd	r25, Z+1	; 0x01
    18b6:	01 97       	sbiw	r24, 0x01	; 1
    18b8:	f1 f7       	brne	.-4      	; 0x18b6 <updateLights+0xe6e>
    18ba:	9e 01       	movw	r18, r28
    18bc:	2d 57       	subi	r18, 0x7D	; 125
    18be:	3f 4f       	sbci	r19, 0xFF	; 255
    18c0:	f9 01       	movw	r30, r18
    18c2:	91 83       	std	Z+1, r25	; 0x01
    18c4:	80 83       	st	Z, r24
						_delay_ms(1);
					}
					did4 = 1;
    18c6:	81 e0       	ldi	r24, 0x01	; 1
    18c8:	80 93 d4 01 	sts	0x01D4, r24	; 0x8001d4 <did4>
					done4 = 1;
    18cc:	81 e0       	ldi	r24, 0x01	; 1
    18ce:	80 93 d9 01 	sts	0x01D9, r24	; 0x8001d9 <done4>
				}
				if(sequence[c] == 5){
    18d2:	89 81       	ldd	r24, Y+1	; 0x01
    18d4:	9a 81       	ldd	r25, Y+2	; 0x02
    18d6:	87 51       	subi	r24, 0x17	; 23
    18d8:	9e 4f       	sbci	r25, 0xFE	; 254
    18da:	fc 01       	movw	r30, r24
    18dc:	80 81       	ld	r24, Z
    18de:	85 30       	cpi	r24, 0x05	; 5
    18e0:	09 f0       	breq	.+2      	; 0x18e4 <updateLights+0xe9c>
    18e2:	c5 c0       	rjmp	.+394    	; 0x1a6e <updateLights+0x1026>
					if(did5 == 1){
    18e4:	80 91 d5 01 	lds	r24, 0x01D5	; 0x8001d5 <did5>
    18e8:	81 30       	cpi	r24, 0x01	; 1
    18ea:	11 f4       	brne	.+4      	; 0x18f0 <updateLights+0xea8>
						did5 = 0;
    18ec:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <did5>
					}
					if(done5 != 1){
    18f0:	80 91 da 01 	lds	r24, 0x01DA	; 0x8001da <done5>
    18f4:	81 30       	cpi	r24, 0x01	; 1
    18f6:	09 f4       	brne	.+2      	; 0x18fa <updateLights+0xeb2>
    18f8:	b4 c0       	rjmp	.+360    	; 0x1a62 <updateLights+0x101a>
						Tick_Fifth();
    18fa:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <Tick_Fifth>
    18fe:	80 e0       	ldi	r24, 0x00	; 0
    1900:	90 e0       	ldi	r25, 0x00	; 0
    1902:	a0 e8       	ldi	r26, 0x80	; 128
    1904:	bf e3       	ldi	r27, 0x3F	; 63
    1906:	8b a3       	std	Y+35, r24	; 0x23
    1908:	9c a3       	std	Y+36, r25	; 0x24
    190a:	ad a3       	std	Y+37, r26	; 0x25

	__builtin_avr_delay_cycles(__ticks_dc);

#else
	uint16_t __ticks;
	__tmp = ((F_CPU) / 4e3) * __ms;
    190c:	be a3       	std	Y+38, r27	; 0x26
    190e:	8e 01       	movw	r16, r28
    1910:	0b 57       	subi	r16, 0x7B	; 123
    1912:	1f 4f       	sbci	r17, 0xFF	; 255
    1914:	20 e0       	ldi	r18, 0x00	; 0
    1916:	30 e0       	ldi	r19, 0x00	; 0
    1918:	4a e7       	ldi	r20, 0x7A	; 122
    191a:	53 e4       	ldi	r21, 0x43	; 67
    191c:	6b a1       	ldd	r22, Y+35	; 0x23
    191e:	7c a1       	ldd	r23, Y+36	; 0x24
    1920:	8d a1       	ldd	r24, Y+37	; 0x25
    1922:	9e a1       	ldd	r25, Y+38	; 0x26
    1924:	91 d6       	rcall	.+3362   	; 0x2648 <__mulsf3>
    1926:	dc 01       	movw	r26, r24
    1928:	cb 01       	movw	r24, r22
    192a:	f8 01       	movw	r30, r16
    192c:	80 83       	st	Z, r24
    192e:	91 83       	std	Z+1, r25	; 0x01
    1930:	a2 83       	std	Z+2, r26	; 0x02
	if (__tmp < 1.0)
    1932:	b3 83       	std	Z+3, r27	; 0x03
    1934:	ce 01       	movw	r24, r28
    1936:	8b 57       	subi	r24, 0x7B	; 123
    1938:	9f 4f       	sbci	r25, 0xFF	; 255
    193a:	20 e0       	ldi	r18, 0x00	; 0
    193c:	30 e0       	ldi	r19, 0x00	; 0
    193e:	40 e8       	ldi	r20, 0x80	; 128
    1940:	5f e3       	ldi	r21, 0x3F	; 63
    1942:	fc 01       	movw	r30, r24
    1944:	60 81       	ld	r22, Z
    1946:	71 81       	ldd	r23, Z+1	; 0x01
    1948:	82 81       	ldd	r24, Z+2	; 0x02
    194a:	93 81       	ldd	r25, Z+3	; 0x03
    194c:	fc d5       	rcall	.+3064   	; 0x2546 <__cmpsf2>
    194e:	88 23       	and	r24, r24
    1950:	4c f4       	brge	.+18     	; 0x1964 <updateLights+0xf1c>
		__ticks = 1;
    1952:	ce 01       	movw	r24, r28
    1954:	87 57       	subi	r24, 0x77	; 119
    1956:	9f 4f       	sbci	r25, 0xFF	; 255
    1958:	21 e0       	ldi	r18, 0x01	; 1
    195a:	30 e0       	ldi	r19, 0x00	; 0
    195c:	fc 01       	movw	r30, r24
    195e:	31 83       	std	Z+1, r19	; 0x01
    1960:	20 83       	st	Z, r18
	else if (__tmp > 65535)
    1962:	65 c0       	rjmp	.+202    	; 0x1a2e <updateLights+0xfe6>
    1964:	ce 01       	movw	r24, r28
    1966:	8b 57       	subi	r24, 0x7B	; 123
    1968:	9f 4f       	sbci	r25, 0xFF	; 255
    196a:	20 e0       	ldi	r18, 0x00	; 0
    196c:	3f ef       	ldi	r19, 0xFF	; 255
    196e:	4f e7       	ldi	r20, 0x7F	; 127
    1970:	57 e4       	ldi	r21, 0x47	; 71
    1972:	fc 01       	movw	r30, r24
    1974:	60 81       	ld	r22, Z
    1976:	71 81       	ldd	r23, Z+1	; 0x01
    1978:	82 81       	ldd	r24, Z+2	; 0x02
    197a:	93 81       	ldd	r25, Z+3	; 0x03
    197c:	61 d6       	rcall	.+3266   	; 0x2640 <__gesf2>
    197e:	18 16       	cp	r1, r24
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1980:	0c f0       	brlt	.+2      	; 0x1984 <updateLights+0xf3c>
    1982:	44 c0       	rjmp	.+136    	; 0x1a0c <updateLights+0xfc4>
    1984:	20 e0       	ldi	r18, 0x00	; 0
    1986:	30 e0       	ldi	r19, 0x00	; 0
    1988:	40 e2       	ldi	r20, 0x20	; 32
    198a:	51 e4       	ldi	r21, 0x41	; 65
    198c:	6b a1       	ldd	r22, Y+35	; 0x23
    198e:	7c a1       	ldd	r23, Y+36	; 0x24
    1990:	8d a1       	ldd	r24, Y+37	; 0x25
    1992:	9e a1       	ldd	r25, Y+38	; 0x26
    1994:	59 d6       	rcall	.+3250   	; 0x2648 <__mulsf3>
    1996:	dc 01       	movw	r26, r24
    1998:	cb 01       	movw	r24, r22
    199a:	8e 01       	movw	r16, r28
    199c:	07 57       	subi	r16, 0x77	; 119
    199e:	1f 4f       	sbci	r17, 0xFF	; 255
    19a0:	bc 01       	movw	r22, r24
    19a2:	cd 01       	movw	r24, r26
    19a4:	d4 d5       	rcall	.+2984   	; 0x254e <__fixunssfsi>
    19a6:	dc 01       	movw	r26, r24
    19a8:	cb 01       	movw	r24, r22
    19aa:	f8 01       	movw	r30, r16
    19ac:	91 83       	std	Z+1, r25	; 0x01
    19ae:	80 83       	st	Z, r24
    19b0:	24 c0       	rjmp	.+72     	; 0x19fa <updateLights+0xfb2>
    19b2:	ce 01       	movw	r24, r28
    19b4:	85 57       	subi	r24, 0x75	; 117
    19b6:	9f 4f       	sbci	r25, 0xFF	; 255
    19b8:	29 e1       	ldi	r18, 0x19	; 25
    19ba:	30 e0       	ldi	r19, 0x00	; 0
    19bc:	fc 01       	movw	r30, r24
    19be:	31 83       	std	Z+1, r19	; 0x01
    19c0:	20 83       	st	Z, r18
    19c2:	ce 01       	movw	r24, r28
    19c4:	85 57       	subi	r24, 0x75	; 117
    19c6:	9f 4f       	sbci	r25, 0xFF	; 255
    19c8:	fc 01       	movw	r30, r24
    19ca:	80 81       	ld	r24, Z
    19cc:	91 81       	ldd	r25, Z+1	; 0x01
    19ce:	01 97       	sbiw	r24, 0x01	; 1
    19d0:	f1 f7       	brne	.-4      	; 0x19ce <updateLights+0xf86>
    19d2:	9e 01       	movw	r18, r28
    19d4:	25 57       	subi	r18, 0x75	; 117
    19d6:	3f 4f       	sbci	r19, 0xFF	; 255
    19d8:	f9 01       	movw	r30, r18
    19da:	91 83       	std	Z+1, r25	; 0x01
    19dc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19de:	ce 01       	movw	r24, r28
    19e0:	87 57       	subi	r24, 0x77	; 119
    19e2:	9f 4f       	sbci	r25, 0xFF	; 255
    19e4:	9e 01       	movw	r18, r28
    19e6:	27 57       	subi	r18, 0x77	; 119
    19e8:	3f 4f       	sbci	r19, 0xFF	; 255
    19ea:	f9 01       	movw	r30, r18
    19ec:	20 81       	ld	r18, Z
    19ee:	31 81       	ldd	r19, Z+1	; 0x01
    19f0:	21 50       	subi	r18, 0x01	; 1
    19f2:	31 09       	sbc	r19, r1
    19f4:	fc 01       	movw	r30, r24
    19f6:	31 83       	std	Z+1, r19	; 0x01
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19f8:	20 83       	st	Z, r18
    19fa:	ce 01       	movw	r24, r28
    19fc:	87 57       	subi	r24, 0x77	; 119
    19fe:	9f 4f       	sbci	r25, 0xFF	; 255
    1a00:	fc 01       	movw	r30, r24
    1a02:	80 81       	ld	r24, Z
    1a04:	91 81       	ldd	r25, Z+1	; 0x01
    1a06:	89 2b       	or	r24, r25
    1a08:	a1 f6       	brne	.-88     	; 0x19b2 <updateLights+0xf6a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a0a:	2b c0       	rjmp	.+86     	; 0x1a62 <updateLights+0x101a>
    1a0c:	8e 01       	movw	r16, r28
    1a0e:	07 57       	subi	r16, 0x77	; 119
    1a10:	1f 4f       	sbci	r17, 0xFF	; 255
    1a12:	ce 01       	movw	r24, r28
    1a14:	8b 57       	subi	r24, 0x7B	; 123
    1a16:	9f 4f       	sbci	r25, 0xFF	; 255
    1a18:	fc 01       	movw	r30, r24
    1a1a:	60 81       	ld	r22, Z
    1a1c:	71 81       	ldd	r23, Z+1	; 0x01
    1a1e:	82 81       	ldd	r24, Z+2	; 0x02
    1a20:	93 81       	ldd	r25, Z+3	; 0x03
    1a22:	95 d5       	rcall	.+2858   	; 0x254e <__fixunssfsi>
    1a24:	dc 01       	movw	r26, r24
    1a26:	cb 01       	movw	r24, r22
    1a28:	f8 01       	movw	r30, r16
    1a2a:	91 83       	std	Z+1, r25	; 0x01
    1a2c:	80 83       	st	Z, r24
    1a2e:	ce 01       	movw	r24, r28
    1a30:	83 57       	subi	r24, 0x73	; 115
    1a32:	9f 4f       	sbci	r25, 0xFF	; 255
    1a34:	9e 01       	movw	r18, r28
    1a36:	27 57       	subi	r18, 0x77	; 119
    1a38:	3f 4f       	sbci	r19, 0xFF	; 255
    1a3a:	f9 01       	movw	r30, r18
    1a3c:	20 81       	ld	r18, Z
    1a3e:	31 81       	ldd	r19, Z+1	; 0x01
    1a40:	fc 01       	movw	r30, r24
    1a42:	31 83       	std	Z+1, r19	; 0x01
    1a44:	20 83       	st	Z, r18
    1a46:	ce 01       	movw	r24, r28
    1a48:	83 57       	subi	r24, 0x73	; 115
    1a4a:	9f 4f       	sbci	r25, 0xFF	; 255
    1a4c:	fc 01       	movw	r30, r24
    1a4e:	80 81       	ld	r24, Z
    1a50:	91 81       	ldd	r25, Z+1	; 0x01
    1a52:	01 97       	sbiw	r24, 0x01	; 1
    1a54:	f1 f7       	brne	.-4      	; 0x1a52 <updateLights+0x100a>
    1a56:	9e 01       	movw	r18, r28
    1a58:	23 57       	subi	r18, 0x73	; 115
    1a5a:	3f 4f       	sbci	r19, 0xFF	; 255
    1a5c:	f9 01       	movw	r30, r18
    1a5e:	91 83       	std	Z+1, r25	; 0x01
						_delay_ms(1);
					}
					did5 = 1;
    1a60:	80 83       	st	Z, r24
    1a62:	81 e0       	ldi	r24, 0x01	; 1
    1a64:	80 93 d5 01 	sts	0x01D5, r24	; 0x8001d5 <did5>
					done5 = 1;
    1a68:	81 e0       	ldi	r24, 0x01	; 1
    1a6a:	80 93 da 01 	sts	0x01DA, r24	; 0x8001da <done5>
	// Actions
	switch (current) {
		case shift:
			counter++;
			
			for(int c = 0; c < size; c++){
    1a6e:	89 81       	ldd	r24, Y+1	; 0x01
    1a70:	9a 81       	ldd	r25, Y+2	; 0x02
    1a72:	01 96       	adiw	r24, 0x01	; 1
    1a74:	9a 83       	std	Y+2, r25	; 0x02
    1a76:	89 83       	std	Y+1, r24	; 0x01
    1a78:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <size>
    1a7c:	28 2f       	mov	r18, r24
    1a7e:	30 e0       	ldi	r19, 0x00	; 0
    1a80:	89 81       	ldd	r24, Y+1	; 0x01
    1a82:	9a 81       	ldd	r25, Y+2	; 0x02
    1a84:	82 17       	cp	r24, r18
    1a86:	93 07       	cpc	r25, r19
    1a88:	0c f4       	brge	.+2      	; 0x1a8c <updateLights+0x1044>
    1a8a:	13 c8       	rjmp	.-4058   	; 0xab2 <updateLights+0x6a>
					did5 = 1;
					done5 = 1;
				}
			}
		}
		current = setVars;
    1a8c:	81 e0       	ldi	r24, 0x01	; 1
    1a8e:	90 e0       	ldi	r25, 0x00	; 0
    1a90:	90 93 cd 02 	sts	0x02CD, r25	; 0x8002cd <current+0x1>
    1a94:	80 93 cc 02 	sts	0x02CC, r24	; 0x8002cc <current>
		break;
    1a98:	3e c0       	rjmp	.+124    	; 0x1b16 <updateLights+0x10ce>
		
		case setVars:
			done1 = 0;
    1a9a:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <done1>
			done2 = 0;
    1a9e:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <done2>
			done3 = 0;
    1aa2:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <done3>
			done4 = 0;
    1aa6:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <done4>
			done5 = 0;
    1aaa:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <done5>
		
			if(counter >= slowness){
    1aae:	20 91 0b 01 	lds	r18, 0x010B	; 0x80010b <counter>
    1ab2:	30 91 0c 01 	lds	r19, 0x010C	; 0x80010c <counter+0x1>
    1ab6:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <slowness>
    1aba:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <slowness+0x1>
    1abe:	28 17       	cp	r18, r24
    1ac0:	39 07       	cpc	r19, r25
    1ac2:	20 f1       	brcs	.+72     	; 0x1b0c <updateLights+0x10c4>
				counter = 0;
    1ac4:	10 92 0c 01 	sts	0x010C, r1	; 0x80010c <counter+0x1>
    1ac8:	10 92 0b 01 	sts	0x010B, r1	; 0x80010b <counter>
				slowness -= 10;
    1acc:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <slowness>
    1ad0:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <slowness+0x1>
    1ad4:	0a 97       	sbiw	r24, 0x0a	; 10
    1ad6:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <slowness+0x1>
    1ada:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <slowness>
				if(slowness <= 25){
    1ade:	80 91 09 01 	lds	r24, 0x0109	; 0x800109 <slowness>
    1ae2:	90 91 0a 01 	lds	r25, 0x010A	; 0x80010a <slowness+0x1>
    1ae6:	4a 97       	sbiw	r24, 0x1a	; 26
    1ae8:	30 f4       	brcc	.+12     	; 0x1af6 <updateLights+0x10ae>
					slowness = 25;
    1aea:	89 e1       	ldi	r24, 0x19	; 25
    1aec:	90 e0       	ldi	r25, 0x00	; 0
    1aee:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <slowness+0x1>
    1af2:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <slowness>
				}
				light_count++;
    1af6:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <light_count>
    1afa:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <light_count+0x1>
    1afe:	01 96       	adiw	r24, 0x01	; 1
    1b00:	90 93 cf 01 	sts	0x01CF, r25	; 0x8001cf <light_count+0x1>
    1b04:	80 93 ce 01 	sts	0x01CE, r24	; 0x8001ce <light_count>
				updateScore();
    1b08:	0e 94 d1 04 	call	0x9a2	; 0x9a2 <updateScore>
			}
			current = shift;
    1b0c:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <current+0x1>
    1b10:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <current>
			break;
    1b14:	00 00       	nop
		default:
		break;
	}
}
    1b16:	00 00       	nop
    1b18:	c2 57       	subi	r28, 0x72	; 114
    1b1a:	df 4f       	sbci	r29, 0xFF	; 255
    1b1c:	0f b6       	in	r0, 0x3f	; 63
    1b1e:	f8 94       	cli
    1b20:	de bf       	out	0x3e, r29	; 62
    1b22:	0f be       	out	0x3f, r0	; 63
    1b24:	cd bf       	out	0x3d, r28	; 61
    1b26:	df 91       	pop	r29
    1b28:	cf 91       	pop	r28
    1b2a:	1f 91       	pop	r17
    1b2c:	0f 91       	pop	r16
    1b2e:	08 95       	ret

00001b30 <InitGame>:

void InitGame(){
    1b30:	cf 93       	push	r28
    1b32:	df 93       	push	r29
    1b34:	cd b7       	in	r28, 0x3d	; 61
    1b36:	de b7       	in	r29, 0x3e	; 62
	Clear_Matrix(current);
    1b38:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <current>
    1b3c:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <current+0x1>
    1b40:	0e 94 88 02 	call	0x510	; 0x510 <Clear_Matrix>
	if(LCD_state == 1){
    1b44:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <LCD_state>
    1b48:	81 30       	cpi	r24, 0x01	; 1
    1b4a:	61 f4       	brne	.+24     	; 0x1b64 <InitGame+0x34>
		LCD_ClearScreen();
    1b4c:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_ClearScreen>
		LCD_DisplayString(1, "   Welcome to    Keyboard Hero!");
    1b50:	60 e1       	ldi	r22, 0x10	; 16
    1b52:	71 e0       	ldi	r23, 0x01	; 1
    1b54:	81 e0       	ldi	r24, 0x01	; 1
    1b56:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_DisplayString>
		LCD_state++;
    1b5a:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <LCD_state>
    1b5e:	8f 5f       	subi	r24, 0xFF	; 255
    1b60:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <LCD_state>
	}
	delay_ms(200);
    1b64:	88 ec       	ldi	r24, 0xC8	; 200
    1b66:	90 e0       	ldi	r25, 0x00	; 0
    1b68:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <delay_ms>
	if(LCD_state == 2){
    1b6c:	80 91 0f 01 	lds	r24, 0x010F	; 0x80010f <LCD_state>
    1b70:	82 30       	cpi	r24, 0x02	; 2
    1b72:	09 f0       	breq	.+2      	; 0x1b76 <InitGame+0x46>
    1b74:	69 c0       	rjmp	.+210    	; 0x1c48 <InitGame+0x118>
		tempC = ~PINC & 0xC0;
    1b76:	86 e2       	ldi	r24, 0x26	; 38
    1b78:	90 e0       	ldi	r25, 0x00	; 0
    1b7a:	fc 01       	movw	r30, r24
    1b7c:	80 81       	ld	r24, Z
    1b7e:	80 95       	com	r24
    1b80:	80 7c       	andi	r24, 0xC0	; 192
    1b82:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <tempC>
		tempA = ~PINA & 0xE0;
    1b86:	80 e2       	ldi	r24, 0x20	; 32
    1b88:	90 e0       	ldi	r25, 0x00	; 0
    1b8a:	fc 01       	movw	r30, r24
    1b8c:	80 81       	ld	r24, Z
    1b8e:	80 95       	com	r24
    1b90:	80 7e       	andi	r24, 0xE0	; 224
    1b92:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <tempA>
		LCD_ClearScreen();
    1b96:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_ClearScreen>
		LCD_DisplayString(1, " Would you like to play 1 or 2P?");
    1b9a:	60 e3       	ldi	r22, 0x30	; 48
    1b9c:	71 e0       	ldi	r23, 0x01	; 1
    1b9e:	81 e0       	ldi	r24, 0x01	; 1
    1ba0:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_DisplayString>
		while(tempA != 0x20 && tempA != 0x40){
    1ba4:	10 c0       	rjmp	.+32     	; 0x1bc6 <InitGame+0x96>
			tempC = ~PINC & 0xC0;
    1ba6:	86 e2       	ldi	r24, 0x26	; 38
    1ba8:	90 e0       	ldi	r25, 0x00	; 0
    1baa:	fc 01       	movw	r30, r24
    1bac:	80 81       	ld	r24, Z
    1bae:	80 95       	com	r24
    1bb0:	80 7c       	andi	r24, 0xC0	; 192
    1bb2:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <tempC>
			tempA = ~PINA & 0xE0;
    1bb6:	80 e2       	ldi	r24, 0x20	; 32
    1bb8:	90 e0       	ldi	r25, 0x00	; 0
    1bba:	fc 01       	movw	r30, r24
    1bbc:	80 81       	ld	r24, Z
    1bbe:	80 95       	com	r24
    1bc0:	80 7e       	andi	r24, 0xE0	; 224
    1bc2:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <tempA>
	if(LCD_state == 2){
		tempC = ~PINC & 0xC0;
		tempA = ~PINA & 0xE0;
		LCD_ClearScreen();
		LCD_DisplayString(1, " Would you like to play 1 or 2P?");
		while(tempA != 0x20 && tempA != 0x40){
    1bc6:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <tempA>
    1bca:	80 32       	cpi	r24, 0x20	; 32
    1bcc:	21 f0       	breq	.+8      	; 0x1bd6 <InitGame+0xa6>
    1bce:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <tempA>
    1bd2:	80 34       	cpi	r24, 0x40	; 64
    1bd4:	41 f7       	brne	.-48     	; 0x1ba6 <InitGame+0x76>
			tempC = ~PINC & 0xC0;
			tempA = ~PINA & 0xE0;
		}
		if(tempA == 0x20){
    1bd6:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <tempA>
    1bda:	80 32       	cpi	r24, 0x20	; 32
    1bdc:	59 f4       	brne	.+22     	; 0x1bf4 <InitGame+0xc4>
			LCD_ClearScreen();
    1bde:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_ClearScreen>
			LCD_DisplayString(1, " 1 Player Mode!");
    1be2:	61 e5       	ldi	r22, 0x51	; 81
    1be4:	71 e0       	ldi	r23, 0x01	; 1
    1be6:	81 e0       	ldi	r24, 0x01	; 1
    1be8:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_DisplayString>
			mode = 1;
    1bec:	81 e0       	ldi	r24, 0x01	; 1
    1bee:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <mode>
    1bf2:	0e c0       	rjmp	.+28     	; 0x1c10 <InitGame+0xe0>
		}
		else if(tempA == 0x40){
    1bf4:	80 91 cb 02 	lds	r24, 0x02CB	; 0x8002cb <tempA>
    1bf8:	80 34       	cpi	r24, 0x40	; 64
    1bfa:	51 f4       	brne	.+20     	; 0x1c10 <InitGame+0xe0>
			LCD_ClearScreen();
    1bfc:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_ClearScreen>
			LCD_DisplayString(1, " 2 Player Mode!");
    1c00:	61 e6       	ldi	r22, 0x61	; 97
    1c02:	71 e0       	ldi	r23, 0x01	; 1
    1c04:	81 e0       	ldi	r24, 0x01	; 1
    1c06:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_DisplayString>
			mode = 2;
    1c0a:	82 e0       	ldi	r24, 0x02	; 2
    1c0c:	80 93 d0 01 	sts	0x01D0, r24	; 0x8001d0 <mode>
		}
		delay_ms(100);
    1c10:	84 e6       	ldi	r24, 0x64	; 100
    1c12:	90 e0       	ldi	r25, 0x00	; 0
    1c14:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <delay_ms>
		LCD_ClearScreen();
    1c18:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_ClearScreen>
		LCD_DisplayString(1, "     READY");
    1c1c:	61 e7       	ldi	r22, 0x71	; 113
    1c1e:	71 e0       	ldi	r23, 0x01	; 1
    1c20:	81 e0       	ldi	r24, 0x01	; 1
    1c22:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_DisplayString>
		delay_ms(200);
    1c26:	88 ec       	ldi	r24, 0xC8	; 200
    1c28:	90 e0       	ldi	r25, 0x00	; 0
    1c2a:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <delay_ms>
		LCD_ClearScreen();
    1c2e:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_ClearScreen>
		LCD_DisplayString(1, "     START");
    1c32:	6c e7       	ldi	r22, 0x7C	; 124
    1c34:	71 e0       	ldi	r23, 0x01	; 1
    1c36:	81 e0       	ldi	r24, 0x01	; 1
    1c38:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_DisplayString>
		delay_ms(200);
    1c3c:	88 ec       	ldi	r24, 0xC8	; 200
    1c3e:	90 e0       	ldi	r25, 0x00	; 0
    1c40:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <delay_ms>
		LCD_ClearScreen();
    1c44:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_ClearScreen>
	}
}
    1c48:	00 00       	nop
    1c4a:	df 91       	pop	r29
    1c4c:	cf 91       	pop	r28
    1c4e:	08 95       	ret

00001c50 <displayScore>:

void displayScore(){
    1c50:	0f 93       	push	r16
    1c52:	1f 93       	push	r17
    1c54:	cf 93       	push	r28
    1c56:	df 93       	push	r29
    1c58:	00 d0       	rcall	.+0      	; 0x1c5a <displayScore+0xa>
    1c5a:	00 d0       	rcall	.+0      	; 0x1c5c <displayScore+0xc>
    1c5c:	00 d0       	rcall	.+0      	; 0x1c5e <displayScore+0xe>
    1c5e:	cd b7       	in	r28, 0x3d	; 61
    1c60:	de b7       	in	r29, 0x3e	; 62
	Clear_Matrix(current);
    1c62:	80 91 cc 02 	lds	r24, 0x02CC	; 0x8002cc <current>
    1c66:	90 91 cd 02 	lds	r25, 0x02CD	; 0x8002cd <current+0x1>
    1c6a:	0e 94 88 02 	call	0x510	; 0x510 <Clear_Matrix>
	WordOfData = eeprom_read_word((uint16_t*)46);
    1c6e:	8e e2       	ldi	r24, 0x2E	; 46
    1c70:	90 e0       	ldi	r25, 0x00	; 0
    1c72:	84 d5       	rcall	.+2824   	; 0x277c <eeprom_read_word>
    1c74:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <WordOfData+0x1>
    1c78:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <WordOfData>
	int hundreds = 0, tens = 0, ones = 0;
    1c7c:	1a 82       	std	Y+2, r1	; 0x02
    1c7e:	19 82       	std	Y+1, r1	; 0x01
    1c80:	1c 82       	std	Y+4, r1	; 0x04
    1c82:	1b 82       	std	Y+3, r1	; 0x03
    1c84:	1e 82       	std	Y+6, r1	; 0x06
    1c86:	1d 82       	std	Y+5, r1	; 0x05
	
	if(WordOfData < score){
    1c88:	20 91 e7 01 	lds	r18, 0x01E7	; 0x8001e7 <WordOfData>
    1c8c:	30 91 e8 01 	lds	r19, 0x01E8	; 0x8001e8 <WordOfData+0x1>
    1c90:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <score>
    1c94:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <score+0x1>
    1c98:	28 17       	cp	r18, r24
    1c9a:	39 07       	cpc	r19, r25
    1c9c:	08 f0       	brcs	.+2      	; 0x1ca0 <displayScore+0x50>
    1c9e:	8a c0       	rjmp	.+276    	; 0x1db4 <displayScore+0x164>
		LCD_ClearScreen();
    1ca0:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_ClearScreen>
		LCD_DisplayString(1, "Congratulations! New High Score");
    1ca4:	67 e8       	ldi	r22, 0x87	; 135
    1ca6:	71 e0       	ldi	r23, 0x01	; 1
    1ca8:	81 e0       	ldi	r24, 0x01	; 1
    1caa:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_DisplayString>
		delay_ms(200);
    1cae:	88 ec       	ldi	r24, 0xC8	; 200
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <delay_ms>
		LCD_DisplayString(1, "High score: ");
    1cb6:	67 ea       	ldi	r22, 0xA7	; 167
    1cb8:	71 e0       	ldi	r23, 0x01	; 1
    1cba:	81 e0       	ldi	r24, 0x01	; 1
    1cbc:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_DisplayString>
		
		if(score > 99){
    1cc0:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <score>
    1cc4:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <score+0x1>
    1cc8:	84 36       	cpi	r24, 0x64	; 100
    1cca:	91 05       	cpc	r25, r1
    1ccc:	80 f0       	brcs	.+32     	; 0x1cee <displayScore+0x9e>
			hundreds = score / 100;
    1cce:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <score>
    1cd2:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <score+0x1>
    1cd6:	96 95       	lsr	r25
    1cd8:	87 95       	ror	r24
    1cda:	96 95       	lsr	r25
    1cdc:	87 95       	ror	r24
    1cde:	9c 01       	movw	r18, r24
    1ce0:	ab e7       	ldi	r26, 0x7B	; 123
    1ce2:	b4 e1       	ldi	r27, 0x14	; 20
    1ce4:	3c d5       	rcall	.+2680   	; 0x275e <__umulhisi3>
    1ce6:	96 95       	lsr	r25
    1ce8:	87 95       	ror	r24
    1cea:	9a 83       	std	Y+2, r25	; 0x02
    1cec:	89 83       	std	Y+1, r24	; 0x01
		}
		if(score > 9){
    1cee:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <score>
    1cf2:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <score+0x1>
    1cf6:	0a 97       	sbiw	r24, 0x0a	; 10
    1cf8:	d8 f0       	brcs	.+54     	; 0x1d30 <displayScore+0xe0>
			tens = (score - (hundreds * 100)) / 10;
    1cfa:	89 81       	ldd	r24, Y+1	; 0x01
    1cfc:	9a 81       	ldd	r25, Y+2	; 0x02
    1cfe:	4c e9       	ldi	r20, 0x9C	; 156
    1d00:	8c 01       	movw	r16, r24
    1d02:	40 03       	mulsu	r20, r16
    1d04:	90 01       	movw	r18, r0
    1d06:	41 9f       	mul	r20, r17
    1d08:	30 0d       	add	r19, r0
    1d0a:	11 24       	eor	r1, r1
    1d0c:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <score>
    1d10:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <score+0x1>
    1d14:	82 0f       	add	r24, r18
    1d16:	93 1f       	adc	r25, r19
    1d18:	9c 01       	movw	r18, r24
    1d1a:	ad ec       	ldi	r26, 0xCD	; 205
    1d1c:	bc ec       	ldi	r27, 0xCC	; 204
    1d1e:	1f d5       	rcall	.+2622   	; 0x275e <__umulhisi3>
    1d20:	96 95       	lsr	r25
    1d22:	87 95       	ror	r24
    1d24:	96 95       	lsr	r25
    1d26:	87 95       	ror	r24
    1d28:	96 95       	lsr	r25
    1d2a:	87 95       	ror	r24
    1d2c:	9c 83       	std	Y+4, r25	; 0x04
    1d2e:	8b 83       	std	Y+3, r24	; 0x03
		}
		if(score > 0){
    1d30:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <score>
    1d34:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <score+0x1>
    1d38:	89 2b       	or	r24, r25
    1d3a:	e9 f0       	breq	.+58     	; 0x1d76 <displayScore+0x126>
			ones = (score - (hundreds * 100) - (tens * 10));
    1d3c:	89 81       	ldd	r24, Y+1	; 0x01
    1d3e:	9a 81       	ldd	r25, Y+2	; 0x02
    1d40:	4c e9       	ldi	r20, 0x9C	; 156
    1d42:	bc 01       	movw	r22, r24
    1d44:	46 03       	mulsu	r20, r22
    1d46:	90 01       	movw	r18, r0
    1d48:	47 9f       	mul	r20, r23
    1d4a:	30 0d       	add	r19, r0
    1d4c:	11 24       	eor	r1, r1
    1d4e:	8b 81       	ldd	r24, Y+3	; 0x03
    1d50:	9c 81       	ldd	r25, Y+4	; 0x04
    1d52:	66 ef       	ldi	r22, 0xF6	; 246
    1d54:	8c 01       	movw	r16, r24
    1d56:	60 03       	mulsu	r22, r16
    1d58:	a0 01       	movw	r20, r0
    1d5a:	61 9f       	mul	r22, r17
    1d5c:	50 0d       	add	r21, r0
    1d5e:	11 24       	eor	r1, r1
    1d60:	ca 01       	movw	r24, r20
    1d62:	28 0f       	add	r18, r24
    1d64:	39 1f       	adc	r19, r25
    1d66:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <score>
    1d6a:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <score+0x1>
    1d6e:	82 0f       	add	r24, r18
    1d70:	93 1f       	adc	r25, r19
    1d72:	9e 83       	std	Y+6, r25	; 0x06
    1d74:	8d 83       	std	Y+5, r24	; 0x05
		}
		
		if(hundreds > 0){
    1d76:	89 81       	ldd	r24, Y+1	; 0x01
    1d78:	9a 81       	ldd	r25, Y+2	; 0x02
    1d7a:	18 16       	cp	r1, r24
    1d7c:	19 06       	cpc	r1, r25
    1d7e:	24 f4       	brge	.+8      	; 0x1d88 <displayScore+0x138>
			LCD_WriteData( hundreds + '0');
    1d80:	89 81       	ldd	r24, Y+1	; 0x01
    1d82:	80 5d       	subi	r24, 0xD0	; 208
    1d84:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_WriteData>
		}
		if(tens > 0){
    1d88:	8b 81       	ldd	r24, Y+3	; 0x03
    1d8a:	9c 81       	ldd	r25, Y+4	; 0x04
    1d8c:	18 16       	cp	r1, r24
    1d8e:	19 06       	cpc	r1, r25
    1d90:	24 f4       	brge	.+8      	; 0x1d9a <displayScore+0x14a>
			LCD_WriteData( tens + '0');
    1d92:	8b 81       	ldd	r24, Y+3	; 0x03
    1d94:	80 5d       	subi	r24, 0xD0	; 208
    1d96:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_WriteData>
		}
		LCD_WriteData( ones + '0');
    1d9a:	8d 81       	ldd	r24, Y+5	; 0x05
    1d9c:	80 5d       	subi	r24, 0xD0	; 208
    1d9e:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_WriteData>
		
		eeprom_write_word ((uint16_t*)46, score);
    1da2:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <score>
    1da6:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <score+0x1>
    1daa:	bc 01       	movw	r22, r24
    1dac:	8e e2       	ldi	r24, 0x2E	; 46
    1dae:	90 e0       	ldi	r25, 0x00	; 0
    1db0:	ea d4       	rcall	.+2516   	; 0x2786 <eeprom_write_word>
		if(tens > 0){
			LCD_WriteData( tens + '0');
		}
		LCD_WriteData( ones + '0');
	}
}
    1db2:	f2 c0       	rjmp	.+484    	; 0x1f98 <displayScore+0x348>
		LCD_WriteData( ones + '0');
		
		eeprom_write_word ((uint16_t*)46, score);
	}
	else{
		LCD_ClearScreen();
    1db4:	0e 94 37 01 	call	0x26e	; 0x26e <LCD_ClearScreen>
		LCD_DisplayString(1, "Your score: ");
    1db8:	64 eb       	ldi	r22, 0xB4	; 180
    1dba:	71 e0       	ldi	r23, 0x01	; 1
    1dbc:	81 e0       	ldi	r24, 0x01	; 1
    1dbe:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_DisplayString>
		if(score > 99){
    1dc2:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <score>
    1dc6:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <score+0x1>
    1dca:	84 36       	cpi	r24, 0x64	; 100
    1dcc:	91 05       	cpc	r25, r1
    1dce:	80 f0       	brcs	.+32     	; 0x1df0 <displayScore+0x1a0>
			hundreds = score / 100;
    1dd0:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <score>
    1dd4:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <score+0x1>
    1dd8:	96 95       	lsr	r25
    1dda:	87 95       	ror	r24
    1ddc:	96 95       	lsr	r25
    1dde:	87 95       	ror	r24
    1de0:	9c 01       	movw	r18, r24
    1de2:	ab e7       	ldi	r26, 0x7B	; 123
    1de4:	b4 e1       	ldi	r27, 0x14	; 20
    1de6:	bb d4       	rcall	.+2422   	; 0x275e <__umulhisi3>
    1de8:	96 95       	lsr	r25
    1dea:	87 95       	ror	r24
    1dec:	9a 83       	std	Y+2, r25	; 0x02
    1dee:	89 83       	std	Y+1, r24	; 0x01
		}
		if(score > 9){
    1df0:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <score>
    1df4:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <score+0x1>
    1df8:	0a 97       	sbiw	r24, 0x0a	; 10
    1dfa:	d8 f0       	brcs	.+54     	; 0x1e32 <displayScore+0x1e2>
			tens = (score - (hundreds * 100)) / 10;
    1dfc:	89 81       	ldd	r24, Y+1	; 0x01
    1dfe:	9a 81       	ldd	r25, Y+2	; 0x02
    1e00:	4c e9       	ldi	r20, 0x9C	; 156
    1e02:	bc 01       	movw	r22, r24
    1e04:	46 03       	mulsu	r20, r22
    1e06:	90 01       	movw	r18, r0
    1e08:	47 9f       	mul	r20, r23
    1e0a:	30 0d       	add	r19, r0
    1e0c:	11 24       	eor	r1, r1
    1e0e:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <score>
    1e12:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <score+0x1>
    1e16:	82 0f       	add	r24, r18
    1e18:	93 1f       	adc	r25, r19
    1e1a:	9c 01       	movw	r18, r24
    1e1c:	ad ec       	ldi	r26, 0xCD	; 205
    1e1e:	bc ec       	ldi	r27, 0xCC	; 204
    1e20:	9e d4       	rcall	.+2364   	; 0x275e <__umulhisi3>
    1e22:	96 95       	lsr	r25
    1e24:	87 95       	ror	r24
    1e26:	96 95       	lsr	r25
    1e28:	87 95       	ror	r24
    1e2a:	96 95       	lsr	r25
    1e2c:	87 95       	ror	r24
    1e2e:	9c 83       	std	Y+4, r25	; 0x04
    1e30:	8b 83       	std	Y+3, r24	; 0x03
		}
		if(score > 0){
    1e32:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <score>
    1e36:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <score+0x1>
    1e3a:	89 2b       	or	r24, r25
    1e3c:	e9 f0       	breq	.+58     	; 0x1e78 <displayScore+0x228>
			ones = (score - (hundreds * 100) - (tens * 10));
    1e3e:	89 81       	ldd	r24, Y+1	; 0x01
    1e40:	9a 81       	ldd	r25, Y+2	; 0x02
    1e42:	4c e9       	ldi	r20, 0x9C	; 156
    1e44:	8c 01       	movw	r16, r24
    1e46:	40 03       	mulsu	r20, r16
    1e48:	90 01       	movw	r18, r0
    1e4a:	41 9f       	mul	r20, r17
    1e4c:	30 0d       	add	r19, r0
    1e4e:	11 24       	eor	r1, r1
    1e50:	8b 81       	ldd	r24, Y+3	; 0x03
    1e52:	9c 81       	ldd	r25, Y+4	; 0x04
    1e54:	66 ef       	ldi	r22, 0xF6	; 246
    1e56:	8c 01       	movw	r16, r24
    1e58:	60 03       	mulsu	r22, r16
    1e5a:	a0 01       	movw	r20, r0
    1e5c:	61 9f       	mul	r22, r17
    1e5e:	50 0d       	add	r21, r0
    1e60:	11 24       	eor	r1, r1
    1e62:	ca 01       	movw	r24, r20
    1e64:	28 0f       	add	r18, r24
    1e66:	39 1f       	adc	r19, r25
    1e68:	80 91 e5 01 	lds	r24, 0x01E5	; 0x8001e5 <score>
    1e6c:	90 91 e6 01 	lds	r25, 0x01E6	; 0x8001e6 <score+0x1>
    1e70:	82 0f       	add	r24, r18
    1e72:	93 1f       	adc	r25, r19
    1e74:	9e 83       	std	Y+6, r25	; 0x06
    1e76:	8d 83       	std	Y+5, r24	; 0x05
		}
		
		if(hundreds > 0){
    1e78:	89 81       	ldd	r24, Y+1	; 0x01
    1e7a:	9a 81       	ldd	r25, Y+2	; 0x02
    1e7c:	18 16       	cp	r1, r24
    1e7e:	19 06       	cpc	r1, r25
    1e80:	24 f4       	brge	.+8      	; 0x1e8a <displayScore+0x23a>
 			LCD_WriteData( hundreds + '0');
    1e82:	89 81       	ldd	r24, Y+1	; 0x01
    1e84:	80 5d       	subi	r24, 0xD0	; 208
    1e86:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_WriteData>
		}
		if(tens > 0){
    1e8a:	8b 81       	ldd	r24, Y+3	; 0x03
    1e8c:	9c 81       	ldd	r25, Y+4	; 0x04
    1e8e:	18 16       	cp	r1, r24
    1e90:	19 06       	cpc	r1, r25
    1e92:	24 f4       	brge	.+8      	; 0x1e9c <displayScore+0x24c>
			LCD_WriteData( tens + '0');
    1e94:	8b 81       	ldd	r24, Y+3	; 0x03
    1e96:	80 5d       	subi	r24, 0xD0	; 208
    1e98:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_WriteData>
		}
		LCD_WriteData( ones + '0');
    1e9c:	8d 81       	ldd	r24, Y+5	; 0x05
    1e9e:	80 5d       	subi	r24, 0xD0	; 208
    1ea0:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_WriteData>
		
		delay_ms(500);
    1ea4:	84 ef       	ldi	r24, 0xF4	; 244
    1ea6:	91 e0       	ldi	r25, 0x01	; 1
    1ea8:	0e 94 f4 01 	call	0x3e8	; 0x3e8 <delay_ms>
		LCD_DisplayString(1, "High score: ");
    1eac:	67 ea       	ldi	r22, 0xA7	; 167
    1eae:	71 e0       	ldi	r23, 0x01	; 1
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	0e 94 b5 01 	call	0x36a	; 0x36a <LCD_DisplayString>
		
		if(WordOfData > 99){
    1eb6:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <WordOfData>
    1eba:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <WordOfData+0x1>
    1ebe:	84 36       	cpi	r24, 0x64	; 100
    1ec0:	91 05       	cpc	r25, r1
    1ec2:	80 f0       	brcs	.+32     	; 0x1ee4 <displayScore+0x294>
			hundreds = WordOfData / 100;
    1ec4:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <WordOfData>
    1ec8:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <WordOfData+0x1>
    1ecc:	96 95       	lsr	r25
    1ece:	87 95       	ror	r24
    1ed0:	96 95       	lsr	r25
    1ed2:	87 95       	ror	r24
    1ed4:	9c 01       	movw	r18, r24
    1ed6:	ab e7       	ldi	r26, 0x7B	; 123
    1ed8:	b4 e1       	ldi	r27, 0x14	; 20
    1eda:	41 d4       	rcall	.+2178   	; 0x275e <__umulhisi3>
    1edc:	96 95       	lsr	r25
    1ede:	87 95       	ror	r24
    1ee0:	9a 83       	std	Y+2, r25	; 0x02
    1ee2:	89 83       	std	Y+1, r24	; 0x01
		}
		if(WordOfData > 9){
    1ee4:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <WordOfData>
    1ee8:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <WordOfData+0x1>
    1eec:	0a 97       	sbiw	r24, 0x0a	; 10
    1eee:	d8 f0       	brcs	.+54     	; 0x1f26 <displayScore+0x2d6>
			tens = (WordOfData - (hundreds * 100)) / 10;
    1ef0:	89 81       	ldd	r24, Y+1	; 0x01
    1ef2:	9a 81       	ldd	r25, Y+2	; 0x02
    1ef4:	4c e9       	ldi	r20, 0x9C	; 156
    1ef6:	bc 01       	movw	r22, r24
    1ef8:	46 03       	mulsu	r20, r22
    1efa:	90 01       	movw	r18, r0
    1efc:	47 9f       	mul	r20, r23
    1efe:	30 0d       	add	r19, r0
    1f00:	11 24       	eor	r1, r1
    1f02:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <WordOfData>
    1f06:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <WordOfData+0x1>
    1f0a:	82 0f       	add	r24, r18
    1f0c:	93 1f       	adc	r25, r19
    1f0e:	9c 01       	movw	r18, r24
    1f10:	ad ec       	ldi	r26, 0xCD	; 205
    1f12:	bc ec       	ldi	r27, 0xCC	; 204
    1f14:	24 d4       	rcall	.+2120   	; 0x275e <__umulhisi3>
    1f16:	96 95       	lsr	r25
    1f18:	87 95       	ror	r24
    1f1a:	96 95       	lsr	r25
    1f1c:	87 95       	ror	r24
    1f1e:	96 95       	lsr	r25
    1f20:	87 95       	ror	r24
    1f22:	9c 83       	std	Y+4, r25	; 0x04
    1f24:	8b 83       	std	Y+3, r24	; 0x03
		}
		if(WordOfData > 0){
    1f26:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <WordOfData>
    1f2a:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <WordOfData+0x1>
    1f2e:	89 2b       	or	r24, r25
    1f30:	e9 f0       	breq	.+58     	; 0x1f6c <displayScore+0x31c>
			ones = (WordOfData - (hundreds * 100) - (tens * 10));
    1f32:	89 81       	ldd	r24, Y+1	; 0x01
    1f34:	9a 81       	ldd	r25, Y+2	; 0x02
    1f36:	4c e9       	ldi	r20, 0x9C	; 156
    1f38:	8c 01       	movw	r16, r24
    1f3a:	40 03       	mulsu	r20, r16
    1f3c:	90 01       	movw	r18, r0
    1f3e:	41 9f       	mul	r20, r17
    1f40:	30 0d       	add	r19, r0
    1f42:	11 24       	eor	r1, r1
    1f44:	8b 81       	ldd	r24, Y+3	; 0x03
    1f46:	9c 81       	ldd	r25, Y+4	; 0x04
    1f48:	66 ef       	ldi	r22, 0xF6	; 246
    1f4a:	8c 01       	movw	r16, r24
    1f4c:	60 03       	mulsu	r22, r16
    1f4e:	a0 01       	movw	r20, r0
    1f50:	61 9f       	mul	r22, r17
    1f52:	50 0d       	add	r21, r0
    1f54:	11 24       	eor	r1, r1
    1f56:	ca 01       	movw	r24, r20
    1f58:	28 0f       	add	r18, r24
    1f5a:	39 1f       	adc	r19, r25
    1f5c:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <WordOfData>
    1f60:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <WordOfData+0x1>
    1f64:	82 0f       	add	r24, r18
    1f66:	93 1f       	adc	r25, r19
    1f68:	9e 83       	std	Y+6, r25	; 0x06
    1f6a:	8d 83       	std	Y+5, r24	; 0x05
		}
		
		if(hundreds > 0){
    1f6c:	89 81       	ldd	r24, Y+1	; 0x01
    1f6e:	9a 81       	ldd	r25, Y+2	; 0x02
    1f70:	18 16       	cp	r1, r24
    1f72:	19 06       	cpc	r1, r25
    1f74:	24 f4       	brge	.+8      	; 0x1f7e <displayScore+0x32e>
			LCD_WriteData( hundreds + '0');
    1f76:	89 81       	ldd	r24, Y+1	; 0x01
    1f78:	80 5d       	subi	r24, 0xD0	; 208
    1f7a:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_WriteData>
		}
		if(tens > 0){
    1f7e:	8b 81       	ldd	r24, Y+3	; 0x03
    1f80:	9c 81       	ldd	r25, Y+4	; 0x04
    1f82:	18 16       	cp	r1, r24
    1f84:	19 06       	cpc	r1, r25
    1f86:	24 f4       	brge	.+8      	; 0x1f90 <displayScore+0x340>
			LCD_WriteData( tens + '0');
    1f88:	8b 81       	ldd	r24, Y+3	; 0x03
    1f8a:	80 5d       	subi	r24, 0xD0	; 208
    1f8c:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_WriteData>
		}
		LCD_WriteData( ones + '0');
    1f90:	8d 81       	ldd	r24, Y+5	; 0x05
    1f92:	80 5d       	subi	r24, 0xD0	; 208
    1f94:	0e 94 86 01 	call	0x30c	; 0x30c <LCD_WriteData>
	}
}
    1f98:	00 00       	nop
    1f9a:	26 96       	adiw	r28, 0x06	; 6
    1f9c:	0f b6       	in	r0, 0x3f	; 63
    1f9e:	f8 94       	cli
    1fa0:	de bf       	out	0x3e, r29	; 62
    1fa2:	0f be       	out	0x3f, r0	; 63
    1fa4:	cd bf       	out	0x3d, r28	; 61
    1fa6:	df 91       	pop	r29
    1fa8:	cf 91       	pop	r28
    1faa:	1f 91       	pop	r17
    1fac:	0f 91       	pop	r16
    1fae:	08 95       	ret

00001fb0 <onePlayer>:

void onePlayer(){
    1fb0:	cf 93       	push	r28
    1fb2:	df 93       	push	r29
    1fb4:	cd b7       	in	r28, 0x3d	; 61
    1fb6:	de b7       	in	r29, 0x3e	; 62
	sequence[0] = 1;
    1fb8:	81 e0       	ldi	r24, 0x01	; 1
    1fba:	80 93 e9 01 	sts	0x01E9, r24	; 0x8001e9 <sequence>
	sequence[1] = 2;
    1fbe:	82 e0       	ldi	r24, 0x02	; 2
    1fc0:	80 93 ea 01 	sts	0x01EA, r24	; 0x8001ea <sequence+0x1>
	sequence[2] = 3;
    1fc4:	83 e0       	ldi	r24, 0x03	; 3
    1fc6:	80 93 eb 01 	sts	0x01EB, r24	; 0x8001eb <sequence+0x2>
	sequence[3] = 4;
    1fca:	84 e0       	ldi	r24, 0x04	; 4
    1fcc:	80 93 ec 01 	sts	0x01EC, r24	; 0x8001ec <sequence+0x3>
	sequence[4] = 5;
    1fd0:	85 e0       	ldi	r24, 0x05	; 5
    1fd2:	80 93 ed 01 	sts	0x01ED, r24	; 0x8001ed <sequence+0x4>
	sequence[5] = 3;
    1fd6:	83 e0       	ldi	r24, 0x03	; 3
    1fd8:	80 93 ee 01 	sts	0x01EE, r24	; 0x8001ee <sequence+0x5>
	sequence[6] = 4;
    1fdc:	84 e0       	ldi	r24, 0x04	; 4
    1fde:	80 93 ef 01 	sts	0x01EF, r24	; 0x8001ef <sequence+0x6>
	sequence[7] = 4;
    1fe2:	84 e0       	ldi	r24, 0x04	; 4
    1fe4:	80 93 f0 01 	sts	0x01F0, r24	; 0x8001f0 <sequence+0x7>
	sequence[8] = 1;
    1fe8:	81 e0       	ldi	r24, 0x01	; 1
    1fea:	80 93 f1 01 	sts	0x01F1, r24	; 0x8001f1 <sequence+0x8>
	sequence[9] = 1;
    1fee:	81 e0       	ldi	r24, 0x01	; 1
    1ff0:	80 93 f2 01 	sts	0x01F2, r24	; 0x8001f2 <sequence+0x9>
	sequence[10] = 2;
    1ff4:	82 e0       	ldi	r24, 0x02	; 2
    1ff6:	80 93 f3 01 	sts	0x01F3, r24	; 0x8001f3 <sequence+0xa>
	sequence[11] = 5;
    1ffa:	85 e0       	ldi	r24, 0x05	; 5
    1ffc:	80 93 f4 01 	sts	0x01F4, r24	; 0x8001f4 <sequence+0xb>
	sequence[12] = 3;
    2000:	83 e0       	ldi	r24, 0x03	; 3
    2002:	80 93 f5 01 	sts	0x01F5, r24	; 0x8001f5 <sequence+0xc>
	sequence[13] = 1;
    2006:	81 e0       	ldi	r24, 0x01	; 1
    2008:	80 93 f6 01 	sts	0x01F6, r24	; 0x8001f6 <sequence+0xd>
	sequence[14] = 4;
    200c:	84 e0       	ldi	r24, 0x04	; 4
    200e:	80 93 f7 01 	sts	0x01F7, r24	; 0x8001f7 <sequence+0xe>
	sequence[15] = 1;
    2012:	81 e0       	ldi	r24, 0x01	; 1
    2014:	80 93 f8 01 	sts	0x01F8, r24	; 0x8001f8 <sequence+0xf>
	sequence[16] = 2;
    2018:	82 e0       	ldi	r24, 0x02	; 2
    201a:	80 93 f9 01 	sts	0x01F9, r24	; 0x8001f9 <sequence+0x10>
	sequence[17] = 3;
    201e:	83 e0       	ldi	r24, 0x03	; 3
    2020:	80 93 fa 01 	sts	0x01FA, r24	; 0x8001fa <sequence+0x11>
	sequence[18] = 4;
    2024:	84 e0       	ldi	r24, 0x04	; 4
    2026:	80 93 fb 01 	sts	0x01FB, r24	; 0x8001fb <sequence+0x12>
	sequence[19] = 5;
    202a:	85 e0       	ldi	r24, 0x05	; 5
    202c:	80 93 fc 01 	sts	0x01FC, r24	; 0x8001fc <sequence+0x13>
	sequence[20] = 1;
    2030:	81 e0       	ldi	r24, 0x01	; 1
    2032:	80 93 fd 01 	sts	0x01FD, r24	; 0x8001fd <sequence+0x14>
	
	time[0] = 1;
    2036:	81 e0       	ldi	r24, 0x01	; 1
    2038:	80 93 cf 02 	sts	0x02CF, r24	; 0x8002cf <time>
	time[1] = 2;
    203c:	82 e0       	ldi	r24, 0x02	; 2
    203e:	80 93 d0 02 	sts	0x02D0, r24	; 0x8002d0 <time+0x1>
	time[2] = 3;
    2042:	83 e0       	ldi	r24, 0x03	; 3
    2044:	80 93 d1 02 	sts	0x02D1, r24	; 0x8002d1 <time+0x2>
	time[3] = 4;
    2048:	84 e0       	ldi	r24, 0x04	; 4
    204a:	80 93 d2 02 	sts	0x02D2, r24	; 0x8002d2 <time+0x3>
	time[4] = 5;
    204e:	85 e0       	ldi	r24, 0x05	; 5
    2050:	80 93 d3 02 	sts	0x02D3, r24	; 0x8002d3 <time+0x4>
	time[5] = 8;
    2054:	88 e0       	ldi	r24, 0x08	; 8
    2056:	80 93 d4 02 	sts	0x02D4, r24	; 0x8002d4 <time+0x5>
	time[6] = 10;
    205a:	8a e0       	ldi	r24, 0x0A	; 10
    205c:	80 93 d5 02 	sts	0x02D5, r24	; 0x8002d5 <time+0x6>
	time[7] = 11;
    2060:	8b e0       	ldi	r24, 0x0B	; 11
    2062:	80 93 d6 02 	sts	0x02D6, r24	; 0x8002d6 <time+0x7>
	time[8] = 12;
    2066:	8c e0       	ldi	r24, 0x0C	; 12
    2068:	80 93 d7 02 	sts	0x02D7, r24	; 0x8002d7 <time+0x8>
	time[9] = 13;
    206c:	8d e0       	ldi	r24, 0x0D	; 13
    206e:	80 93 d8 02 	sts	0x02D8, r24	; 0x8002d8 <time+0x9>
	time[10] = 16;
    2072:	80 e1       	ldi	r24, 0x10	; 16
    2074:	80 93 d9 02 	sts	0x02D9, r24	; 0x8002d9 <time+0xa>
	time[11] = 16;
    2078:	80 e1       	ldi	r24, 0x10	; 16
    207a:	80 93 da 02 	sts	0x02DA, r24	; 0x8002da <time+0xb>
	time[12] = 17;
    207e:	81 e1       	ldi	r24, 0x11	; 17
    2080:	80 93 db 02 	sts	0x02DB, r24	; 0x8002db <time+0xc>
	time[13] = 19;
    2084:	83 e1       	ldi	r24, 0x13	; 19
    2086:	80 93 dc 02 	sts	0x02DC, r24	; 0x8002dc <time+0xd>
	time[14] = 20;
    208a:	84 e1       	ldi	r24, 0x14	; 20
    208c:	80 93 dd 02 	sts	0x02DD, r24	; 0x8002dd <time+0xe>
	time[15] = 21;
    2090:	85 e1       	ldi	r24, 0x15	; 21
    2092:	80 93 de 02 	sts	0x02DE, r24	; 0x8002de <time+0xf>
	time[16] = 26;
    2096:	8a e1       	ldi	r24, 0x1A	; 26
    2098:	80 93 df 02 	sts	0x02DF, r24	; 0x8002df <time+0x10>
	time[17] = 29;
    209c:	8d e1       	ldi	r24, 0x1D	; 29
    209e:	80 93 e0 02 	sts	0x02E0, r24	; 0x8002e0 <time+0x11>
	time[18] = 30;
    20a2:	8e e1       	ldi	r24, 0x1E	; 30
    20a4:	80 93 e1 02 	sts	0x02E1, r24	; 0x8002e1 <time+0x12>
	time[19] = 34;
    20a8:	82 e2       	ldi	r24, 0x22	; 34
    20aa:	80 93 e2 02 	sts	0x02E2, r24	; 0x8002e2 <time+0x13>
	time[20] = 35;
    20ae:	83 e2       	ldi	r24, 0x23	; 35
    20b0:	80 93 e3 02 	sts	0x02E3, r24	; 0x8002e3 <time+0x14>
	
	size = 21;
    20b4:	85 e1       	ldi	r24, 0x15	; 21
    20b6:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <size>
}
    20ba:	00 00       	nop
    20bc:	df 91       	pop	r29
    20be:	cf 91       	pop	r28
    20c0:	08 95       	ret

000020c2 <twoPlayer>:
void twoPlayer(){
    20c2:	cf 93       	push	r28
    20c4:	df 93       	push	r29
    20c6:	cd b7       	in	r28, 0x3d	; 61
    20c8:	de b7       	in	r29, 0x3e	; 62
	if(size < 224 && light_count < 35){
    20ca:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <size>
    20ce:	80 3e       	cpi	r24, 0xE0	; 224
    20d0:	08 f0       	brcs	.+2      	; 0x20d4 <twoPlayer+0x12>
    20d2:	ed c0       	rjmp	.+474    	; 0x22ae <twoPlayer+0x1ec>
    20d4:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <light_count>
    20d8:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <light_count+0x1>
    20dc:	83 97       	sbiw	r24, 0x23	; 35
    20de:	08 f0       	brcs	.+2      	; 0x20e2 <twoPlayer+0x20>
    20e0:	e6 c0       	rjmp	.+460    	; 0x22ae <twoPlayer+0x1ec>
		if((~PINA & 0x01) == 0x01){
    20e2:	80 e2       	ldi	r24, 0x20	; 32
    20e4:	90 e0       	ldi	r25, 0x00	; 0
    20e6:	fc 01       	movw	r30, r24
    20e8:	80 81       	ld	r24, Z
    20ea:	88 2f       	mov	r24, r24
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	81 70       	andi	r24, 0x01	; 1
    20f0:	99 27       	eor	r25, r25
    20f2:	89 2b       	or	r24, r25
    20f4:	21 f4       	brne	.+8      	; 0x20fe <twoPlayer+0x3c>
			secondPlayerPressed1 = 1;
    20f6:	81 e0       	ldi	r24, 0x01	; 1
    20f8:	80 93 db 01 	sts	0x01DB, r24	; 0x8001db <secondPlayerPressed1>
    20fc:	20 c0       	rjmp	.+64     	; 0x213e <twoPlayer+0x7c>
		}
		else if(secondPlayerPressed1 == 1){
    20fe:	80 91 db 01 	lds	r24, 0x01DB	; 0x8001db <secondPlayerPressed1>
    2102:	81 30       	cpi	r24, 0x01	; 1
    2104:	e1 f4       	brne	.+56     	; 0x213e <twoPlayer+0x7c>
			time[size] = light_count;
    2106:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <size>
    210a:	88 2f       	mov	r24, r24
    210c:	90 e0       	ldi	r25, 0x00	; 0
    210e:	20 91 ce 01 	lds	r18, 0x01CE	; 0x8001ce <light_count>
    2112:	30 91 cf 01 	lds	r19, 0x01CF	; 0x8001cf <light_count+0x1>
    2116:	81 53       	subi	r24, 0x31	; 49
    2118:	9d 4f       	sbci	r25, 0xFD	; 253
    211a:	fc 01       	movw	r30, r24
    211c:	20 83       	st	Z, r18
			sequence[size] = 1;
    211e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <size>
    2122:	88 2f       	mov	r24, r24
    2124:	90 e0       	ldi	r25, 0x00	; 0
    2126:	87 51       	subi	r24, 0x17	; 23
    2128:	9e 4f       	sbci	r25, 0xFE	; 254
    212a:	21 e0       	ldi	r18, 0x01	; 1
    212c:	fc 01       	movw	r30, r24
    212e:	20 83       	st	Z, r18
			size++;
    2130:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <size>
    2134:	8f 5f       	subi	r24, 0xFF	; 255
    2136:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <size>
			secondPlayerPressed1 = 0;
    213a:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <secondPlayerPressed1>
		}
		if((~PINA & 0x02) == 0x02){
    213e:	80 e2       	ldi	r24, 0x20	; 32
    2140:	90 e0       	ldi	r25, 0x00	; 0
    2142:	fc 01       	movw	r30, r24
    2144:	80 81       	ld	r24, Z
    2146:	88 2f       	mov	r24, r24
    2148:	90 e0       	ldi	r25, 0x00	; 0
    214a:	82 70       	andi	r24, 0x02	; 2
    214c:	99 27       	eor	r25, r25
    214e:	89 2b       	or	r24, r25
    2150:	21 f4       	brne	.+8      	; 0x215a <twoPlayer+0x98>
			secondPlayerPressed2 = 1;
    2152:	81 e0       	ldi	r24, 0x01	; 1
    2154:	80 93 dc 01 	sts	0x01DC, r24	; 0x8001dc <secondPlayerPressed2>
    2158:	20 c0       	rjmp	.+64     	; 0x219a <twoPlayer+0xd8>
		}
		else if(secondPlayerPressed2 == 1){
    215a:	80 91 dc 01 	lds	r24, 0x01DC	; 0x8001dc <secondPlayerPressed2>
    215e:	81 30       	cpi	r24, 0x01	; 1
    2160:	e1 f4       	brne	.+56     	; 0x219a <twoPlayer+0xd8>
			time[size] = light_count;
    2162:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <size>
    2166:	88 2f       	mov	r24, r24
    2168:	90 e0       	ldi	r25, 0x00	; 0
    216a:	20 91 ce 01 	lds	r18, 0x01CE	; 0x8001ce <light_count>
    216e:	30 91 cf 01 	lds	r19, 0x01CF	; 0x8001cf <light_count+0x1>
    2172:	81 53       	subi	r24, 0x31	; 49
    2174:	9d 4f       	sbci	r25, 0xFD	; 253
    2176:	fc 01       	movw	r30, r24
    2178:	20 83       	st	Z, r18
			sequence[size] = 2;
    217a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <size>
    217e:	88 2f       	mov	r24, r24
    2180:	90 e0       	ldi	r25, 0x00	; 0
    2182:	87 51       	subi	r24, 0x17	; 23
    2184:	9e 4f       	sbci	r25, 0xFE	; 254
    2186:	22 e0       	ldi	r18, 0x02	; 2
    2188:	fc 01       	movw	r30, r24
    218a:	20 83       	st	Z, r18
			size++;
    218c:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <size>
    2190:	8f 5f       	subi	r24, 0xFF	; 255
    2192:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <size>
			secondPlayerPressed2 = 0;
    2196:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <secondPlayerPressed2>
		}
		if((~PINA & 0x04) == 0x04){
    219a:	80 e2       	ldi	r24, 0x20	; 32
    219c:	90 e0       	ldi	r25, 0x00	; 0
    219e:	fc 01       	movw	r30, r24
    21a0:	80 81       	ld	r24, Z
    21a2:	88 2f       	mov	r24, r24
    21a4:	90 e0       	ldi	r25, 0x00	; 0
    21a6:	84 70       	andi	r24, 0x04	; 4
    21a8:	99 27       	eor	r25, r25
    21aa:	89 2b       	or	r24, r25
    21ac:	21 f4       	brne	.+8      	; 0x21b6 <twoPlayer+0xf4>
			secondPlayerPressed3 = 1;
    21ae:	81 e0       	ldi	r24, 0x01	; 1
    21b0:	80 93 dd 01 	sts	0x01DD, r24	; 0x8001dd <secondPlayerPressed3>
    21b4:	20 c0       	rjmp	.+64     	; 0x21f6 <twoPlayer+0x134>
		}
		else if(secondPlayerPressed3 == 1){
    21b6:	80 91 dd 01 	lds	r24, 0x01DD	; 0x8001dd <secondPlayerPressed3>
    21ba:	81 30       	cpi	r24, 0x01	; 1
    21bc:	e1 f4       	brne	.+56     	; 0x21f6 <twoPlayer+0x134>
			time[size] = light_count;
    21be:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <size>
    21c2:	88 2f       	mov	r24, r24
    21c4:	90 e0       	ldi	r25, 0x00	; 0
    21c6:	20 91 ce 01 	lds	r18, 0x01CE	; 0x8001ce <light_count>
    21ca:	30 91 cf 01 	lds	r19, 0x01CF	; 0x8001cf <light_count+0x1>
    21ce:	81 53       	subi	r24, 0x31	; 49
    21d0:	9d 4f       	sbci	r25, 0xFD	; 253
    21d2:	fc 01       	movw	r30, r24
    21d4:	20 83       	st	Z, r18
			sequence[size] = 3;
    21d6:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <size>
    21da:	88 2f       	mov	r24, r24
    21dc:	90 e0       	ldi	r25, 0x00	; 0
    21de:	87 51       	subi	r24, 0x17	; 23
    21e0:	9e 4f       	sbci	r25, 0xFE	; 254
    21e2:	23 e0       	ldi	r18, 0x03	; 3
    21e4:	fc 01       	movw	r30, r24
    21e6:	20 83       	st	Z, r18
			size++;
    21e8:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <size>
    21ec:	8f 5f       	subi	r24, 0xFF	; 255
    21ee:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <size>
			secondPlayerPressed3 = 0;
    21f2:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <secondPlayerPressed3>
		}
		if((~PINA & 0x08) == 0x08){
    21f6:	80 e2       	ldi	r24, 0x20	; 32
    21f8:	90 e0       	ldi	r25, 0x00	; 0
    21fa:	fc 01       	movw	r30, r24
    21fc:	80 81       	ld	r24, Z
    21fe:	88 2f       	mov	r24, r24
    2200:	90 e0       	ldi	r25, 0x00	; 0
    2202:	88 70       	andi	r24, 0x08	; 8
    2204:	99 27       	eor	r25, r25
    2206:	89 2b       	or	r24, r25
    2208:	21 f4       	brne	.+8      	; 0x2212 <twoPlayer+0x150>
			secondPlayerPressed4 = 1;
    220a:	81 e0       	ldi	r24, 0x01	; 1
    220c:	80 93 de 01 	sts	0x01DE, r24	; 0x8001de <secondPlayerPressed4>
    2210:	20 c0       	rjmp	.+64     	; 0x2252 <twoPlayer+0x190>
		}
		else if(secondPlayerPressed4 == 1){
    2212:	80 91 de 01 	lds	r24, 0x01DE	; 0x8001de <secondPlayerPressed4>
    2216:	81 30       	cpi	r24, 0x01	; 1
    2218:	e1 f4       	brne	.+56     	; 0x2252 <twoPlayer+0x190>
			time[size] = light_count;
    221a:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <size>
    221e:	88 2f       	mov	r24, r24
    2220:	90 e0       	ldi	r25, 0x00	; 0
    2222:	20 91 ce 01 	lds	r18, 0x01CE	; 0x8001ce <light_count>
    2226:	30 91 cf 01 	lds	r19, 0x01CF	; 0x8001cf <light_count+0x1>
    222a:	81 53       	subi	r24, 0x31	; 49
    222c:	9d 4f       	sbci	r25, 0xFD	; 253
    222e:	fc 01       	movw	r30, r24
    2230:	20 83       	st	Z, r18
			sequence[size] = 4;
    2232:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <size>
    2236:	88 2f       	mov	r24, r24
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	87 51       	subi	r24, 0x17	; 23
    223c:	9e 4f       	sbci	r25, 0xFE	; 254
    223e:	24 e0       	ldi	r18, 0x04	; 4
    2240:	fc 01       	movw	r30, r24
    2242:	20 83       	st	Z, r18
			size++;
    2244:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <size>
    2248:	8f 5f       	subi	r24, 0xFF	; 255
    224a:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <size>
			secondPlayerPressed4 = 0;
    224e:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <secondPlayerPressed4>
		}
		if((~PINA & 0x10) == 0x10){
    2252:	80 e2       	ldi	r24, 0x20	; 32
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	fc 01       	movw	r30, r24
    2258:	80 81       	ld	r24, Z
    225a:	88 2f       	mov	r24, r24
    225c:	90 e0       	ldi	r25, 0x00	; 0
    225e:	80 71       	andi	r24, 0x10	; 16
    2260:	99 27       	eor	r25, r25
    2262:	89 2b       	or	r24, r25
    2264:	21 f4       	brne	.+8      	; 0x226e <twoPlayer+0x1ac>
			secondPlayerPressed5 = 1;
    2266:	81 e0       	ldi	r24, 0x01	; 1
    2268:	80 93 df 01 	sts	0x01DF, r24	; 0x8001df <secondPlayerPressed5>
			sequence[size] = 5;
			size++;
			secondPlayerPressed5 = 0;
		}
	}
}
    226c:	20 c0       	rjmp	.+64     	; 0x22ae <twoPlayer+0x1ec>
			secondPlayerPressed4 = 0;
		}
		if((~PINA & 0x10) == 0x10){
			secondPlayerPressed5 = 1;
		}
		else if(secondPlayerPressed5 == 1){
    226e:	80 91 df 01 	lds	r24, 0x01DF	; 0x8001df <secondPlayerPressed5>
    2272:	81 30       	cpi	r24, 0x01	; 1
    2274:	e1 f4       	brne	.+56     	; 0x22ae <twoPlayer+0x1ec>
			time[size] = light_count;
    2276:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <size>
    227a:	88 2f       	mov	r24, r24
    227c:	90 e0       	ldi	r25, 0x00	; 0
    227e:	20 91 ce 01 	lds	r18, 0x01CE	; 0x8001ce <light_count>
    2282:	30 91 cf 01 	lds	r19, 0x01CF	; 0x8001cf <light_count+0x1>
    2286:	81 53       	subi	r24, 0x31	; 49
    2288:	9d 4f       	sbci	r25, 0xFD	; 253
    228a:	fc 01       	movw	r30, r24
    228c:	20 83       	st	Z, r18
			sequence[size] = 5;
    228e:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <size>
    2292:	88 2f       	mov	r24, r24
    2294:	90 e0       	ldi	r25, 0x00	; 0
    2296:	87 51       	subi	r24, 0x17	; 23
    2298:	9e 4f       	sbci	r25, 0xFE	; 254
    229a:	25 e0       	ldi	r18, 0x05	; 5
    229c:	fc 01       	movw	r30, r24
    229e:	20 83       	st	Z, r18
			size++;
    22a0:	80 91 0e 01 	lds	r24, 0x010E	; 0x80010e <size>
    22a4:	8f 5f       	subi	r24, 0xFF	; 255
    22a6:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <size>
			secondPlayerPressed5 = 0;
    22aa:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <secondPlayerPressed5>
		}
	}
}
    22ae:	00 00       	nop
    22b0:	df 91       	pop	r29
    22b2:	cf 91       	pop	r28
    22b4:	08 95       	ret

000022b6 <gamePlay>:

void gamePlay(){
    22b6:	cf 93       	push	r28
    22b8:	df 93       	push	r29
    22ba:	cd b7       	in	r28, 0x3d	; 61
    22bc:	de b7       	in	r29, 0x3e	; 62
	reset = 0;	
    22be:	10 92 0d 01 	sts	0x010D, r1	; 0x80010d <reset>
	LCD_state = 1;
    22c2:	81 e0       	ldi	r24, 0x01	; 1
    22c4:	80 93 0f 01 	sts	0x010F, r24	; 0x80010f <LCD_state>
	init_IO();
    22c8:	0e 94 24 02 	call	0x448	; 0x448 <init_IO>
	init_SPI();
    22cc:	0e 94 3e 02 	call	0x47c	; 0x47c <init_SPI>
	TimerSet(1);
    22d0:	61 e0       	ldi	r22, 0x01	; 1
    22d2:	70 e0       	ldi	r23, 0x00	; 0
    22d4:	80 e0       	ldi	r24, 0x00	; 0
    22d6:	90 e0       	ldi	r25, 0x00	; 0
    22d8:	0e 94 66 00 	call	0xcc	; 0xcc <TimerSet>
	TimerOn();
    22dc:	0e 94 94 00 	call	0x128	; 0x128 <TimerOn>
	// Initializes the LCD display
	LCD_init();
    22e0:	0e 94 41 01 	call	0x282	; 0x282 <LCD_init>
	
	current = shift;
    22e4:	10 92 cd 02 	sts	0x02CD, r1	; 0x8002cd <current+0x1>
    22e8:	10 92 cc 02 	sts	0x02CC, r1	; 0x8002cc <current>
	
	InitGame();
    22ec:	21 dc       	rcall	.-1982   	; 0x1b30 <InitGame>

	while(1)
	{
		tempA = ~PINA & 0xFF;
    22ee:	80 e2       	ldi	r24, 0x20	; 32
    22f0:	90 e0       	ldi	r25, 0x00	; 0
    22f2:	fc 01       	movw	r30, r24
    22f4:	80 81       	ld	r24, Z
    22f6:	80 95       	com	r24
    22f8:	80 93 cb 02 	sts	0x02CB, r24	; 0x8002cb <tempA>
		tempC = ~PINC & 0xC3;
    22fc:	86 e2       	ldi	r24, 0x26	; 38
    22fe:	90 e0       	ldi	r25, 0x00	; 0
    2300:	fc 01       	movw	r30, r24
    2302:	80 81       	ld	r24, Z
    2304:	80 95       	com	r24
    2306:	83 7c       	andi	r24, 0xC3	; 195
    2308:	80 93 ce 02 	sts	0x02CE, r24	; 0x8002ce <tempC>
			
		//Pull LATCH low (Important: this is necessary to start the SPI transfer!)
		SHIFT_PORT &= ~LATCH;
    230c:	85 e2       	ldi	r24, 0x25	; 37
    230e:	90 e0       	ldi	r25, 0x00	; 0
    2310:	25 e2       	ldi	r18, 0x25	; 37
    2312:	30 e0       	ldi	r19, 0x00	; 0
    2314:	f9 01       	movw	r30, r18
    2316:	20 81       	ld	r18, Z
    2318:	2f 7e       	andi	r18, 0xEF	; 239
    231a:	fc 01       	movw	r30, r24
    231c:	20 83       	st	Z, r18
		
		if((tempC & 0x01) == 0x01){
    231e:	80 91 ce 02 	lds	r24, 0x02CE	; 0x8002ce <tempC>
    2322:	88 2f       	mov	r24, r24
    2324:	90 e0       	ldi	r25, 0x00	; 0
    2326:	81 70       	andi	r24, 0x01	; 1
    2328:	99 27       	eor	r25, r25
    232a:	89 2b       	or	r24, r25
    232c:	19 f0       	breq	.+6      	; 0x2334 <gamePlay+0x7e>
			reset = 1;
    232e:	81 e0       	ldi	r24, 0x01	; 1
    2330:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <reset>
		}
		
		if(reset == 1){
    2334:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <reset>
    2338:	81 30       	cpi	r24, 0x01	; 1
    233a:	09 f4       	brne	.+2      	; 0x233e <gamePlay+0x88>
    233c:	41 c0       	rjmp	.+130    	; 0x23c0 <gamePlay+0x10a>
			break;
		}
		
		if(mode == 1){
    233e:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <mode>
    2342:	81 30       	cpi	r24, 0x01	; 1
			onePlayer();
    2344:	c1 f4       	brne	.+48     	; 0x2376 <gamePlay+0xc0>
    2346:	34 de       	rcall	.-920    	; 0x1fb0 <onePlayer>
			if(light_count < 45){
    2348:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <light_count>
    234c:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <light_count+0x1>
    2350:	8d 97       	sbiw	r24, 0x2d	; 45
    2352:	18 f4       	brcc	.+6      	; 0x235a <gamePlay+0xa4>
				updateLights();
    2354:	0e 94 24 05 	call	0xa48	; 0xa48 <updateLights>
			}
			else{
				displayScore();
    2358:	0e c0       	rjmp	.+28     	; 0x2376 <gamePlay+0xc0>
    235a:	7a dc       	rcall	.-1804   	; 0x1c50 <displayScore>
				while(1){
					if((~PINC & 0x01) == 0x01){
    235c:	86 e2       	ldi	r24, 0x26	; 38
    235e:	90 e0       	ldi	r25, 0x00	; 0
    2360:	fc 01       	movw	r30, r24
    2362:	80 81       	ld	r24, Z
    2364:	88 2f       	mov	r24, r24
    2366:	90 e0       	ldi	r25, 0x00	; 0
    2368:	81 70       	andi	r24, 0x01	; 1
    236a:	99 27       	eor	r25, r25
    236c:	89 2b       	or	r24, r25
    236e:	b1 f7       	brne	.-20     	; 0x235c <gamePlay+0xa6>
						reset = 1;
    2370:	81 e0       	ldi	r24, 0x01	; 1
    2372:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <reset>
						break;
					}
				}
			}
		}
		if(mode == 2){
    2376:	80 91 d0 01 	lds	r24, 0x01D0	; 0x8001d0 <mode>
    237a:	82 30       	cpi	r24, 0x02	; 2
    237c:	c9 f4       	brne	.+50     	; 0x23b0 <gamePlay+0xfa>
			if(light_count < 45){
    237e:	80 91 ce 01 	lds	r24, 0x01CE	; 0x8001ce <light_count>
    2382:	90 91 cf 01 	lds	r25, 0x01CF	; 0x8001cf <light_count+0x1>
    2386:	8d 97       	sbiw	r24, 0x2d	; 45
				twoPlayer();
    2388:	20 f4       	brcc	.+8      	; 0x2392 <gamePlay+0xdc>
				updateLights();
    238a:	9b de       	rcall	.-714    	; 0x20c2 <twoPlayer>
    238c:	0e 94 24 05 	call	0xa48	; 0xa48 <updateLights>
			}
			else{
				displayScore();
    2390:	0f c0       	rjmp	.+30     	; 0x23b0 <gamePlay+0xfa>
    2392:	5e dc       	rcall	.-1860   	; 0x1c50 <displayScore>
				while(1){
					if((~PINC & 0x01) == 0x01){
    2394:	86 e2       	ldi	r24, 0x26	; 38
    2396:	90 e0       	ldi	r25, 0x00	; 0
    2398:	fc 01       	movw	r30, r24
    239a:	80 81       	ld	r24, Z
    239c:	88 2f       	mov	r24, r24
    239e:	90 e0       	ldi	r25, 0x00	; 0
    23a0:	81 70       	andi	r24, 0x01	; 1
    23a2:	99 27       	eor	r25, r25
    23a4:	89 2b       	or	r24, r25
    23a6:	b1 f7       	brne	.-20     	; 0x2394 <gamePlay+0xde>
						reset = 1;
    23a8:	81 e0       	ldi	r24, 0x01	; 1
    23aa:	80 93 0d 01 	sts	0x010D, r24	; 0x80010d <reset>
						break;
    23ae:	00 00       	nop
					}
				}
			}
		}
		
		while(!TimerFlag){}
    23b0:	00 00       	nop
    23b2:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <__data_end>
    23b6:	88 23       	and	r24, r24
    23b8:	e1 f3       	breq	.-8      	; 0x23b2 <gamePlay+0xfc>
		TimerFlag = 0;
    23ba:	10 92 c2 01 	sts	0x01C2, r1	; 0x8001c2 <__data_end>
	}
    23be:	97 cf       	rjmp	.-210    	; 0x22ee <gamePlay+0x38>
		if((tempC & 0x01) == 0x01){
			reset = 1;
		}
		
		if(reset == 1){
			break;
    23c0:	00 00       	nop
		}
		
		while(!TimerFlag){}
		TimerFlag = 0;
	}
}
    23c2:	00 00       	nop
    23c4:	df 91       	pop	r29
    23c6:	cf 91       	pop	r28
    23c8:	08 95       	ret

000023ca <main>:

int main(void)
{
    23ca:	cf 93       	push	r28
    23cc:	df 93       	push	r29
    23ce:	1f 92       	push	r1
    23d0:	cd b7       	in	r28, 0x3d	; 61
    23d2:	de b7       	in	r29, 0x3e	; 62
	DDRA = 0x00; PORTA = 0xFF;	//Player 2 buttons + 3 of Player 1 Buttons
    23d4:	81 e2       	ldi	r24, 0x21	; 33
    23d6:	90 e0       	ldi	r25, 0x00	; 0
    23d8:	fc 01       	movw	r30, r24
    23da:	10 82       	st	Z, r1
    23dc:	82 e2       	ldi	r24, 0x22	; 34
    23de:	90 e0       	ldi	r25, 0x00	; 0
    23e0:	2f ef       	ldi	r18, 0xFF	; 255
    23e2:	fc 01       	movw	r30, r24
    23e4:	20 83       	st	Z, r18
	DDRC = 0x02; PORTC = 0xC1;	//Last 2 Player 1 Buttons + Reset Button + Speaker Output
    23e6:	87 e2       	ldi	r24, 0x27	; 39
    23e8:	90 e0       	ldi	r25, 0x00	; 0
    23ea:	22 e0       	ldi	r18, 0x02	; 2
    23ec:	fc 01       	movw	r30, r24
    23ee:	20 83       	st	Z, r18
    23f0:	88 e2       	ldi	r24, 0x28	; 40
    23f2:	90 e0       	ldi	r25, 0x00	; 0
    23f4:	21 ec       	ldi	r18, 0xC1	; 193
    23f6:	fc 01       	movw	r30, r24
    23f8:	20 83       	st	Z, r18
	DDRB = 0x03; PORTB = 0x00; // LCD data lines
    23fa:	84 e2       	ldi	r24, 0x24	; 36
    23fc:	90 e0       	ldi	r25, 0x00	; 0
    23fe:	23 e0       	ldi	r18, 0x03	; 3
    2400:	fc 01       	movw	r30, r24
    2402:	20 83       	st	Z, r18
    2404:	85 e2       	ldi	r24, 0x25	; 37
    2406:	90 e0       	ldi	r25, 0x00	; 0
    2408:	fc 01       	movw	r30, r24
    240a:	10 82       	st	Z, r1
	DDRD = 0xFF; PORTD = 0x00; // LCD control lines
    240c:	8a e2       	ldi	r24, 0x2A	; 42
    240e:	90 e0       	ldi	r25, 0x00	; 0
    2410:	2f ef       	ldi	r18, 0xFF	; 255
    2412:	fc 01       	movw	r30, r24
    2414:	20 83       	st	Z, r18
    2416:	8b e2       	ldi	r24, 0x2B	; 43
    2418:	90 e0       	ldi	r25, 0x00	; 0
    241a:	fc 01       	movw	r30, r24
    241c:	10 82       	st	Z, r1
	
	while(reset == 1){
    241e:	88 c0       	rjmp	.+272    	; 0x2530 <main+0x166>
		WordOfData = eeprom_read_word((uint16_t*)46);	
    2420:	8e e2       	ldi	r24, 0x2E	; 46
    2422:	90 e0       	ldi	r25, 0x00	; 0
    2424:	ab d1       	rcall	.+854    	; 0x277c <eeprom_read_word>
    2426:	90 93 e8 01 	sts	0x01E8, r25	; 0x8001e8 <WordOfData+0x1>
    242a:	80 93 e7 01 	sts	0x01E7, r24	; 0x8001e7 <WordOfData>
		
		if(WordOfData > 0x200){
    242e:	80 91 e7 01 	lds	r24, 0x01E7	; 0x8001e7 <WordOfData>
    2432:	90 91 e8 01 	lds	r25, 0x01E8	; 0x8001e8 <WordOfData+0x1>
    2436:	81 30       	cpi	r24, 0x01	; 1
    2438:	92 40       	sbci	r25, 0x02	; 2
    243a:	28 f0       	brcs	.+10     	; 0x2446 <main+0x7c>
			eeprom_write_word ((uint16_t*)46, 0);
    243c:	60 e0       	ldi	r22, 0x00	; 0
    243e:	70 e0       	ldi	r23, 0x00	; 0
    2440:	8e e2       	ldi	r24, 0x2E	; 46
    2442:	90 e0       	ldi	r25, 0x00	; 0
    2444:	a0 d1       	rcall	.+832    	; 0x2786 <eeprom_write_word>
		}
			
		pattern = 0x00; // LED pattern - 0: LED off; 1: LED on
    2446:	10 92 c7 01 	sts	0x01C7, r1	; 0x8001c7 <pattern>
		row = 0x00; // Row(s) displaying pattern - 0: display pattern on row; 1: do NOT display pattern on row
    244a:	10 92 c8 01 	sts	0x01C8, r1	; 0x8001c8 <row>
		pattern1 = 0x00; // LED pattern - 0: LED off; 1: LED on
    244e:	10 92 c9 01 	sts	0x01C9, r1	; 0x8001c9 <pattern1>
		row1 = 0xFE; // Row(s) displaying pattern - 0: display pattern on row; 1: do NOT display pattern on row
    2452:	8e ef       	ldi	r24, 0xFE	; 254
    2454:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <row1>
		pattern2 = 0x00; // LED pattern - 0: LED off; 1: LED on
    2458:	10 92 ca 01 	sts	0x01CA, r1	; 0x8001ca <pattern2>
		row2 = 0xFD; // Row(s) displaying pattern - 0: display pattern on row; 1: do NOT display pattern on row
    245c:	8d ef       	ldi	r24, 0xFD	; 253
    245e:	80 93 05 01 	sts	0x0105, r24	; 0x800105 <row2>
		pattern3 = 0x00; // LED pattern - 0: LED off; 1: LED on
    2462:	10 92 cb 01 	sts	0x01CB, r1	; 0x8001cb <pattern3>
		row3 = 0xFB; // Row(s) displaying pattern - 0: display pattern on row; 1: do NOT display pattern on row
    2466:	8b ef       	ldi	r24, 0xFB	; 251
    2468:	80 93 06 01 	sts	0x0106, r24	; 0x800106 <row3>
		pattern4 = 0x00; // LED pattern - 0: LED off; 1: LED on
    246c:	10 92 cc 01 	sts	0x01CC, r1	; 0x8001cc <pattern4>
		row4 = 0xF7; // Row(s) displaying pattern - 0: display pattern on row; 1: do NOT display pattern on row
    2470:	87 ef       	ldi	r24, 0xF7	; 247
    2472:	80 93 07 01 	sts	0x0107, r24	; 0x800107 <row4>
		pattern5 = 0x00; // LED pattern - 0: LED off; 1: LED on
    2476:	10 92 cd 01 	sts	0x01CD, r1	; 0x8001cd <pattern5>
		row5 = 0xEF; // Row(s) displaying pattern - 0: display pattern on row; 1: do NOT display pattern on row
    247a:	8f ee       	ldi	r24, 0xEF	; 239
    247c:	80 93 08 01 	sts	0x0108, r24	; 0x800108 <row5>

		light_count = 0;
    2480:	10 92 cf 01 	sts	0x01CF, r1	; 0x8001cf <light_count+0x1>
    2484:	10 92 ce 01 	sts	0x01CE, r1	; 0x8001ce <light_count>
		slowness = 200; //200
    2488:	88 ec       	ldi	r24, 0xC8	; 200
    248a:	90 e0       	ldi	r25, 0x00	; 0
    248c:	90 93 0a 01 	sts	0x010A, r25	; 0x80010a <slowness+0x1>
    2490:	80 93 09 01 	sts	0x0109, r24	; 0x800109 <slowness>
		counter = 200;
    2494:	88 ec       	ldi	r24, 0xC8	; 200
    2496:	90 e0       	ldi	r25, 0x00	; 0
    2498:	90 93 0c 01 	sts	0x010C, r25	; 0x80010c <counter+0x1>
    249c:	80 93 0b 01 	sts	0x010B, r24	; 0x80010b <counter>
		mode = 0;
    24a0:	10 92 d0 01 	sts	0x01D0, r1	; 0x8001d0 <mode>

		did1 = 0;
    24a4:	10 92 d1 01 	sts	0x01D1, r1	; 0x8001d1 <did1>
		did2 = 0;
    24a8:	10 92 d2 01 	sts	0x01D2, r1	; 0x8001d2 <did2>
		did3 = 0;
    24ac:	10 92 d3 01 	sts	0x01D3, r1	; 0x8001d3 <did3>
		did4 = 0;
    24b0:	10 92 d4 01 	sts	0x01D4, r1	; 0x8001d4 <did4>
		did5 = 0;
    24b4:	10 92 d5 01 	sts	0x01D5, r1	; 0x8001d5 <did5>
		done1 = 0;
    24b8:	10 92 d6 01 	sts	0x01D6, r1	; 0x8001d6 <done1>
		done2 = 0;
    24bc:	10 92 d7 01 	sts	0x01D7, r1	; 0x8001d7 <done2>
		done3 = 0;
    24c0:	10 92 d8 01 	sts	0x01D8, r1	; 0x8001d8 <done3>
		done4 = 0;
    24c4:	10 92 d9 01 	sts	0x01D9, r1	; 0x8001d9 <done4>
		done5 = 0;
    24c8:	10 92 da 01 	sts	0x01DA, r1	; 0x8001da <done5>
		
		score = 0;
    24cc:	10 92 e6 01 	sts	0x01E6, r1	; 0x8001e6 <score+0x1>
    24d0:	10 92 e5 01 	sts	0x01E5, r1	; 0x8001e5 <score>
		
		secondPlayerPressed1 = 0;
    24d4:	10 92 db 01 	sts	0x01DB, r1	; 0x8001db <secondPlayerPressed1>
		secondPlayerPressed2 = 0;
    24d8:	10 92 dc 01 	sts	0x01DC, r1	; 0x8001dc <secondPlayerPressed2>
		secondPlayerPressed3 = 0;
    24dc:	10 92 dd 01 	sts	0x01DD, r1	; 0x8001dd <secondPlayerPressed3>
		secondPlayerPressed4 = 0;
    24e0:	10 92 de 01 	sts	0x01DE, r1	; 0x8001de <secondPlayerPressed4>
		secondPlayerPressed5 = 0;
    24e4:	10 92 df 01 	sts	0x01DF, r1	; 0x8001df <secondPlayerPressed5>
		
		firstPlayerPressed1 = 0;
    24e8:	10 92 e0 01 	sts	0x01E0, r1	; 0x8001e0 <firstPlayerPressed1>
		firstPlayerPressed2 = 0;
    24ec:	10 92 e1 01 	sts	0x01E1, r1	; 0x8001e1 <firstPlayerPressed2>
		firstPlayerPressed3 = 0;
    24f0:	10 92 e2 01 	sts	0x01E2, r1	; 0x8001e2 <firstPlayerPressed3>
		firstPlayerPressed4 = 0;
    24f4:	10 92 e3 01 	sts	0x01E3, r1	; 0x8001e3 <firstPlayerPressed4>
		firstPlayerPressed5 = 0;
    24f8:	10 92 e4 01 	sts	0x01E4, r1	; 0x8001e4 <firstPlayerPressed5>
		
		size = 5;
    24fc:	85 e0       	ldi	r24, 0x05	; 5
    24fe:	80 93 0e 01 	sts	0x010E, r24	; 0x80010e <size>
		
		for(char i = 0; i < 225; i++){
    2502:	19 82       	std	Y+1, r1	; 0x01
    2504:	11 c0       	rjmp	.+34     	; 0x2528 <main+0x15e>
			time[i] = 0;
    2506:	89 81       	ldd	r24, Y+1	; 0x01
    2508:	88 2f       	mov	r24, r24
    250a:	90 e0       	ldi	r25, 0x00	; 0
    250c:	81 53       	subi	r24, 0x31	; 49
    250e:	9d 4f       	sbci	r25, 0xFD	; 253
    2510:	fc 01       	movw	r30, r24
    2512:	10 82       	st	Z, r1
			sequence[i] = 0;
    2514:	89 81       	ldd	r24, Y+1	; 0x01
    2516:	88 2f       	mov	r24, r24
    2518:	90 e0       	ldi	r25, 0x00	; 0
    251a:	87 51       	subi	r24, 0x17	; 23
    251c:	9e 4f       	sbci	r25, 0xFE	; 254
    251e:	fc 01       	movw	r30, r24
    2520:	10 82       	st	Z, r1
		firstPlayerPressed4 = 0;
		firstPlayerPressed5 = 0;
		
		size = 5;
		
		for(char i = 0; i < 225; i++){
    2522:	89 81       	ldd	r24, Y+1	; 0x01
    2524:	8f 5f       	subi	r24, 0xFF	; 255
    2526:	89 83       	std	Y+1, r24	; 0x01
    2528:	89 81       	ldd	r24, Y+1	; 0x01
    252a:	81 3e       	cpi	r24, 0xE1	; 225
			time[i] = 0;
			sequence[i] = 0;
		}
		
		gamePlay();
    252c:	60 f3       	brcs	.-40     	; 0x2506 <main+0x13c>
    252e:	c3 de       	rcall	.-634    	; 0x22b6 <gamePlay>
	DDRA = 0x00; PORTA = 0xFF;	//Player 2 buttons + 3 of Player 1 Buttons
	DDRC = 0x02; PORTC = 0xC1;	//Last 2 Player 1 Buttons + Reset Button + Speaker Output
	DDRB = 0x03; PORTB = 0x00; // LCD data lines
	DDRD = 0xFF; PORTD = 0x00; // LCD control lines
	
	while(reset == 1){
    2530:	80 91 0d 01 	lds	r24, 0x010D	; 0x80010d <reset>
    2534:	81 30       	cpi	r24, 0x01	; 1
    2536:	09 f4       	brne	.+2      	; 0x253a <main+0x170>
    2538:	73 cf       	rjmp	.-282    	; 0x2420 <main+0x56>
    253a:	80 e0       	ldi	r24, 0x00	; 0
    253c:	90 e0       	ldi	r25, 0x00	; 0
			sequence[i] = 0;
		}
		
		gamePlay();
	}
    253e:	0f 90       	pop	r0
    2540:	df 91       	pop	r29
    2542:	cf 91       	pop	r28
    2544:	08 95       	ret

00002546 <__cmpsf2>:
    2546:	2f d0       	rcall	.+94     	; 0x25a6 <__fp_cmp>
    2548:	08 f4       	brcc	.+2      	; 0x254c <__cmpsf2+0x6>
    254a:	81 e0       	ldi	r24, 0x01	; 1
    254c:	08 95       	ret

0000254e <__fixunssfsi>:
    254e:	57 d0       	rcall	.+174    	; 0x25fe <__fp_splitA>
    2550:	88 f0       	brcs	.+34     	; 0x2574 <__fixunssfsi+0x26>
    2552:	9f 57       	subi	r25, 0x7F	; 127
    2554:	90 f0       	brcs	.+36     	; 0x257a <__fixunssfsi+0x2c>
    2556:	b9 2f       	mov	r27, r25
    2558:	99 27       	eor	r25, r25
    255a:	b7 51       	subi	r27, 0x17	; 23
    255c:	a0 f0       	brcs	.+40     	; 0x2586 <__fixunssfsi+0x38>
    255e:	d1 f0       	breq	.+52     	; 0x2594 <__fixunssfsi+0x46>
    2560:	66 0f       	add	r22, r22
    2562:	77 1f       	adc	r23, r23
    2564:	88 1f       	adc	r24, r24
    2566:	99 1f       	adc	r25, r25
    2568:	1a f0       	brmi	.+6      	; 0x2570 <__fixunssfsi+0x22>
    256a:	ba 95       	dec	r27
    256c:	c9 f7       	brne	.-14     	; 0x2560 <__fixunssfsi+0x12>
    256e:	12 c0       	rjmp	.+36     	; 0x2594 <__fixunssfsi+0x46>
    2570:	b1 30       	cpi	r27, 0x01	; 1
    2572:	81 f0       	breq	.+32     	; 0x2594 <__fixunssfsi+0x46>
    2574:	5e d0       	rcall	.+188    	; 0x2632 <__fp_zero>
    2576:	b1 e0       	ldi	r27, 0x01	; 1
    2578:	08 95       	ret
    257a:	5b c0       	rjmp	.+182    	; 0x2632 <__fp_zero>
    257c:	67 2f       	mov	r22, r23
    257e:	78 2f       	mov	r23, r24
    2580:	88 27       	eor	r24, r24
    2582:	b8 5f       	subi	r27, 0xF8	; 248
    2584:	39 f0       	breq	.+14     	; 0x2594 <__fixunssfsi+0x46>
    2586:	b9 3f       	cpi	r27, 0xF9	; 249
    2588:	cc f3       	brlt	.-14     	; 0x257c <__fixunssfsi+0x2e>
    258a:	86 95       	lsr	r24
    258c:	77 95       	ror	r23
    258e:	67 95       	ror	r22
    2590:	b3 95       	inc	r27
    2592:	d9 f7       	brne	.-10     	; 0x258a <__fixunssfsi+0x3c>
    2594:	3e f4       	brtc	.+14     	; 0x25a4 <__fixunssfsi+0x56>
    2596:	90 95       	com	r25
    2598:	80 95       	com	r24
    259a:	70 95       	com	r23
    259c:	61 95       	neg	r22
    259e:	7f 4f       	sbci	r23, 0xFF	; 255
    25a0:	8f 4f       	sbci	r24, 0xFF	; 255
    25a2:	9f 4f       	sbci	r25, 0xFF	; 255
    25a4:	08 95       	ret

000025a6 <__fp_cmp>:
    25a6:	99 0f       	add	r25, r25
    25a8:	00 08       	sbc	r0, r0
    25aa:	55 0f       	add	r21, r21
    25ac:	aa 0b       	sbc	r26, r26
    25ae:	e0 e8       	ldi	r30, 0x80	; 128
    25b0:	fe ef       	ldi	r31, 0xFE	; 254
    25b2:	16 16       	cp	r1, r22
    25b4:	17 06       	cpc	r1, r23
    25b6:	e8 07       	cpc	r30, r24
    25b8:	f9 07       	cpc	r31, r25
    25ba:	c0 f0       	brcs	.+48     	; 0x25ec <__fp_cmp+0x46>
    25bc:	12 16       	cp	r1, r18
    25be:	13 06       	cpc	r1, r19
    25c0:	e4 07       	cpc	r30, r20
    25c2:	f5 07       	cpc	r31, r21
    25c4:	98 f0       	brcs	.+38     	; 0x25ec <__fp_cmp+0x46>
    25c6:	62 1b       	sub	r22, r18
    25c8:	73 0b       	sbc	r23, r19
    25ca:	84 0b       	sbc	r24, r20
    25cc:	95 0b       	sbc	r25, r21
    25ce:	39 f4       	brne	.+14     	; 0x25de <__fp_cmp+0x38>
    25d0:	0a 26       	eor	r0, r26
    25d2:	61 f0       	breq	.+24     	; 0x25ec <__fp_cmp+0x46>
    25d4:	23 2b       	or	r18, r19
    25d6:	24 2b       	or	r18, r20
    25d8:	25 2b       	or	r18, r21
    25da:	21 f4       	brne	.+8      	; 0x25e4 <__fp_cmp+0x3e>
    25dc:	08 95       	ret
    25de:	0a 26       	eor	r0, r26
    25e0:	09 f4       	brne	.+2      	; 0x25e4 <__fp_cmp+0x3e>
    25e2:	a1 40       	sbci	r26, 0x01	; 1
    25e4:	a6 95       	lsr	r26
    25e6:	8f ef       	ldi	r24, 0xFF	; 255
    25e8:	81 1d       	adc	r24, r1
    25ea:	81 1d       	adc	r24, r1
    25ec:	08 95       	ret

000025ee <__fp_split3>:
    25ee:	57 fd       	sbrc	r21, 7
    25f0:	90 58       	subi	r25, 0x80	; 128
    25f2:	44 0f       	add	r20, r20
    25f4:	55 1f       	adc	r21, r21
    25f6:	59 f0       	breq	.+22     	; 0x260e <__fp_splitA+0x10>
    25f8:	5f 3f       	cpi	r21, 0xFF	; 255
    25fa:	71 f0       	breq	.+28     	; 0x2618 <__fp_splitA+0x1a>
    25fc:	47 95       	ror	r20

000025fe <__fp_splitA>:
    25fe:	88 0f       	add	r24, r24
    2600:	97 fb       	bst	r25, 7
    2602:	99 1f       	adc	r25, r25
    2604:	61 f0       	breq	.+24     	; 0x261e <__fp_splitA+0x20>
    2606:	9f 3f       	cpi	r25, 0xFF	; 255
    2608:	79 f0       	breq	.+30     	; 0x2628 <__fp_splitA+0x2a>
    260a:	87 95       	ror	r24
    260c:	08 95       	ret
    260e:	12 16       	cp	r1, r18
    2610:	13 06       	cpc	r1, r19
    2612:	14 06       	cpc	r1, r20
    2614:	55 1f       	adc	r21, r21
    2616:	f2 cf       	rjmp	.-28     	; 0x25fc <__fp_split3+0xe>
    2618:	46 95       	lsr	r20
    261a:	f1 df       	rcall	.-30     	; 0x25fe <__fp_splitA>
    261c:	08 c0       	rjmp	.+16     	; 0x262e <__fp_splitA+0x30>
    261e:	16 16       	cp	r1, r22
    2620:	17 06       	cpc	r1, r23
    2622:	18 06       	cpc	r1, r24
    2624:	99 1f       	adc	r25, r25
    2626:	f1 cf       	rjmp	.-30     	; 0x260a <__fp_splitA+0xc>
    2628:	86 95       	lsr	r24
    262a:	71 05       	cpc	r23, r1
    262c:	61 05       	cpc	r22, r1
    262e:	08 94       	sec
    2630:	08 95       	ret

00002632 <__fp_zero>:
    2632:	e8 94       	clt

00002634 <__fp_szero>:
    2634:	bb 27       	eor	r27, r27
    2636:	66 27       	eor	r22, r22
    2638:	77 27       	eor	r23, r23
    263a:	cb 01       	movw	r24, r22
    263c:	97 f9       	bld	r25, 7
    263e:	08 95       	ret

00002640 <__gesf2>:
    2640:	b2 df       	rcall	.-156    	; 0x25a6 <__fp_cmp>
    2642:	08 f4       	brcc	.+2      	; 0x2646 <__gesf2+0x6>
    2644:	8f ef       	ldi	r24, 0xFF	; 255
    2646:	08 95       	ret

00002648 <__mulsf3>:
    2648:	0b d0       	rcall	.+22     	; 0x2660 <__mulsf3x>
    264a:	78 c0       	rjmp	.+240    	; 0x273c <__fp_round>
    264c:	69 d0       	rcall	.+210    	; 0x2720 <__fp_pscA>
    264e:	28 f0       	brcs	.+10     	; 0x265a <__mulsf3+0x12>
    2650:	6e d0       	rcall	.+220    	; 0x272e <__fp_pscB>
    2652:	18 f0       	brcs	.+6      	; 0x265a <__mulsf3+0x12>
    2654:	95 23       	and	r25, r21
    2656:	09 f0       	breq	.+2      	; 0x265a <__mulsf3+0x12>
    2658:	5a c0       	rjmp	.+180    	; 0x270e <__fp_inf>
    265a:	5f c0       	rjmp	.+190    	; 0x271a <__fp_nan>
    265c:	11 24       	eor	r1, r1
    265e:	ea cf       	rjmp	.-44     	; 0x2634 <__fp_szero>

00002660 <__mulsf3x>:
    2660:	c6 df       	rcall	.-116    	; 0x25ee <__fp_split3>
    2662:	a0 f3       	brcs	.-24     	; 0x264c <__mulsf3+0x4>

00002664 <__mulsf3_pse>:
    2664:	95 9f       	mul	r25, r21
    2666:	d1 f3       	breq	.-12     	; 0x265c <__mulsf3+0x14>
    2668:	95 0f       	add	r25, r21
    266a:	50 e0       	ldi	r21, 0x00	; 0
    266c:	55 1f       	adc	r21, r21
    266e:	62 9f       	mul	r22, r18
    2670:	f0 01       	movw	r30, r0
    2672:	72 9f       	mul	r23, r18
    2674:	bb 27       	eor	r27, r27
    2676:	f0 0d       	add	r31, r0
    2678:	b1 1d       	adc	r27, r1
    267a:	63 9f       	mul	r22, r19
    267c:	aa 27       	eor	r26, r26
    267e:	f0 0d       	add	r31, r0
    2680:	b1 1d       	adc	r27, r1
    2682:	aa 1f       	adc	r26, r26
    2684:	64 9f       	mul	r22, r20
    2686:	66 27       	eor	r22, r22
    2688:	b0 0d       	add	r27, r0
    268a:	a1 1d       	adc	r26, r1
    268c:	66 1f       	adc	r22, r22
    268e:	82 9f       	mul	r24, r18
    2690:	22 27       	eor	r18, r18
    2692:	b0 0d       	add	r27, r0
    2694:	a1 1d       	adc	r26, r1
    2696:	62 1f       	adc	r22, r18
    2698:	73 9f       	mul	r23, r19
    269a:	b0 0d       	add	r27, r0
    269c:	a1 1d       	adc	r26, r1
    269e:	62 1f       	adc	r22, r18
    26a0:	83 9f       	mul	r24, r19
    26a2:	a0 0d       	add	r26, r0
    26a4:	61 1d       	adc	r22, r1
    26a6:	22 1f       	adc	r18, r18
    26a8:	74 9f       	mul	r23, r20
    26aa:	33 27       	eor	r19, r19
    26ac:	a0 0d       	add	r26, r0
    26ae:	61 1d       	adc	r22, r1
    26b0:	23 1f       	adc	r18, r19
    26b2:	84 9f       	mul	r24, r20
    26b4:	60 0d       	add	r22, r0
    26b6:	21 1d       	adc	r18, r1
    26b8:	82 2f       	mov	r24, r18
    26ba:	76 2f       	mov	r23, r22
    26bc:	6a 2f       	mov	r22, r26
    26be:	11 24       	eor	r1, r1
    26c0:	9f 57       	subi	r25, 0x7F	; 127
    26c2:	50 40       	sbci	r21, 0x00	; 0
    26c4:	8a f0       	brmi	.+34     	; 0x26e8 <__mulsf3_pse+0x84>
    26c6:	e1 f0       	breq	.+56     	; 0x2700 <__mulsf3_pse+0x9c>
    26c8:	88 23       	and	r24, r24
    26ca:	4a f0       	brmi	.+18     	; 0x26de <__mulsf3_pse+0x7a>
    26cc:	ee 0f       	add	r30, r30
    26ce:	ff 1f       	adc	r31, r31
    26d0:	bb 1f       	adc	r27, r27
    26d2:	66 1f       	adc	r22, r22
    26d4:	77 1f       	adc	r23, r23
    26d6:	88 1f       	adc	r24, r24
    26d8:	91 50       	subi	r25, 0x01	; 1
    26da:	50 40       	sbci	r21, 0x00	; 0
    26dc:	a9 f7       	brne	.-22     	; 0x26c8 <__mulsf3_pse+0x64>
    26de:	9e 3f       	cpi	r25, 0xFE	; 254
    26e0:	51 05       	cpc	r21, r1
    26e2:	70 f0       	brcs	.+28     	; 0x2700 <__mulsf3_pse+0x9c>
    26e4:	14 c0       	rjmp	.+40     	; 0x270e <__fp_inf>
    26e6:	a6 cf       	rjmp	.-180    	; 0x2634 <__fp_szero>
    26e8:	5f 3f       	cpi	r21, 0xFF	; 255
    26ea:	ec f3       	brlt	.-6      	; 0x26e6 <__mulsf3_pse+0x82>
    26ec:	98 3e       	cpi	r25, 0xE8	; 232
    26ee:	dc f3       	brlt	.-10     	; 0x26e6 <__mulsf3_pse+0x82>
    26f0:	86 95       	lsr	r24
    26f2:	77 95       	ror	r23
    26f4:	67 95       	ror	r22
    26f6:	b7 95       	ror	r27
    26f8:	f7 95       	ror	r31
    26fa:	e7 95       	ror	r30
    26fc:	9f 5f       	subi	r25, 0xFF	; 255
    26fe:	c1 f7       	brne	.-16     	; 0x26f0 <__mulsf3_pse+0x8c>
    2700:	fe 2b       	or	r31, r30
    2702:	88 0f       	add	r24, r24
    2704:	91 1d       	adc	r25, r1
    2706:	96 95       	lsr	r25
    2708:	87 95       	ror	r24
    270a:	97 f9       	bld	r25, 7
    270c:	08 95       	ret

0000270e <__fp_inf>:
    270e:	97 f9       	bld	r25, 7
    2710:	9f 67       	ori	r25, 0x7F	; 127
    2712:	80 e8       	ldi	r24, 0x80	; 128
    2714:	70 e0       	ldi	r23, 0x00	; 0
    2716:	60 e0       	ldi	r22, 0x00	; 0
    2718:	08 95       	ret

0000271a <__fp_nan>:
    271a:	9f ef       	ldi	r25, 0xFF	; 255
    271c:	80 ec       	ldi	r24, 0xC0	; 192
    271e:	08 95       	ret

00002720 <__fp_pscA>:
    2720:	00 24       	eor	r0, r0
    2722:	0a 94       	dec	r0
    2724:	16 16       	cp	r1, r22
    2726:	17 06       	cpc	r1, r23
    2728:	18 06       	cpc	r1, r24
    272a:	09 06       	cpc	r0, r25
    272c:	08 95       	ret

0000272e <__fp_pscB>:
    272e:	00 24       	eor	r0, r0
    2730:	0a 94       	dec	r0
    2732:	12 16       	cp	r1, r18
    2734:	13 06       	cpc	r1, r19
    2736:	14 06       	cpc	r1, r20
    2738:	05 06       	cpc	r0, r21
    273a:	08 95       	ret

0000273c <__fp_round>:
    273c:	09 2e       	mov	r0, r25
    273e:	03 94       	inc	r0
    2740:	00 0c       	add	r0, r0
    2742:	11 f4       	brne	.+4      	; 0x2748 <__fp_round+0xc>
    2744:	88 23       	and	r24, r24
    2746:	52 f0       	brmi	.+20     	; 0x275c <__fp_round+0x20>
    2748:	bb 0f       	add	r27, r27
    274a:	40 f4       	brcc	.+16     	; 0x275c <__fp_round+0x20>
    274c:	bf 2b       	or	r27, r31
    274e:	11 f4       	brne	.+4      	; 0x2754 <__fp_round+0x18>
    2750:	60 ff       	sbrs	r22, 0
    2752:	04 c0       	rjmp	.+8      	; 0x275c <__fp_round+0x20>
    2754:	6f 5f       	subi	r22, 0xFF	; 255
    2756:	7f 4f       	sbci	r23, 0xFF	; 255
    2758:	8f 4f       	sbci	r24, 0xFF	; 255
    275a:	9f 4f       	sbci	r25, 0xFF	; 255
    275c:	08 95       	ret

0000275e <__umulhisi3>:
    275e:	a2 9f       	mul	r26, r18
    2760:	b0 01       	movw	r22, r0
    2762:	b3 9f       	mul	r27, r19
    2764:	c0 01       	movw	r24, r0
    2766:	a3 9f       	mul	r26, r19
    2768:	70 0d       	add	r23, r0
    276a:	81 1d       	adc	r24, r1
    276c:	11 24       	eor	r1, r1
    276e:	91 1d       	adc	r25, r1
    2770:	b2 9f       	mul	r27, r18
    2772:	70 0d       	add	r23, r0
    2774:	81 1d       	adc	r24, r1
    2776:	11 24       	eor	r1, r1
    2778:	91 1d       	adc	r25, r1
    277a:	08 95       	ret

0000277c <eeprom_read_word>:
    277c:	a8 e1       	ldi	r26, 0x18	; 24
    277e:	b0 e0       	ldi	r27, 0x00	; 0
    2780:	42 e0       	ldi	r20, 0x02	; 2
    2782:	50 e0       	ldi	r21, 0x00	; 0
    2784:	05 c0       	rjmp	.+10     	; 0x2790 <eeprom_read_blraw>

00002786 <eeprom_write_word>:
    2786:	12 d0       	rcall	.+36     	; 0x27ac <eeprom_write_byte>
    2788:	27 2f       	mov	r18, r23
    278a:	11 c0       	rjmp	.+34     	; 0x27ae <eeprom_write_r18>

0000278c <eeprom_read_block>:
    278c:	dc 01       	movw	r26, r24
    278e:	cb 01       	movw	r24, r22

00002790 <eeprom_read_blraw>:
    2790:	fc 01       	movw	r30, r24
    2792:	f9 99       	sbic	0x1f, 1	; 31
    2794:	fe cf       	rjmp	.-4      	; 0x2792 <eeprom_read_blraw+0x2>
    2796:	06 c0       	rjmp	.+12     	; 0x27a4 <eeprom_read_blraw+0x14>
    2798:	f2 bd       	out	0x22, r31	; 34
    279a:	e1 bd       	out	0x21, r30	; 33
    279c:	f8 9a       	sbi	0x1f, 0	; 31
    279e:	31 96       	adiw	r30, 0x01	; 1
    27a0:	00 b4       	in	r0, 0x20	; 32
    27a2:	0d 92       	st	X+, r0
    27a4:	41 50       	subi	r20, 0x01	; 1
    27a6:	50 40       	sbci	r21, 0x00	; 0
    27a8:	b8 f7       	brcc	.-18     	; 0x2798 <eeprom_read_blraw+0x8>
    27aa:	08 95       	ret

000027ac <eeprom_write_byte>:
    27ac:	26 2f       	mov	r18, r22

000027ae <eeprom_write_r18>:
    27ae:	f9 99       	sbic	0x1f, 1	; 31
    27b0:	fe cf       	rjmp	.-4      	; 0x27ae <eeprom_write_r18>
    27b2:	1f ba       	out	0x1f, r1	; 31
    27b4:	92 bd       	out	0x22, r25	; 34
    27b6:	81 bd       	out	0x21, r24	; 33
    27b8:	20 bd       	out	0x20, r18	; 32
    27ba:	0f b6       	in	r0, 0x3f	; 63
    27bc:	f8 94       	cli
    27be:	fa 9a       	sbi	0x1f, 2	; 31
    27c0:	f9 9a       	sbi	0x1f, 1	; 31
    27c2:	0f be       	out	0x3f, r0	; 63
    27c4:	01 96       	adiw	r24, 0x01	; 1
    27c6:	08 95       	ret

000027c8 <_exit>:
    27c8:	f8 94       	cli

000027ca <__stop_program>:
    27ca:	ff cf       	rjmp	.-2      	; 0x27ca <__stop_program>
